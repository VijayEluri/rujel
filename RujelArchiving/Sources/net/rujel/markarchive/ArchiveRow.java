// ArchiveRow.java : Class file for WO Component 'ArchiveRow'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.markarchive;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;

// Generated by the WOLips Templateengine Plug-in at Jan 6, 2009 11:55:07 AM
public class ArchiveRow extends com.webobjects.appserver.WOComponent {
    public ArchiveRow(WOContext context) {
        super(context);
    }
    public MarkArchive archItem;
	protected NSArray _archives;
	public NSArray archives(){
		if(_archives != null)
			return _archives;
		
		_archives = (NSArray)valueForBinding("list");
		if(_archives == null) {
			EOEnterpriseObject eo = (EOEnterpriseObject)valueForBinding("object");
			if(eo != null && eo.editingContext() != null)
				_archives = MarkArchive.archivesForObject(eo);
		}
		if(_archives == null) {
			NSDictionary identifierDict = (NSDictionary)valueForBinding("identifierDict");
			if(identifierDict != null) {
				String entityName = (String)identifierDict.valueForKey("entityName");
				EOEditingContext ec = (EOEditingContext)identifierDict.valueForKey("editingContext");
				EOQualifier qual = MarkArchive.archiveQualifier(entityName, identifierDict, ec);
				EOSortOrdering so = EOSortOrdering.sortOrderingWithKey("timestamp", EOSortOrdering.CompareAscending);
				EOFetchSpecification fs = new EOFetchSpecification("MarkArchive",qual,new NSArray(so));
				_archives = ec.objectsWithFetchSpecification(fs);
			}
		}
		if(_archives == null)
			_archives = NSArray.EmptyArray;

		return _archives;
	}
	
	public void setArchItem(MarkArchive item) {
		archItem = item;
		if(hasBinding("item"))
			setValueForBinding(item, "item");
	}

	public String showReason() {
		if(archItem == null)
			return null;
		else if (archItem.reason() == null)
			return null;
		String reas = archItem.reason();
		if(reas.length() < 10)
			return reas;
		StringBuffer result = new StringBuffer("<div style=\"width:5em;\" title=\"");
		result.append(WOMessage.stringByEscapingHTMLAttributeValue(reas));
		result.append("\" onclick=\"alert(this.title);\">");
		result.append(reas.substring(0, 8)).append("...</div>");
		return result.toString();
	}

	public boolean isStateless() {
		return true;
	}
	
	public boolean synchronizesVariablesWithBindings() {
        return false;
	}
	
	public void reset() {
		super.reset();
		_archives = null;
		archItem = null;
	}

	public boolean hasList() {
		return (hasBinding("list") || hasBinding("object") || hasBinding("identifierDict"));
	}
	
}