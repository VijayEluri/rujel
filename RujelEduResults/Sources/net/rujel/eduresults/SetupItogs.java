package net.rujel.eduresults;

import java.util.Enumeration;
import java.util.logging.Logger;

import net.rujel.base.MyUtility;
import net.rujel.base.SettingsBase;
import net.rujel.reusables.AdaptingComparator;
import net.rujel.reusables.ModulesInitialiser;
import net.rujel.reusables.PlistReader;
import net.rujel.reusables.Various;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOAndQualifier;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.eocontrol.EOFetchSpecification;
import com.webobjects.eocontrol.EOKeyValueQualifier;
import com.webobjects.eocontrol.EOOrQualifier;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSComparator.ComparisonException;

// Generated by the WOLips Templateengine Plug-in at Sep 3, 2009 12:37:59 PM
public class SetupItogs extends com.webobjects.appserver.WOComponent {
	protected static Logger logger = Logger.getLogger("rujel.itog");

 	public EOEditingContext ec;
	public String listName;
	public NSArray extraLists;
	public NSArray allTypes;
	public NSMutableArray activeTypes = new NSMutableArray();
	public Object item;
	public ItogType currType;
	public NSArray itogsList;
	public NSArray extensions;
	public Object extItem;

	public SetupItogs(WOContext context) {
        super(context);
//		setEc((EOEditingContext)context.page().valueForKey("ec"));
//		context().page().takeValueForKey(this, "toReset");
    }

	public void appendToResponse(WOResponse aResponse, WOContext aContext) {
		if(Various.boolForObject(valueForBinding("shouldReset"))) {
			currType = null;
			itogsList = null;
			activeTypes.removeAllObjects();
			setEc((EOEditingContext)context().page().valueForKey("ec"));
			setValueForBinding(Boolean.FALSE, "shouldReset");
		}
		super.appendToResponse(aResponse, aContext);
	}

	public void setEc(EOEditingContext newEc) {
		extensions = (NSArray)session().valueForKeyPath("modules.itogExtensions");
		ec = newEc;
		ec.lock();
		try {
			EOFetchSpecification fs = new EOFetchSpecification(ItogType.ENTITY_NAME,
					null, ModulesInitialiser.sorter);
			allTypes = ec.objectsWithFetchSpecification(fs);
			SettingsBase base = SettingsBase.baseForKey(ItogMark.ENTITY_NAME, ec, true);
			setListName(base.textValue());
			if(listName == null) {
				setListName((String)application().valueForKeyPath(
					"strings.RujelEduPlan_EduPlan.SetupPeriods.defaultListName"));
				base.setTextValue(listName);
				ec.saveChanges();
				logger.log(WOLogLevel.SETTINGS_EDITING,
						"Created default ItogMark ListName setting: " + listName,
						new Object[] {session(), base});
			} else {
				EOQualifier[] quals = new EOQualifier[2];
				quals[0] = new EOKeyValueQualifier("eduYear", EOQualifier.QualifierOperatorEqual,
						session().valueForKey("eduYear"));
				quals[1] = new EOKeyValueQualifier("eduYear",
						EOQualifier.QualifierOperatorEqual, new Integer(0));
				quals[1] = new EOOrQualifier(new NSArray(quals));
				quals[0] = new EOKeyValueQualifier("listName",
						EOQualifier.QualifierOperatorNotEqual,listName);
				quals[0] = new EOAndQualifier(new NSArray(quals));
				fs = new EOFetchSpecification("ItogTypeList",quals[0],null);
				extraLists = ec.objectsWithFetchSpecification(fs);
			}
		} catch (Exception e) {
			logger.log(WOLogLevel.WARNING,
					"Error creating default ItogMark ListName setting",
					new Object[] {session(), e});
		} finally {
			ec.unlock();
		}
	}
	
	public void setListName(String name) {
		listName = name;
		if(listName != null) {
			Integer eduYear = (Integer)session().valueForKey("eduYear");
			NSArray used = ItogType.getTypeList(listName, eduYear, ec);
			if(used == null || used.count() == 0) {
				activeTypes.removeAllObjects();
				itogsList = null;
			} else {
				activeTypes.setArray((NSArray)used.valueForKey("itogType"));
				allItogs();
			}
		}
		currType = null;
	}
	
	protected void allItogs() {
		EOSortOrdering.sortArrayUsingKeyOrderArray(activeTypes,
				ModulesInitialiser.sorter);
		NSMutableArray allItogs = new NSMutableArray();
		Enumeration enu = activeTypes.objectEnumerator();
		while (enu.hasMoreElements()) {
			ItogType type = (ItogType) enu.nextElement();
			Integer eduYear = (Integer)session().valueForKey("eduYear");
			allItogs.addObjectsFromArray(type.itogsInYear(eduYear));
		}
		try {
			allItogs.sortUsingComparator(new AdaptingComparator(ItogContainer.class));
		} catch (ComparisonException e) {
			Logger.getLogger("rujel.itog").log(WOLogLevel.WARNING,"Error sorting itogs",
					new Object[] {session(),e});
		}
		itogsList = allItogs;
	}
	
	public boolean active() {
		return activeTypes.containsObject(item);
	}
	
	public void setActive(boolean set) {
		if(set) {
			if(!active())
				activeTypes.addObject(item);
		} else {
			activeTypes.removeObject(item);
		}
	}
	
	public WOActionResults saveList() {
		ec.lock();
		Integer eduYear = (Integer)session().valueForKey("eduYear");
		try {
			NSArray previous = ItogType.getTypeList(listName, eduYear, ec);
			NSMutableArray toDelete = (previous==null || previous.count() == 0)?
					new NSMutableArray() : previous.mutableClone();
			NSMutableArray toAdd = activeTypes.mutableClone();
			Enumeration enu = previous.objectEnumerator();
			while (enu.hasMoreElements()) {
				EOEnterpriseObject tl = (EOEnterpriseObject) enu.nextElement();
				ItogType it = (ItogType)tl.valueForKey("itogType");
				Integer year = (Integer)tl.valueForKey("eduYear");
				if(year == null || year.intValue() == 0) { // add year tags
					toDelete.removeObject(tl);
					tl.takeValueForKey(new Integer(eduYear -1), "eduYear");
					continue;
				}
				if(toAdd.removeObject(it)) {
					toDelete.removeObject(tl);
				}
			}
			if(toAdd.count() > 0) {
				enu = toAdd.objectEnumerator();
				while (enu.hasMoreElements()) {
					ItogType it = (ItogType) enu.nextElement();
					EOEnterpriseObject tl = (EOEnterpriseObject)toDelete.removeLastObject();
					if(tl == null) {
						tl = EOUtilities.createAndInsertInstance(ec, "ItogTypeList");
						tl.takeValueForKey(listName, "listName");
						tl.takeValueForKey(eduYear, "eduYear");
						tl.takeValueForKey(new Integer(1), "presetGroup");
					}
					tl.addObjectToBothSidesOfRelationshipWithKey(it, "itogType");
				}
			}
			if(toDelete.count() > 0) {
				enu = toDelete.objectEnumerator();
				while (enu.hasMoreElements()) {
					EOEnterpriseObject tl = (EOEnterpriseObject) enu.nextElement();
					ec.deleteObject(tl);
				}
			}
			ec.saveChanges();
			allTypes = EOSortOrdering.sortedArrayUsingKeyOrderArray(allTypes,
					ModulesInitialiser.sorter);
			if(currType == null)
				allItogs();
		} catch (Exception e) {
			logger.log(WOLogLevel.WARNING,"Error saving changes in list " + listName,e);
			session().takeValueForKey(e.getMessage(), "message");
			ec.revert();
			setListName(listName);
		} finally {
			ec.unlock();
		}
		return null;
	}
	
	public WOActionResults selectType() {
		if(currType != item) {
			setCurrType((ItogType)item);
		} else {
			currType = null;
			allItogs();
		}
		return null;
	}
	
	public void setCurrType(ItogType type) {
		currType = type;
		ec.lock();
		try {
			if(type == null) {
				EOFetchSpecification fs = new EOFetchSpecification(ItogType.ENTITY_NAME,
						null, ModulesInitialiser.sorter);
				allTypes = ec.objectsWithFetchSpecification(fs);
				setListName(listName);
			} else if(allTypes.containsObject(type)) {
				EOQualifier[] quals = new EOQualifier[2];
				quals[0] = new EOKeyValueQualifier(ItogContainer.ITOG_TYPE_KEY,
						EOQualifier.QualifierOperatorEqual,currType);
				quals[1] = new EOKeyValueQualifier(ItogContainer.EDU_YEAR_KEY,
						EOQualifier.QualifierOperatorEqual,
						session().valueForKey("eduYear"));
				quals[0] = new EOAndQualifier(new NSArray(quals));
				EOFetchSpecification fs = new EOFetchSpecification(
						ItogContainer.ENTITY_NAME, quals[0], MyUtility.numSorter);
				itogsList = ec.objectsWithFetchSpecification(fs);
			} else {
				allTypes = allTypes.arrayByAddingObject(type);
				itogsList = NSArray.EmptyArray;
				EOEnterpriseObject tl = EOUtilities.createAndInsertInstance(ec,
						"ItogTypeList");
				tl.takeValueForKey(listName, "listName");
				tl.takeValueForKey(session().valueForKey("eduYear"), "eduYear");
				tl.addObjectToBothSidesOfRelationshipWithKey(type, "itogType");
				tl.takeValueForKey(new Integer(1), "presetGroup");
				activeTypes.addObject(type);
				ec.saveChanges();
			}
		} catch (Exception e) {
			logger.log(WOLogLevel.WARNING, "Error adding ItogType",
					new Object[] {session(),type,e});
		} finally {
			ec.unlock();
		}
//		itogName = currType.name();
//		itogTitle = currType.title();
//		itogCount = currType.inYearCount();
	}
	
	public WOActionResults addType() {
		WOComponent selector = pageWithName("SelectorPopup");
		selector.takeValueForKey(context().page(), "returnPage");
		selector.takeValueForKey("currType", "resultPath");
		selector.takeValueForKey(this, "resultGetter");
		NSDictionary dict = (NSDictionary)application().valueForKeyPath(
				"strings.RujelEduResults_EduResults.addType");
		dict = PlistReader.cloneDictionary(dict, true);
		dict.takeValueForKeyPath(ec, "presenterBindings.ec");
		dict.takeValueForKeyPath(valueForKeyPath("allTypes.@max.sort"),
				"presenterBindings.maxSort");
		selector.takeValueForKey(dict, "dict");
		return selector;
	}
	
	public String styleClass() {
		if(item instanceof ItogType) {
			if(item == currType)
				return "selection";
			else
				return "ungerade";
		} else if(item instanceof ItogContainer) {
			return "gerade";
		} else
			return null;
	}
	
	public WOActionResults generateItogs() {
		ec.lock();
		Integer eduYear = (Integer)session().valueForKey("eduYear");
		try {
			currType.generateItogsInYear(eduYear);
			ec.saveChanges();
			itogsList = currType.itogsInYear(eduYear);
			logger.log(WOLogLevel.COREDATA_EDITING, "Generated itogs for type in year "
					+ eduYear, new Object[] {session(),currType});
		} catch (Exception e) {
			logger.log(WOLogLevel.WARNING,"Error generating itogs for type in year "
					+ eduYear, new Object[] {session(),currType,e});
			session().takeValueForKey(e.getMessage(), "message");
			ec.revert();
		} finally {
			ec.unlock();
		}
		return null;
	}
	
	public WOActionResults addItogToType() {
		ec.lock();
		Integer eduYear = (Integer)session().valueForKey("eduYear");
		try {
			Integer num = new Integer(1);
			itogsList = currType.itogsInYear(eduYear);
			if(itogsList != null && itogsList.count() > 0) {
				ItogContainer ic = (ItogContainer)itogsList.lastObject();
				num = new Integer(ic.num() + 1);
			}
			ItogContainer ic = (ItogContainer)EOUtilities.createAndInsertInstance(ec,
					ItogContainer.ENTITY_NAME);
			ic.addObjectToBothSidesOfRelationshipWithKey(currType,
					ItogContainer.ITOG_TYPE_KEY);
			ic.setNum(num);
			ic.setEduYear(eduYear);
			ec.saveChanges();
			if(itogsList == null)
				itogsList = new NSArray(ic);
			else
				itogsList = itogsList.arrayByAddingObject(ic);
			logger.log(WOLogLevel.COREDATA_EDITING, "Added itog container",
					new Object[] {session(),ic});
		} catch (Exception e) {
			logger.log(WOLogLevel.WARNING,"Error adding itog to type in year " + eduYear,
					new Object[] {session(),currType,e});
			session().takeValueForKey(e.getMessage(), "message");
			ec.revert();
		} finally {
			ec.unlock();
		}
		return null;
	}
	
	public WOActionResults prepareItog() {
		if(currType == null)
			return null;
		if(currType.inYearCount().intValue() > 0)
			return generateItogs();
		else
			return addItogToType();
	}
	
	public String prepareTitle() {
		if(currType == null)
			return null;
		if(currType.inYearCount().intValue() > 0)
			return (String)session().valueForKeyPath(
					"strings.RujelEduResults_EduResults.generateItogs");
		else
			return (String)session().valueForKeyPath(
					"strings.RujelEduResults_EduResults.addItog");
	}
	
	public Boolean cantPrepare() {
		if(currType == null)
			return Boolean.TRUE;
		if(itogsList != null && currType.inYearCount().intValue() > 0
				&& itogsList.count() >= currType.inYearCount().intValue())
			return Boolean.TRUE;
		return (Boolean)session().valueForKeyPath("readAccess._create.ItogContainer");
	}
	
	public String typeId () {
		if(item == currType)
			return "currType";
		return null;
	}
	
	public Boolean cantDeleteContainer() {
		if(item == null)
			return null;
		Boolean acc = (Boolean)session().valueForKeyPath("readAccess._delete.item");
		if(acc != null && acc.booleanValue())
			return acc;
		EOQualifier qual = new EOKeyValueQualifier(ItogMark.CONTAINER_KEY,
				EOQualifier.QualifierOperatorEqual,item);
		EOFetchSpecification fs = new EOFetchSpecification(ItogMark.ENTITY_NAME,qual,null);
		fs.setFetchLimit(1);
		NSArray found = ec.objectsWithFetchSpecification(fs);
		return Boolean.valueOf(found != null && found.count() > 0);
	}
	
	public WOActionResults deleteContainer() {
		ItogContainer itog = (ItogContainer)item;
		session().setObjectForKey(itog, "deleteItogContainer");
		NSArray mods = (NSArray)session().valueForKeyPath("modules.deleteItogContainer");
		session().removeObjectForKey("deleteItogContainer");
		if(mods != null && mods.count() > 0)
			return null;
		StringBuilder desc = new StringBuilder();
		desc.append(itog.name()).append(' ').append('(');
		desc.append(MyUtility.presentEduYear(itog.eduYear())).append(')');
		try {
			ec.deleteObject(itog);
			ec.saveChanges();
			if(!(itogsList instanceof NSMutableArray)) {
				itogsList = itogsList.mutableClone();
			}
			((NSMutableArray)itogsList).removeIdenticalObject(itog);
			logger.log(WOLogLevel.COREDATA_EDITING, "Deleted itog container "
					+ desc, new Object[] {session(),currType});
		} catch (Exception e) {
			logger.log(WOLogLevel.WARNING,"Error deleting itog container "
					+ desc, new Object[] {session(),currType,e});
			session().takeValueForKey(e.getMessage(), "message");
			ec.revert();
		}
		return null;
	}

	
	public boolean synchronizesVariablesWithBindings() {
        return false;
	}
}