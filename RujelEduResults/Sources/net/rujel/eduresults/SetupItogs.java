package net.rujel.eduresults;

import java.util.Enumeration;
import java.util.logging.Logger;

import net.rujel.base.SettingsBase;
import net.rujel.reusables.ModulesInitialiser;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.eocontrol.EOFetchSpecification;
import com.webobjects.eocontrol.EOKeyValueQualifier;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;

// Generated by the WOLips Templateengine Plug-in at Sep 3, 2009 12:37:59 PM
public class SetupItogs extends com.webobjects.appserver.WOComponent {
	protected static Logger logger = Logger.getLogger("rujel.itog");

 	public EOEditingContext ec;
	public String listName;
	public NSArray extraLists;
	public NSArray allTypes;
	public NSMutableArray activeTypes = new NSMutableArray();
	public Object item;
	public ItogType currType;

	public SetupItogs(WOContext context) {
        super(context);
        setEc((EOEditingContext)context.page().valueForKey("ec"));
    }

	public void setEc(EOEditingContext newEc) {
		ec = newEc;
		ec.lock();
		try {
			EOFetchSpecification fs = new EOFetchSpecification(ItogType.ENTITY_NAME,
					null, ModulesInitialiser.sorter);
			allTypes = ec.objectsWithFetchSpecification(fs);
			SettingsBase base = SettingsBase.baseForKey(ItogMark.ENTITY_NAME, ec, true);
			setListName(base.textValue());
			if(listName == null) {
				setListName((String)application().valueForKeyPath(
					"strings.RujelEduPlan_EduPlan.SetupPeriods.defaultListName"));
				base.setTextValue(listName);
				ec.saveChanges();
				logger.log(WOLogLevel.SETTINGS_EDITING,
						"Created default ItogMark ListName setting: " + listName,
						new Object[] {session(), base});
			} else {
				EOQualifier qual = new EOKeyValueQualifier("listName",
						EOQualifier.QualifierOperatorNotEqual,listName);
				fs = new EOFetchSpecification("ItogTypeList",qual,null);
				extraLists = ec.objectsWithFetchSpecification(fs);
			}
		} catch (Exception e) {
			logger.log(WOLogLevel.WARNING,
					"Error creating default ItogMark ListName setting",
					new Object[] {session(), e});
		} finally {
			ec.unlock();
		}
	}
	
	public void setListName(String name) {
		listName = name;
		if(listName != null) {
			NSArray used = EOUtilities.objectsMatchingKeyAndValue(ec, 
					"ItogTypeList", "listName", listName);
			if(used == null || used.count() == 0)
				activeTypes.removeAllObjects();
			else
				activeTypes.setArray((NSArray)used.valueForKey("itogType"));
		}
		currType = null;
	}
	
	public boolean active() {
		return activeTypes.containsObject(item);
	}
	
	public void setActive(boolean set) {
		if(set) {
			if(!active())
				activeTypes.addObject(item);
		} else {
			activeTypes.removeObject(item);
		}
	}
	
	public WOActionResults saveList() {
		ec.lock();
		try {
			NSArray previous = EOUtilities.objectsMatchingKeyAndValue(ec, 
					"ItogTypeList", "listName", listName);
			NSMutableArray toDelete = (previous==null || previous.count() == 0)?
					new NSMutableArray() : previous.mutableClone();
			NSMutableArray toAdd = activeTypes.mutableClone();
			Enumeration enu = previous.objectEnumerator();
			while (enu.hasMoreElements()) {
				EOEnterpriseObject tl = (EOEnterpriseObject) enu.nextElement();
				ItogType it = (ItogType)tl.valueForKey("itogType");
				if(toAdd.removeObject(it)) {
					toDelete.removeObject(tl);
				}
			}
			if(toAdd.count() > 0) {
				enu = toAdd.objectEnumerator();
				while (enu.hasMoreElements()) {
					ItogType it = (ItogType) enu.nextElement();
					EOEnterpriseObject tl = (EOEnterpriseObject)toDelete.removeLastObject();
					if(tl == null) {
						tl = EOUtilities.createAndInsertInstance(ec, "ItogTypeList");
						tl.takeValueForKey(listName, "listName");
					}
					tl.addObjectToBothSidesOfRelationshipWithKey(it, "itogType");
				}
			}
			if(toDelete.count() > 0) {
				enu = toDelete.objectEnumerator();
				while (enu.hasMoreElements()) {
					EOEnterpriseObject tl = (EOEnterpriseObject) enu.nextElement();
					ec.deleteObject(tl);
				}
			}
			ec.saveChanges();
		} catch (Exception e) {
			logger.log(WOLogLevel.WARNING,"Error saving changes in list " + listName,e);
			session().takeValueForKey(e.getMessage(), "message");
			ec.revert();
			setListName(listName);
		} finally {
			ec.unlock();
		}
		return null;
	}

	public boolean synchronizesVariablesWithBindings() {
        return false;
	}
}