// PrognosisPopup.java

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.autoitog;

import java.util.logging.Logger;

import net.rujel.eduresults.EduPeriod;
import net.rujel.interfaces.*;
import net.rujel.reusables.NamedFlags;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOEditingContext;

// Generated by the WOLips Templateengine Plug-in at May 18, 2008 10:06:02 PM
public class PrognosisPopup extends com.webobjects.appserver.WOComponent {
    public PrognosisPopup(WOContext context) {
        super(context);
    }
    
    public Prognosis prognosis;
    public PrognosesAddOn addOn;
    public EduCourse course;
    public Student student;
    public EduPeriod eduPerod;
    public WOComponent returnPage;
    
    public String mark;
    public NamedFlags flags;
    
    protected boolean calculation;
    public boolean noCancel = false;
    
    public void appendToResponse(WOResponse aResponse, WOContext aContext) {
    	addOn.setCourse(course);
    	addOn.setStudent(student);
    	addOn.setPeriodItem(eduPerod);
    	calculation = (addOn.usage().calculator() != null);
    	flags = new NamedFlags(Prognosis.flagNames);
    	if(prognosis == null)  {
    		Calculator calc = addOn.usage().calculator();
    		if(calc != null) {
    			EOEditingContext ec = course.editingContext();
    			ec.lock();
    			prognosis = calc.calculateForStudent(student, course, eduPerod);
    			if(prognosis != null) {
    				prognosis.updateFireDate(addOn.courseTimeout());
    				try {
    					ec.saveChanges();
    					//addOn.setPrognosis(prognosis);
    					noCancel = true;
    				} catch (Exception e) {
    					Logger.getLogger("rujel.autoitog").log(WOLogLevel.WARNING,"Error creating single prognosis");
    					ec.revert();
    				}
    			}
    			ec.unlock();
    		}
    	} // prognosis == null
    	if(prognosis != null) {
    		flags.setFlags(prognosis.flags().intValue());
    		mark= prognosis.mark();
    		addOn.setPrognosis(prognosis);
    	}
    	super.appendToResponse(aResponse, aContext);
    }

    public boolean showPercent() {
    	if(prognosis == null || !calculation)
    		return false;
    	return true;
    }

    public boolean canChange() {
    	String flag = (prognosis == null)?"create":"edit";
    	return access().flagForKey(flag);
    }

    public NamedFlags access() {
    	return addOn.access();
    }
    
    public WOActionResults save() {
    	if(prognosis !=null || mark != null) {
    		EOEditingContext ec = course.editingContext();
    		ec.lock();
    		if(mark == null && !calculation) {
    			ec.deleteObject(prognosis);
    			prognosis = null;
    		} else {
    			if(prognosis == null) {
    				prognosis = (Prognosis)EOUtilities.createAndInsertInstance(ec, "Prognosis");
       				prognosis.setStudent(student);
       				prognosis.setEduCourse(course);
       				prognosis.setEduPeriod(eduPerod);
       				prognosis._setPrognosUsage(addOn.usage());
       				prognosis.updateFireDate();
     			}
    			prognosis.setMark(mark);
    			prognosis.setNamedFlags(flags);
    		}
    		try {
    			ec.saveChanges();
    			addOn.setPrognosis(prognosis);
    		} catch (Exception e) {
    			Logger.getLogger("rujel.autoitog").log(WOLogLevel.WARNING,"Error saving prognosis",e);
    			session().takeValueForKey(e.getMessage(), "message");
				ec.revert();
			} finally {
				ec.unlock();
			}
    	}
    	returnPage.ensureAwakeInContext(context());
    	return returnPage;
    }
    
    public String studentName() {
    	return Person.Utility.fullName(student.person(),true,2,1,1);
    }
    public WOActionResults delete() {
    	mark = null;
    	calculation = false;
    	return save();
    }
}