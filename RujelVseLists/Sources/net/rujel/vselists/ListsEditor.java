package net.rujel.vselists;

import java.util.Enumeration;
import java.util.logging.Logger;

import net.rujel.base.MyUtility;
import net.rujel.interfaces.PersonLink;
import net.rujel.reusables.NamedFlags;
import net.rujel.reusables.PlistReader;
import net.rujel.reusables.SessionedEditingContext;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSKeyValueCodingAdditions;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;
import com.webobjects.foundation.NSTimestamp;

// Generated by the WOLips Templateengine Plug-in at Aug 27, 2009 11:13:10 PM
public class ListsEditor extends com.webobjects.appserver.WOComponent {
	public static Logger logger = Logger.getLogger("rujel.vselists");
    
	public static Object init(Object obj, WOContext ctx) {
		if(obj == null || obj.equals("init")) {
			//
		} else if(obj.equals("regimes")) {
			if(ctx != null && ctx.hasSession())
				return ctx.session().valueForKeyPath(
					"strings.RujelVseLists_VseStrings.listRegime");
			return WOApplication.application().valueForKeyPath(
					"strings.RujelVseLists_VseStrings.listRegime");
		} else if(obj.equals("personInspector")) {
			return personInspector(ctx);
		}
		return null;
	}
	
	public EOEditingContext ec;
    public boolean showAll = false;
    public NSKeyValueCodingAdditions item;
    public NamedFlags access;
    public NSArray list;
	public Integer mode;
	public NSMutableDictionary agregate;
	public NSArray categories;
	public Object selection;
    
    public ListsEditor(WOContext context) {
        super(context);
    	ec = new SessionedEditingContext(context.session());
        switchMode();
    }
    
    public void toggleAll() {
    	showAll = !showAll;
    	if(selection instanceof VseEduGroup) {
    		setGroup(group());
    	} else {
    		Object tmpSelection = selection;
    		switchMode();
    		setSelection(tmpSelection);
    	}
    }
    
    public void switchMode() {
    	if(mode == null)
    		mode = new Integer(0);
    	selection = null;
    	list = NSArray.EmptyArray;
    	NSTimestamp date = null;
    	if(!showAll)
    		date = (NSTimestamp)session().valueForKey("today");
    	if(mode.intValue() > 0) {
//    		agregate = TeacherSelector.populate(ec, session());
//    		categories = (NSArray)agregate.removeObjectForKey("subjects");
    		agregate = VseTeacher.teachersAgregate(ec, date);
        	access = (NamedFlags)session().valueForKeyPath("readAccess.FLAGS.VseTeacher");
    	} else {
    		agregate = VseStudent.studentsAgregate(ec, date);
        	access = (NamedFlags)session().valueForKeyPath("readAccess.FLAGS.VseStudent");
    	}
		categories = (NSArray)agregate.removeObjectForKey("list");
    }
    
    public void setSelection(Object sel) {
    	selection = sel;
    	if(sel == null)
    		list = NSArray.EmptyArray;
    	else
    		list = (NSArray)agregate.objectForKey(sel);
    	if(mode == null || mode.intValue() == 0)
    		access = (NamedFlags)session().valueForKeyPath("readAccess.FLAGS.VseStudent");
    	else
    		access = (NamedFlags)session().valueForKeyPath("readAccess.FLAGS.VseTeacher");
    }
    
    public VseEduGroup group() {
    	if(selection instanceof VseEduGroup)
    		return (VseEduGroup)selection;
    	else
    		return null;
    }

    public void setGroup(VseEduGroup gr) {
    	selection = gr;
    	access = (NamedFlags)session().valueForKeyPath("readAccess.FLAGS.VseList");
    	if(gr == null) {
    		list = null;
    	} else if(showAll) {
    		list = gr.lists();
    	} else {
    		list = gr.vseList();
    	}
    }
    
    public WOActionResults createGroup() {
    	WOComponent result = pageWithName("VseGroupInspector");
    	result.takeValueForKey(this, "returnPage");
    	result.takeValueForKey(ec, "ec");
    	return result;
    }
    
    public WOActionResults editGroup() {
    	WOComponent result = pageWithName("VseGroupInspector");
    	result.takeValueForKey(this, "returnPage");
    	result.takeValueForKey(selection, "currGroup");
    	return result;
    }
    
    public PersonLink plink() {
    	if(item == null)
    		return null;
    	if(item instanceof PersonLink)
    		return (PersonLink)item;
    	return (PersonLink)item.valueForKey("student");
    }
    
	public String rowClass() {
		if (showAll) {
			NSTimestamp enter = (NSTimestamp) item.valueForKey("enter");
			NSTimestamp leave = (NSTimestamp) item.valueForKey("leave");
			if (enter != null || leave != null) {
				NSTimestamp today = (NSTimestamp) session()
						.valueForKey("today");
				if (leave != null && leave.compare(today) < 0)
					return "grey";
				if (enter != null && enter.compare(today) > 0)
					return "grey";
			}
		}
		Boolean sex = (Boolean)valueForKeyPath("plink.person.sex");
		if(sex == null) return null;
		return (sex.booleanValue())?"male":"female";
	}
	
	public WOActionResults editPerson() {
		WOComponent popup = pageWithName("PersonInspector");
		popup.takeValueForKey(this, "returnPage");
		popup.takeValueForKey(plink(), "personLink");
		return popup;
	}
	
	public WOActionResults addPerson() {
		WOComponent popup = pageWithName("SelectorPopup");
		popup.takeValueForKey(this, "returnPage");
		popup.takeValueForKey(session().valueForKeyPath(
				"strings.RujelVseLists_VseStrings.selectPerson"), "dict");
		popup.takeValueForKey("newPerson", "resultPath");
		return popup;
	}
	
	public void setNewPerson(VsePerson person) {
		boolean student = (mode == null || mode.intValue() == 0);
		if(student && selection == null)
			return;
		if(person == null) {
			ec.revert();
			return;
		}
		person = (VsePerson)EOUtilities.localInstanceOfObject(ec, person);
		if (group() != null) {
			Enumeration enu = group().vseList().objectEnumerator();
			while (enu.hasMoreElements()) {
				EOEnterpriseObject vl = (EOEnterpriseObject) enu.nextElement();
				if (vl.valueForKeyPath("student.person") == person) {
					session().takeValueForKey(session().valueForKeyPath(
						"strings.RujelVseLists_VseStrings.duplicateEntry"),"message");
					return;
				}
			}
		}
		ec.lock();
		try {
			NSTimestamp date = (NSTimestamp)session().valueForKey("today");
			PersonLink pl = null;
			if (student) {
				VseStudent aStudent = VseStudent.studentForPerson(person, date, true);
				pl = aStudent;
				if (selection instanceof VseEduGroup) {
					aStudent.setAbsGrade(group().absStart());
					EOEnterpriseObject newEntry = EOUtilities
							.createAndInsertInstance(ec, "VseList");
					newEntry.addObjectToBothSidesOfRelationshipWithKey(group(),
							"eduGroup");
					newEntry.addObjectToBothSidesOfRelationshipWithKey(
							aStudent, "student");
					newEntry.takeValueForKey(date, "enter");
				} else {
					Integer grade = aStudent.absGrade();
					if(grade == null || grade.intValue() <= 0) {
						grade = (Integer)selection;
						if(grade.intValue() > 0) {
							Integer year = MyUtility.eduYearForDate(date);
							grade = new Integer(year.intValue() - grade.intValue());
						}
						aStudent.setAbsGrade(grade);
					}
				}
			} else {
				pl = VseTeacher.teacherForPerson(person, date, true);
			}
			ec.saveChanges();
			logger.log(WOLogLevel.UNOWNED_EDITING, "Added person to group",
					new Object[] {session(),person,selection});
			if(student) {
				if(group() != null) {
					NSMutableArray byGrade = (NSMutableArray)
								agregate.objectForKey(group().grade());
					if(byGrade != null)
						byGrade.removeObject(pl);
					list = list.arrayByAddingObject(pl);
				} else {
					VseEduGroup gr = ((VseStudent)pl).recentMainEduGroup();
					if(gr != null) {
						setGroup(gr);
					} else {
						Integer grade = ((VseStudent)pl).currGrade();
						if(grade.equals(selection) && !list.containsObject(pl))
							((NSMutableArray)list).addObject(pl);
						else
							setSelection(grade);
					}
				}
			} else {
				String letter = person.lastName().substring(0,1);
				list = (NSArray)agregate.valueForKey(letter);
				if(list == null) {
					list = new NSMutableArray(pl);
					agregate.takeValueForKey(list, letter);
				} else {
					((NSMutableArray)list).addObject(pl);
				}
				selection = letter;
			}
		} catch (RuntimeException e) {
			logger.log(WOLogLevel.WARNING, "Error adding person to group",
					new Object[] {session(),person,selection,e});
			session().takeValueForKey(e.getMessage(), "message");
			ec.revert();
		} finally {
			ec.unlock();
		}
	}
	
	public void save() {
		ec.lock();
		try {
			ec.saveChanges();
			logger.log(WOLogLevel.UNOWNED_EDITING, "Changed enter/leave dates",
					new Object[] {session(),selection});
		} catch (Exception e) {
			logger.log(WOLogLevel.WARNING, "Error saving enter/leave dates changes",
					new Object[] {session(),selection,e});
			session().takeValueForKey(e.getMessage(), "message");
			ec.revert();
		} finally {
			ec.unlock();
		}
	}
	
	public Boolean hideAddButton() {
		if(mode == null || mode.intValue() == 0) {
			if(selection == null)
				return Boolean.TRUE;
			if(selection instanceof VseEduGroup)
				return (Boolean)session().valueForKeyPath("readAccess._create.VseList");
			return (Boolean)session().valueForKeyPath("readAccess._create.VseStudent");
		} else {
			return (Boolean)session().valueForKeyPath("readAccess._create.VseTeacher");
		}
	}

	public static Object personInspector(WOContext ctx) {
		WOSession ses = ctx.session();
		NSMutableArray result = new NSMutableArray();
		NamedFlags access = (NamedFlags)ses.valueForKeyPath(
				"readAccess.FLAGS.VsePerson");
		if(access.getFlag(0)) {
			NSDictionary dict = (NSDictionary)ses.valueForKeyPath(
					"strings.RujelVseLists_VseStrings.inspectors.Person");
			dict = PlistReader.cloneDictionary(dict, true);
			dict.takeValueForKey(access, "access");
			result.addObject(dict);
		}
		VsePerson person = (VsePerson)ses.objectForKey("PersonInspector");
		access = (NamedFlags)ses.valueForKeyPath(
			"readAccess.FLAGS.VseStudent");
		if(access.getFlag(0) 
				&& VseStudent.studentForPerson(person, null) != null) {
			NSDictionary dict = (NSDictionary)ses.valueForKeyPath(
					"strings.RujelVseLists_VseStrings.inspectors.Student");
			dict = PlistReader.cloneDictionary(dict, true);
			dict.takeValueForKey(access, "access");
			result.addObject(dict);
		}
		access = (NamedFlags)ses.valueForKeyPath(
			"readAccess.FLAGS.VseTeacher");
		if(access.getFlag(0) 
				&& VseTeacher.teacherForPerson(person, null) != null) {
			NSDictionary dict = (NSDictionary)ses.valueForKeyPath(
			"strings.RujelVseLists_VseStrings.inspectors.Teacher");
			dict = PlistReader.cloneDictionary(dict, true);
			dict.takeValueForKey(access, "access");
			result.addObject(dict);
		}
		if(result.count() == 0)
			return null;
		return result;
	}
}