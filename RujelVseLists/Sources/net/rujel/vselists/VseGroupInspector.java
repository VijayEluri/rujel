package net.rujel.vselists;

import java.util.logging.Logger;

import net.rujel.base.MyUtility;
import net.rujel.reusables.SessionedEditingContext;
import net.rujel.reusables.SettingsReader;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;

// Generated by the WOLips Templateengine Plug-in at Aug 28, 2009 4:00:42 PM
public class VseGroupInspector extends com.webobjects.appserver.WOComponent {
	public static Logger logger = Logger.getLogger("rujel.vselists");

	public NSArray grades;
	public NSArray beginYears;
	public NSArray endYears;
	public Object item;
	public VseEduGroup currGroup;
	public NSDictionary firstYear;
	public NSDictionary lastYear;
	public Integer startGrade;
	public String groupTitle;
	public EOEditingContext ec;
	public WOComponent returnPage;
	
    public VseGroupInspector(WOContext context) {
        super(context);
		int maxGrade = SettingsReader.intForKeyPath("edu.maxGrade", 11);
		int minGrade = SettingsReader.intForKeyPath("edu.minGrade", 1);
		Integer[] grds = new Integer[maxGrade - minGrade + 1];
		NSDictionary[] bYears = new NSDictionary[grds.length];
		NSDictionary[] eYears = new NSDictionary[grds.length];
		int currYear = ((Integer)session().valueForKey("eduYear")).intValue();
		for (int i = 0; i < grds.length; i++) {
			grds[i] = new Integer(minGrade + i);
			bYears[i] = yearDict(currYear + i - grds.length + 1);
			eYears[i] = yearDict(currYear + i);
		}
		startGrade = grds[0];
		firstYear = bYears[bYears.length -1];
		lastYear = eYears[0];
		grades = new NSArray(grds);
		beginYears = new NSArray(bYears);
		endYears = new NSArray(eYears);
    }
    
    public static NSDictionary yearDict(int year) {
    	String[] keys = new String[] {"title","year"};
    	Object[] values = new Object[] {MyUtility.presentEduYear(year), new Integer(year)};
    	return new NSDictionary(values,keys);
    }
    
    public void setCurrGroup(VseEduGroup gr) {
    	currGroup = gr;
    	ec = gr.editingContext();
    	startGrade = gr.startGrade();
    	groupTitle = gr.title();
    	firstYear = yearDict(gr.firstYear().intValue());
    	lastYear = yearDict(gr.lastYear().intValue());
    }
    
    public String title() {
    	StringBuilder buf = new StringBuilder();
    	if(currGroup == null) {
    		buf.append(session().valueForKeyPath(
				"strings.RujelVseLists_VseStrings.VseGroupInspector.new"));
    		buf.append(' ');
    		buf.append(session().valueForKeyPath(
    			"strings.RujelVseLists_VseStrings.VseGroupInspector.title"));
    	} else {
    		buf.append(session().valueForKeyPath(
				"strings.RujelVseLists_VseStrings.VseGroupInspector.title"));
    		buf.append(" : ");
    		buf.append(currGroup.name());
    	}
    	return buf.toString();
    }
    
    public WOActionResults save() {
    	if(ec == null)
    		ec = new SessionedEditingContext(session());
    	ec.lock();
    	try {
			if(currGroup == null)
				currGroup = (VseEduGroup)EOUtilities.createAndInsertInstance(ec,
						VseEduGroup.ENTITY_NAME);
			if(groupTitle != null) {
				if(!groupTitle.equals(currGroup.title()))
					currGroup.setTitle(groupTitle);
			} else {
				if(currGroup.title() != null)
					currGroup.setTitle(null);
			}
			if(!startGrade.equals(currGroup.startGrade()))
				currGroup.setStartGrade(startGrade);
			Integer year = (Integer)firstYear.valueForKey("year");
			if(!year.equals(currGroup.firstYear()))
				currGroup.setFirstYear(year);
			year = (Integer)lastYear.valueForKey("year");
			if(!year.equals(currGroup.lastYear()))
				currGroup.setLastYear(year);
			if(ec.hasChanges()) {
				ec.saveChanges();
				logger.log(WOLogLevel.UNOWNED_EDITING,"VseEduGroup changes saved",
						new Object[] {session(),currGroup});
			}
    	} catch (Exception e) {
			logger.log(WOLogLevel.WARNING, "Error saving VseEduGroup",
					new Object[] {session(),currGroup,e});
			session().takeValueForKey(e.getMessage(), "message");
			ec.revert();
		} finally {
			ec.unlock();
		}
		returnPage.ensureAwakeInContext(context());
		return returnPage;
    }
}