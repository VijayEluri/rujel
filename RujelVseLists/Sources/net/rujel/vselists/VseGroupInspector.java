// VseGroupInspector.java: Class file for WO Component 'VseGroupInspector'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.vselists;

import net.rujel.base.MyUtility;
import net.rujel.base.SchoolSection;
import net.rujel.interfaces.EduCourse;
import net.rujel.reusables.SessionedEditingContext;
import net.rujel.reusables.SettingsReader;
import net.rujel.reusables.Various;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableArray;

// Generated by the WOLips Templateengine Plug-in at Aug 28, 2009 4:00:42 PM
public class VseGroupInspector extends com.webobjects.appserver.WOComponent {

	public NSArray grades;
	public NSArray beginYears;
	public NSArray endYears;
	public Object item;
	public VseEduGroup currGroup;
	public NSDictionary firstYear;
	public NSDictionary lastYear;
	public Integer grade;
	public String groupTitle;
	public EOEditingContext ec;
	public WOComponent returnPage;
	public NSArray sections;
	
    public VseGroupInspector(WOContext context) {
        super(context);
        SchoolSection section = null;
        if(Various.boolForObject(context.session().valueForKeyPath("sections.hasSections")))
        	section = (SchoolSection)session().valueForKeyPath("state.section");
		int maxGrade = (section == null)?SettingsReader.intForKeyPath("edu.maxGrade", 11):
			section.maxGrade().intValue();
		int minGrade = (section == null)?SettingsReader.intForKeyPath("edu.minGrade", 1):
			section.minGrade().intValue();
		Integer[] grds = new Integer[maxGrade - minGrade + 1];
		NSDictionary[] bYears = new NSDictionary[grds.length];
		NSDictionary[] eYears = new NSDictionary[grds.length];
		int currYear = ((Integer)session().valueForKey("eduYear")).intValue();
		for (int i = 0; i < grds.length; i++) {
			grds[i] = new Integer(minGrade + i);
			bYears[i] = yearDict(currYear + i - grds.length + 1);
			eYears[i] = yearDict(currYear + i);
		}
		grade = grds[0];
		firstYear = bYears[bYears.length -1];
		lastYear = eYears[0];
		grades = new NSArray(grds);
		beginYears = new NSArray(bYears);
		endYears = new NSArray(eYears);
    }
    
    public static NSDictionary yearDict(int year) {
    	String[] keys = new String[] {"title","year"};
    	Object[] values = new Object[] {MyUtility.presentEduYear(year), new Integer(year)};
    	return new NSDictionary(values,keys);
    }
    
    public void setCurrGroup(VseEduGroup gr) {
    	currGroup = gr;
    	ec = gr.editingContext();
    	grade = gr.grade();
    	if(!grades.contains(grade))
    		grades = grades.arrayByAddingObject(grade);
    	groupTitle = gr.title();
    	firstYear = yearDict(gr.firstYear().intValue());
    	if(!beginYears.contains(firstYear))
    		beginYears = beginYears.arrayByAddingObject(firstYear);
    	lastYear = yearDict(gr.lastYear().intValue());
    	if(!endYears.contains(lastYear))
    		endYears = endYears.arrayByAddingObject(lastYear);
		int currYear = ((Integer)session().valueForKey("eduYear")).intValue();
		if(gr.firstYear().intValue() < currYear) {
			NSMutableArray tmp = endYears.mutableClone();
			tmp.insertObjectAtIndex(yearDict(currYear -1), 0);
			endYears = tmp.immutableClone();
		}
		sections = (NSArray)session().valueForKeyPath("sections.list");
		sections = EOUtilities.localInstancesOfObjects(ec, sections);
    }
    
    public String title() {
    	StringBuilder buf = new StringBuilder();
    	if(currGroup == null) {
    		buf.append(session().valueForKeyPath(
				"strings.RujelVseLists_VseStrings.VseGroupInspector.new"));
    		buf.append(' ');
    		buf.append(session().valueForKeyPath(
    			"strings.RujelVseLists_VseStrings.VseGroupInspector.title"));
    	} else {
    		buf.append(session().valueForKeyPath(
				"strings.RujelVseLists_VseStrings.VseGroupInspector.title"));
    		buf.append(" : ");
    		buf.append(currGroup.name());
    	}
    	return buf.toString();
    }
    
    public WOActionResults save() {
    	if(ec == null)
    		ec = new SessionedEditingContext(session());
    	ec.lock();
    	try {
    		boolean create = (currGroup == null);
			SchoolSection section = (SchoolSection)session().valueForKeyPath("state.section");
			section = (SchoolSection)EOUtilities.localInstanceOfObject(ec, section);
			if(create) {
				currGroup = (VseEduGroup)EOUtilities.createAndInsertInstance(ec,
						VseEduGroup.ENTITY_NAME);
				currGroup.setSection(section);
			}
			if(groupTitle != null) {
				if(!groupTitle.equals(currGroup.title()))
					currGroup.setTitle(groupTitle);
			} else {
				if(currGroup.title() != null)
					currGroup.setTitle(null);
			}
			create = !grade.equals(currGroup.grade());
			if(create)
				currGroup.setGrade(grade);
			Integer year = (Integer)firstYear.valueForKey("year");
			if(!year.equals(currGroup.firstYear()))
				currGroup.setFirstYear(year);
			year = (Integer)lastYear.valueForKey("year");
			if(!year.equals(currGroup.lastYear())) {
				currGroup.setLastYear(year);
				int currYear = ((Integer)session().valueForKey("eduYear")).intValue();
				if(year.intValue() < currYear)
					section = null;
			}
			if(ec.hasChanges()) {
				ec.saveChanges();
				ListsEditor.logger.log(WOLogLevel.EDITING,"VseEduGroup changes saved",
						new Object[] {session(),currGroup});
				if(create || section != currGroup.section()) {
					returnPage.valueForKey("switchMode");
					if(section == currGroup.section())
						returnPage.takeValueForKey(currGroup, "group");
				}
			}
    	} catch (Exception e) {
    		ListsEditor.logger.log(WOLogLevel.WARNING, "Error saving VseEduGroup",
					new Object[] {session(),currGroup,e});
			session().takeValueForKey(e.getMessage(), "message");
			ec.revert();
		} finally {
			ec.unlock();
		}
		returnPage.ensureAwakeInContext(context());
		return returnPage;
    }
    
    public boolean cantDelete() {
    	if(currGroup == null || currGroup.lists().count() > 0)
    		return true;
		int currYear = ((Integer)session().valueForKey("eduYear")).intValue();
		if(currGroup.firstYear().intValue() < currYear)
			return true;
		if(Various.boolForObject(session().valueForKeyPath("readAccess._delete.currGroup")))
			return true;
    	NSArray courses = EOUtilities.objectsMatchingKeyAndValue(ec, EduCourse.entityName, 
    			"eduGroup", currGroup);
    	return (courses.count() > 0);
    }

    public WOActionResults delete() {
    	if(ec == null)
    		ec = currGroup.editingContext();
    	try {
    		ec.deleteObject(currGroup);
    		ListsEditor.logger.log(WOLogLevel.EDITING,"Deleting VseEduGroup",
    				new Object[] {session(),currGroup});
    		ec.saveChanges();
			returnPage.valueForKey("switchMode");
    	} catch (Exception e) {
    		ListsEditor.logger.log(WOLogLevel.WARNING, "Error deleting VseEduGroup",
    				new Object[] {session(),currGroup,e});
    		session().takeValueForKey(e.getMessage(), "message");
    		ec.revert();
    	}
    	returnPage.ensureAwakeInContext(context());
    	return returnPage;
    }
}