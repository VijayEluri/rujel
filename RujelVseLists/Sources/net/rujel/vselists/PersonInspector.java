// PersonInspector.java: Class file for WO Component 'PersonInspector'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.vselists;

import java.util.Enumeration;

import net.rujel.interfaces.Person;
import net.rujel.interfaces.PersonLink;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSKeyValueCoding;
import com.webobjects.appserver.WOActionResults;

// Generated by the WOLips Templateengine Plug-in at Aug 28, 2009 8:05:59 PM
public class PersonInspector extends com.webobjects.appserver.WOComponent {
	public WOComponent returnPage;
	public Person person;
	public NSArray usages;
	public NSKeyValueCoding currUsage;
	
    public PersonInspector(WOContext context) {
        super(context);
    }
    
    public NSArray usages() {
    	if(usages == null) {
    		session().setObjectForKey(person, "PersonInspector");
    		usages = (NSArray)session().valueForKeyPath("modules.personInspector");
    		session().removeObjectForKey("PersonInspector");
    	}
    	return usages;
    }
    
    public void setEntity(String entity) {
    	Enumeration enu = usages().objectEnumerator();
    	while (enu.hasMoreElements()) {
			currUsage = (NSKeyValueCoding)enu.nextElement();
			if(entity.equals(currUsage.valueForKey("entity")))
				return;
		}
    	currUsage = null;
    }
    
    public void setPersonLink(PersonLink pl) {
    	person = pl.person();
    	setEntity(((EOEnterpriseObject)pl).entityName());
    }

	public WOActionResults save() {
		EOEditingContext ec = person.editingContext();
		ec.lock();
		try {
			ec.saveChanges();
			ListsEditor.logger.log(WOLogLevel.UNOWNED_EDITING, "Saved changes with person",
					new Object[] {session(),person,currUsage.valueForKey("entity")});
		} catch (Exception e) {
			ListsEditor.logger.log(WOLogLevel.WARNING, "Error saving changes with person",
					new Object[] {session(),person,currUsage.valueForKey("entity"),e});
			session().takeValueForKey(e.getMessage(), "message");
			ec.revert();
		} finally {
			ec.unlock();
		}
		returnPage.ensureAwakeInContext(context());
		return returnPage;
	}
}