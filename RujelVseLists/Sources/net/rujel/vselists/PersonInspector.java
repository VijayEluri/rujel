package net.rujel.vselists;

import java.util.Enumeration;

import net.rujel.interfaces.Person;
import net.rujel.interfaces.PersonLink;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSKeyValueCoding;
import com.webobjects.appserver.WOActionResults;

// Generated by the WOLips Templateengine Plug-in at Aug 28, 2009 8:05:59 PM
public class PersonInspector extends com.webobjects.appserver.WOComponent {
	public WOComponent returnPage;
	public Person person;
	public NSArray usages;
	public NSKeyValueCoding currUsage;
	
    public PersonInspector(WOContext context) {
        super(context);
    }
    
    public NSArray usages() {
    	if(usages == null) {
    		session().setObjectForKey(person, "PersonInspector");
    		usages = (NSArray)session().valueForKeyPath("modules.personInspector");
    		session().removeObjectForKey("PersonInspector");
    	}
    	return usages;
    }
    
    public void setEntity(String entity) {
    	Enumeration enu = usages().objectEnumerator();
    	while (enu.hasMoreElements()) {
			currUsage = (NSKeyValueCoding)enu.nextElement();
			if(entity.equals(currUsage.valueForKey("entity")))
				return;
		}
    	currUsage = null;
    }
    
    public void setPersonLink(PersonLink pl) {
    	person = pl.person();
    	setEntity(((EOEnterpriseObject)pl).entityName());
    }

	public WOActionResults save() {
		EOEditingContext ec = person.editingContext();
		ec.lock();
		try {
			ec.saveChanges();
			ListsEditor.logger.log(WOLogLevel.UNOWNED_EDITING, "Saved changes with person",
					new Object[] {session(),person,currUsage.valueForKey("entity")});
		} catch (Exception e) {
			ListsEditor.logger.log(WOLogLevel.WARNING, "Error saving changes with person",
					new Object[] {session(),person,currUsage.valueForKey("entity"),e});
			session().takeValueForKey(e.getMessage(), "message");
			ec.revert();
		} finally {
			ec.unlock();
		}
		returnPage.ensureAwakeInContext(context());
		return returnPage;
	}
}