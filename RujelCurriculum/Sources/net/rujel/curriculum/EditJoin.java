// EditJoin.java: Class file for WO Component 'EditJoin'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.curriculum;

import java.math.BigDecimal;
import java.util.Enumeration;
import java.util.logging.Logger;

import net.rujel.base.MyUtility;
import net.rujel.interfaces.EduCourse;
import net.rujel.interfaces.EduLesson;
import net.rujel.interfaces.Person;
import net.rujel.interfaces.Teacher;
import net.rujel.reusables.WOLogLevel;
import net.rujel.ui.RedirectPopup;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSTimestamp;
import com.webobjects.foundation.NSValidation;

// Generated by the WOLips Templateengine Plug-in at Sep 14, 2009 1:34:50 PM
public class EditJoin extends com.webobjects.appserver.WOComponent {
	protected static Logger logger = Logger.getLogger("rujel.curriculum");
    public EditJoin(WOContext context) {
        super(context);
    }
    
    public WOComponent returnPage;
    public EduLesson lesson;
//    public Substitute substitute;

    public NSArray courses;
    public NSArray lessons;
    public Object item;
    public EduCourse selCourse;
    public EduLesson selLesson;
	public Reason reason;
//	public Boolean cantEdit = Boolean.TRUE;
	public boolean newLesson = false;
	
	public void setLesson(EduLesson l) {
		lesson = l;
		EOQualifier[] quals = new EOQualifier[3];
		EduCourse course = lesson.course();
		quals[0] = new EOKeyValueQualifier("cycle",EOQualifier.QualifierOperatorEqual,
				course.cycle());
		quals[1] = new EOKeyValueQualifier("eduYear",EOQualifier.QualifierOperatorEqual,
				course.eduYear());
		quals[2] = new EOKeyValueQualifier("teacher",EOQualifier.QualifierOperatorNotEqual,
				course.teacher());
		quals[0] = new EOAndQualifier(new NSArray(quals));
		EOFetchSpecification fs = new EOFetchSpecification(EduCourse.entityName,
				quals[0],null);
		courses = lesson.editingContext().objectsWithFetchSpecification(fs);
		if(courses != null && courses.count() > 1)
		courses = EOSortOrdering.sortedArrayUsingKeyOrderArray(courses, EduCourse.sorter);
//		String path = "readAccess." + 
//				((substitute==null)?"_create.S":"_edit.s") +"ubstitute";
//		cantEdit = (Boolean)session().valueForKeyPath(path);
	}
	/*
	public void setSubstitute(Substitute sub) {
		substitute = sub;
		if(sub != null) {
			selLesson = sub.lesson();
			item = selLesson.course();
			selectCourse();
			item = null;
			reason = sub.reason();
    		cantEdit = (Boolean)session().valueForKeyPath("readAccess._edit.substitute");
		}
	}*/
	
	public Teacher itemTeacher() {
		if(item instanceof EduCourse) {
			return ((EduCourse)item).teacher(lesson.date());
		}
		return null;
	}
	
	public WOActionResults selectCourse() {
		selCourse = (EduCourse)item;
		if(selCourse == null) {
			lessons = null;
			return this;
		}
		if(selLesson != null && selLesson.course() != selCourse)
			selLesson = null;
		NSTimestamp date = null;
		if(lesson != null)
			date = lesson.date();
		else if(selLesson != null)
			date = selLesson.date();
		EOQualifier[] quals = new EOQualifier[2];
		quals[0] = new EOKeyValueQualifier("course",EOQualifier.QualifierOperatorEqual,
				selCourse);
		quals[1] = new EOKeyValueQualifier("date",EOQualifier.QualifierOperatorEqual,
				date);
		quals[0] = new EOAndQualifier(new NSArray(quals));
		EOFetchSpecification fs = new EOFetchSpecification(EduLesson.entityName,
				quals[0],EduLesson.sorter);
		lessons = selCourse.editingContext().objectsWithFetchSpecification(fs);
		if (lessons == null || lessons.count() == 0) {
			newLesson = true;
			lessons = null;
		} else {
			NSMutableArray list = new NSMutableArray();
			Enumeration enu = lessons.objectEnumerator();
			EduCourse course = lesson.course();
			lessons:
			while (enu.hasMoreElements()) {
				EduLesson l = (EduLesson) enu.nextElement();
				NSArray subs = (NSArray)l.valueForKey("substitutes");
				if(subs == null || subs.count() == 0)
					continue;
				StringBuilder buf = new StringBuilder();
				Enumeration sEnu = subs.objectEnumerator();
				Reason reas = null;
				while (sEnu.hasMoreElements()) {
					Substitute s = (Substitute) sEnu.nextElement();
					EduLesson from = s.fromLesson();
					if(from == lesson) {
						newLesson = false;
						lessons = null;
						return this;
					}
					if(from == null)
						continue lessons;
					EduCourse fromCourse = from.course();
					if(fromCourse == null)
						continue;
					if(s.teacher() == course.teacher() ||
							fromCourse.cycle() != course.cycle())
						continue lessons;
					if(buf.length() > 0)
						buf.append(" & ");
					if(fromCourse.eduGroup() != course.eduGroup())
						buf.append(fromCourse.eduGroup().name()).append(" : ");
					if(s.teacher() == null) {
						buf.append(session().valueForKeyPath(
								"strings.RujelBase_Base.vacant"));
					} else {
						buf.append(Person.Utility.fullName(s.teacher(), true, 2, 1, 1));
					}
					reas = s.reason();
				} // substitutes
				NSDictionary dict = new NSDictionary(new Object[] {l,buf.toString(),reas},
												new String[] {"lesson","desc","reason"}); 
				list.addObject(dict);
				buf.delete(0, buf.length());
			} // lessons
			newLesson = (list.count() == 0);
			if(newLesson) {
				lessons = null;
			} else {
				lessons = list; //.immutableClone();
			}
			reason = null;
		}
		return this;
	}
	
	public NSDictionary selLesson() {
		if(selLesson == null)
			return null;
		return new NSDictionary(selLesson,"lesson");
	}
	
	public void setSelLesson(Object l) {
		if(l instanceof EduLesson) {
			selLesson = (EduLesson)l;
		} else if(l instanceof NSDictionary) {
			selLesson = (EduLesson)((NSDictionary)l).valueForKey("lesson");
			reason = (Reason)((NSDictionary)l).valueForKey("reason");
		} else {
			selLesson = null;
		}
		newLesson = false;
	}

	public WOActionResults toggleNewLesson() {
		selLesson = null;
		newLesson = !newLesson;
		reason = null;
		return this;
	}

	public String newLessonClass() {
		if(newLesson)
			return "selection";
		else
			return "orange";
	}

	public WOActionResults save() {
		if(reason == null) {
    		session().takeValueForKey(application().valueForKeyPath(
    			"strings.RujelCurriculum_Curriculum.messages.reasonRequired"), "message");
    		return this;
		}
		EOEditingContext ec = lesson.editingContext(); 
		NSArray others = (selLesson == null)?null:
			(NSArray)selLesson.valueForKey("substitutes");
		Teacher teacher = lesson.course().teacher();
		if(others != null && others.count() > 0) {
			Enumeration enu = others.objectEnumerator();
			while (enu.hasMoreElements()) {
				Substitute sub = (Substitute) enu.nextElement();
//				if(sub != substitute && sub.teacher() == lesson.course().teacher()) {
				if(sub.teacher() == teacher) {
					reason = null;
					session().takeValueForKey(application().valueForKeyPath(
						"strings.RujelCurriculum_Curriculum.messages.duplicateTeacher"), 
						"message");
					session().removeObjectForKey("lessonProperties");
					break;
				}
			}
		}
		String action = "saved";
//		if(substitute == null) {
			Substitute substitute = (Substitute)EOUtilities.createAndInsertInstance(ec,
					Substitute.ENTITY_NAME);
			substitute.addObjectToBothSidesOfRelationshipWithKey(lesson, "fromLesson");
			action = "created";
//		}
		if(selLesson == null) {
			selLesson = (EduLesson) EOUtilities.createAndInsertInstance(ec,
					EduLesson.entityName);
			selLesson.addObjectToBothSidesOfRelationshipWithKey(selCourse, "course");
			selLesson.setDate(lesson.date());
			selLesson.setTheme(lesson.theme());
			MyUtility.setNumberToNewLesson(selLesson);
//			Integer num = (Integer)selCourse.valueForKeyPath("lessons.@max.number");
//			num = new Integer(num.intValue() +1); 
//			selLesson.setNumber(num);
		}
		substitute.addObjectToBothSidesOfRelationshipWithKey(selLesson, "lesson");
		substitute.addObjectToBothSidesOfRelationshipWithKey(teacher,"teacher");
		substitute.addObjectToBothSidesOfRelationshipWithKey(reason, Substitute.REASON_KEY);
		BigDecimal factor = Substitute.joinFactor();
		if(others != null) {
			if(!others.containsObject(substitute))
				others = others.arrayByAddingObject(substitute);
			int div = others.count();
			if(div > 1) {
				factor = factor.divide(new BigDecimal(div), 2,BigDecimal.ROUND_HALF_UP);
				Enumeration enu = others.objectEnumerator();
				StringBuilder buf = new StringBuilder();
				while (enu.hasMoreElements()) {
					Substitute sub = (Substitute) enu.nextElement();
					String theme = (String)sub.valueForKeyPath("fromLesson.theme");
					if(theme == null)
						theme = "...";
					if(buf.indexOf(theme) < 0) {
						if(buf.length() > 0)
							buf.append(" / ");
						buf.append(theme);
					}
					if(sub.fromLesson() != null)
						sub.setFactor(factor);
				}
				selLesson.setTheme(buf.toString());
			}
		}
		substitute.setFactor(factor);
		others = (NSArray)lesson.valueForKey("joins");
//			EOUtilities.objectsMatchingKeyAndValue(ec, 
//				Substitute.ENTITY_NAME, "fromLesson",lesson);
		if(others != null) {
			if(!others.containsObject(substitute))
				others = others.arrayByAddingObject(substitute);
			int div = others.count();
			if(div > 1) {
				factor = Substitute.joinFactor();
				factor = factor.divide(new BigDecimal(div), 2,BigDecimal.ROUND_HALF_UP);
				Enumeration enu = others.objectEnumerator();
				while (enu.hasMoreElements()) {
					Substitute join = (Substitute) enu.nextElement();
					if(factor.compareTo(join.factor()) < 0)
						join.setFactor(factor);
				}
			}
		}
		return done(action);
	}
	/*
	public WOActionResults delete() {
		EOEditingContext ec = lesson.editingContext(); 
		ec.lock();
		if(substitute != null && substitute.editingContext() != null) {
			logger.log(WOLogLevel.EDITING,"Deleting substitute",substitute);
			ec.deleteObject(substitute);
		}
		return done("deleted");
	} */
	
	protected WOActionResults done(String action) {
		EOEditingContext ec = lesson.editingContext();
		boolean ok = false;
		try {
			ec.saveChanges();
			Object[] args = new Object[] {session(),selLesson};
			logger.log(WOLogLevel.EDITING,"Join for lesson " + action,args);
			ok = true;
		} catch (NSValidation.ValidationException vex) {
			ec.revert();
			String message = vex.getMessage();
			session().takeValueForKey(vex.getMessage(), "message");
			Object[] args = new Object[] {session(),selLesson,message};
			logger.log(WOLogLevel.FINE,"Failed to save "+ action + 
					" Join for lesson ",args);
		} catch (Exception e) {
			ec.revert();
			session().takeValueForKey(e.getMessage(), "message");
			Object[] args = new Object[] {session(),selLesson,e};
			logger.log(WOLogLevel.WARNING,"Failed to save "+ action + 
					" Join for lesson ",args);
		}
		if(ok)
			return RedirectPopup.getRedirect(context(), returnPage);
		return this;
	}
}