package net.rujel.curriculum;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.GregorianCalendar;

import net.rujel.interfaces.EduCourse;
import net.rujel.interfaces.EduLesson;
import net.rujel.interfaces.Person;
import net.rujel.interfaces.Teacher;
import net.rujel.reusables.SessionedEditingContext;
import net.rujel.reusables.SettingsReader;
import net.rujel.reusables.Export;
import net.rujel.ui.TeacherSelector;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOAndQualifier;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOFetchSpecification;
import com.webobjects.eocontrol.EOKeyValueQualifier;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.*;

// Generated by the WOLips Templateengine Plug-in at May 13, 2009 2:56:05 PM
public class Tabel extends com.webobjects.appserver.WOComponent {
	
	public EOEditingContext ec;
	public NSArray months;
	public NSDictionary currMonth;
	public Object item;
	public Teacher currTeacher;
	public NSMutableArray details;
	public Integer index;
	
    public Tabel(WOContext context) {
        super(context);
        ec = new SessionedEditingContext(context.session());
        Calendar cal = Calendar.getInstance();
        cal.setTime((NSTimestamp)session().valueForKey("today"));
//        currMonth = new NSMutableDictionary(cal,"cal");
        int cmi = cal.get(Calendar.MONTH);
        NSArray monthNames = (NSArray)application().valueForKeyPath(
        		"strings.Reusables_Strings.presets.monthLong");
//        currMonth.takeValueForKey(monthNames.objectAtIndex(cmi), "name");
        cal.set(Calendar.YEAR, ((Number)session().valueForKey("eduYear")).intValue());
        cal.set(Calendar.MONTH,
        		SettingsReader.intForKeyPath("edu.newYearMonth",GregorianCalendar.JULY));
        NSDictionary[] mns = new NSDictionary[12 + 
                  ((SettingsReader.intForKeyPath("edu.newYearDay",1) > 1)?1:0)];
        for (int i = 0; i < mns.length; i++) {
        	int m = cal.get(Calendar.MONTH);
			mns[i] = new NSDictionary(new Object[] {
					new Integer(cal.get(Calendar.YEAR)), new Integer(m),
						monthNames.objectAtIndex(m),
						new Integer(cal.getActualMaximum(Calendar.DAY_OF_MONTH))}
			,new Object[] { "year", "month", "name","days" });
			if(m == cmi)
				currMonth = mns[i];
			cal.add(Calendar.MONTH, 1);
		}
        months = new NSArray(mns);
    }
    
    public String title() {
    	return (String)application().valueForKeyPath(
    			"strings.RujelCurriculum_Curriculum.Tabel.title");
    }
    
    protected static void addHoursToKey(NSMutableDictionary dict, 
    		BigDecimal hours, Calendar cal, Object key) {
    	BigDecimal[] byTeacher = (BigDecimal[])((dict==null)?key:dict.objectForKey(key));
    	if(byTeacher ==  null) {
    		byTeacher = new BigDecimal[cal.getActualMaximum(Calendar.DAY_OF_MONTH) +1];
    		dict.setObjectForKey(byTeacher, key);
    	}    	
    	int day = cal.get(Calendar.DAY_OF_MONTH);
    	if(byTeacher[day] == null) {
    		byTeacher[day] = hours;
    	} else {
    		byTeacher[day] = byTeacher[day].add(hours);
    	}
    	if(byTeacher[0] == null) {
    		byTeacher[0] = hours;
    	} else {
    		byTeacher[0] = byTeacher[0].add(hours);
    	}
    }
    
    protected EOQualifier monthQual(Calendar cal) {
    	EOQualifier quals[] = monthQuals(((Integer)currMonth.valueForKey("year")).intValue()
    			, ((Integer)currMonth.valueForKey("month")).intValue(), "date",cal);
    	return new EOAndQualifier(new NSArray(quals));
    }
    
    public static EOQualifier[] monthQuals(int year, int month, String key, Calendar cal) {
    	if(cal == null)
    		cal = Calendar.getInstance();
    	cal.set(Calendar.YEAR, year);
    	cal.set(Calendar.MONTH, month);
    	cal.set(Calendar.DAY_OF_MONTH, 1);
    	EOQualifier quals[] = new EOQualifier[2];
    	quals[0] = new EOKeyValueQualifier("date",
    			EOQualifier.QualifierOperatorGreaterThanOrEqualTo,
    			new NSTimestamp(cal.getTimeInMillis()));
    	cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
    	quals[1] = new EOKeyValueQualifier("date",
    			EOQualifier.QualifierOperatorLessThanOrEqualTo,
    			new NSTimestamp(cal.getTimeInMillis()));
    	return quals;
    }
    
    public WOActionResults export() {
    	Calendar cal = Calendar.getInstance();
    	EOFetchSpecification fs = new EOFetchSpecification(
    			Substitute.ENTITY_NAME,monthQual(cal),null);
    	fs.setRefreshesRefetchedObjects(true);
    	ec.objectsWithFetchSpecification(fs);
    	fs.setEntityName(EduLesson.entityName);
//    	NSArray list = new NSArray(new String[] {"substitutes.teacher","course.teacher"});
//    	fs.setPrefetchingRelationshipKeyPaths(list);
    	NSArray list = ec.objectsWithFetchSpecification(fs);
    	if(list == null || list.count() == 0) {
    		session().takeValueForKey(application().valueForKeyPath(
    			"strings.RujelReports_Reports.CustomReport.nothingFound"), "message");
    		return null;
    	}
    	NSMutableDictionary byTeacher = new NSMutableDictionary();
    	Enumeration enu = list.objectEnumerator();
    	while (enu.hasMoreElements()) {
			EduLesson lesson = (EduLesson) enu.nextElement();
			cal.setTime(lesson.date());
			NSArray subs = (NSArray)lesson.valueForKey("substitutes");
			if(subs != null && subs.count() > 0) {
				Enumeration sEnu = subs.objectEnumerator();
				while (sEnu.hasMoreElements()) {
					Substitute sub = (Substitute) sEnu.nextElement();
					addHoursToKey(byTeacher, sub.factor(), cal, sub.teacher());
				}
			} else {
				addHoursToKey(byTeacher, BigDecimal.ONE, cal, lesson.course().teacher());
			}
		}
    	list = EOSortOrdering.sortedArrayUsingKeyOrderArray(
    			byTeacher.allKeys(),Person.sorter);
    	
    	StringBuilder buf = new StringBuilder("tabel");
    	buf.append(currMonth.valueForKey("year"));
    	int month = ((Integer)currMonth.valueForKey("month")).intValue();
    	month++;
    	if(month < 10)
    		buf.append('0');
    	buf.append(month);
    	Export exportPage = new Export(context(),buf.toString());
    	
    	exportPage.beginRow();
    	exportPage.addValue(currMonth.valueForKey("name"));
    	int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
		for (int i = 1; i <= days; i++) {
			exportPage.beginValue();
			exportPage.response().appendContentString(Integer.toString(i));
			exportPage.endValue();
		}
		exportPage.addValue(application().valueForKeyPath(
				"strings.RujelCurriculum_Curriculum.Tabel.total"));
		exportPage.endRow();
    	
    	NSNumberFormatter formatter = new NSNumberFormatter();
    	formatter.setDecimalSeparator(",");
    	formatter.setThousandSeparator(" ");
    	enu = list.objectEnumerator();
    	while (enu.hasMoreElements()) {
			Teacher teacher = (Teacher) enu.nextElement();
			exportPage.beginRow();
			exportPage.addValue(Person.Utility.fullName(teacher, true, 2, 1, 1));
			BigDecimal[] allHours = (BigDecimal[]) byTeacher.objectForKey(teacher); 
			for (int i = 0; i <= days; i++) {
				BigDecimal value = allHours[(i==days)?0:i + 1];
				if(value != null) {
					value = value.stripTrailingZeros();
					if(value.scale() < 0)
						value = value.setScale(0);
				}
				exportPage.addValue(formatter.format(value));
			}
			exportPage.endRow();
		}
    	return exportPage;
    }
    
    public void setCurrTeacher(Teacher teacher) {
    	currTeacher = teacher;
		details = null;
    	if(currTeacher != null && currMonth != null) {
    		go();
    	}
    }
    
    public void setCurrMonth(NSDictionary month) {
		currMonth = month;
		details = null;
    	if(currTeacher != null && currMonth != null) {
    		go();
    	}
	}
    
    public void go() {
    	NSMutableArray quals = new NSMutableArray();
    	EOQualifier qual = new EOKeyValueQualifier("teacher",
    			EOQualifier.QualifierOperatorEqual,currTeacher);
    	quals.addObject(qual);
    	qual = new EOKeyValueQualifier("eduYear",EOQualifier.QualifierOperatorEqual,
    			session().valueForKey("eduYear"));
    	quals.addObject(qual);
    	qual = new EOAndQualifier(quals);
    	EOFetchSpecification fs = new EOFetchSpecification(
    			EduCourse.entityName,qual,null);
    	fs.setRefreshesRefetchedObjects(true);
    	NSArray list = ec.objectsWithFetchSpecification(fs);
    	NSArray sorter = new NSArray(new EOSortOrdering[] {
    			new EOSortOrdering("cycle",EOSortOrdering.CompareAscending),
    			new EOSortOrdering("eduGroup",EOSortOrdering.CompareAscending),
    			new EOSortOrdering("teacher",EOSortOrdering.CompareAscending),
    			new EOSortOrdering("comment",EOSortOrdering.CompareAscending)});
    	Calendar cal = Calendar.getInstance();
    	qual = monthQual(cal);
    	int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
    	BigDecimal[] totals = new BigDecimal[days + 1];
    	NSMutableDictionary row = ((NSDictionary)application().valueForKeyPath(
    			"strings.RujelCurriculum_Curriculum.Tabel.grandTotal")).mutableClone();
    	row.setObjectForKey(totals, "values");
    	details = new NSMutableArray(row);
    	if(list != null && list.count() > 0) { // main courses
    		list = EOSortOrdering.sortedArrayUsingKeyOrderArray(list, sorter);
    		BigDecimal[] mainTotals = new BigDecimal[days + 1];
    		row = ((NSDictionary)application().valueForKeyPath(
				"strings.RujelCurriculum_Curriculum.Tabel.mainTotal")).mutableClone();
    		row.setObjectForKey(mainTotals, "values");
    		details.addObject(row);
    		Enumeration coursEnu = list.objectEnumerator();
    		while (coursEnu.hasMoreElements()) {
				EduCourse course = (EduCourse) coursEnu.nextElement();
				list = course.lessons();
				if(list == null || list.count() == 0)
					continue;
				list = EOQualifier.filteredArrayWithQualifier(list, qual);
				if(list == null || list.count() == 0)
					continue;
				BigDecimal[] allHours = new BigDecimal[days + 1];
				row = new NSMutableDictionary(course,"course");
				row.takeValueForKey(course.eduGroup().name(), "eduGroup");
				row.takeValueForKey(course.subjectWithComment(),"subject");
				Enumeration lEnu = list.objectEnumerator();
				while (lEnu.hasMoreElements()) {
					EduLesson lesson = (EduLesson) lEnu.nextElement();
					list = (NSArray)lesson.valueForKey("substitutes");
					if(list != null && list.count() > 0)
						continue;
					cal.setTime(lesson.date());
					addHoursToKey(null, BigDecimal.ONE, cal, allHours);
					addHoursToKey(null, BigDecimal.ONE, cal, mainTotals);
					addHoursToKey(null, BigDecimal.ONE, cal, totals);
				}
	    		row.setObjectForKey(allHours, "values");
	    		details.addObject(row);
			}
    	} // main courses
    	quals.removeAllObjects();
    	quals.addObject(qual);
    	qual = new EOKeyValueQualifier("teacher",
    			EOQualifier.QualifierOperatorEqual,currTeacher);
    	quals.addObject(qual);
    	qual = new EOAndQualifier(quals);
    	fs.setEntityName(Substitute.ENTITY_NAME);
    	fs.setQualifier(qual);
    	list = ec.objectsWithFetchSpecification(fs);
    	if(list == null || list.count() == 0)
    		return;
    	BigDecimal[] subsTotals = new BigDecimal[days + 1];
		row = ((NSDictionary)application().valueForKeyPath(
				"strings.RujelCurriculum_Curriculum.Tabel.subsTotal")).mutableClone();
		row.setObjectForKey(subsTotals, "values");
		details.addObject(row);
		Enumeration enu = list.objectEnumerator();
		NSMutableDictionary byCourse = new NSMutableDictionary();
		days = ((Integer)currMonth.valueForKey("month")).intValue();
    	while (enu.hasMoreElements()) {
			Substitute sub = (Substitute) enu.nextElement();
			BigDecimal factor = sub.factor();
			if(factor.compareTo(BigDecimal.ZERO) == 0)
				continue;
			cal.setTime(sub.lesson().date());
			if(days != cal.get(Calendar.MONTH))
				continue;
			addHoursToKey(byCourse, factor, cal, sub.lesson().course());
			addHoursToKey(null, factor, cal, subsTotals);
			addHoursToKey(null, factor, cal, totals);
		}
    	list = byCourse.allKeys();
    	list = EOSortOrdering.sortedArrayUsingKeyOrderArray(list, sorter);
    	enu = list.objectEnumerator();
    	while (enu.hasMoreElements()) {
			EduCourse course = (EduCourse) enu.nextElement();
			row = new NSMutableDictionary(course,"course");
			row.takeValueForKey(course.eduGroup().name(), "eduGroup");
			row.takeValueForKey(Person.Utility.fullName(course.teacher(), true, 2, 1, 1),
					"subject");
			row.takeValueForKey(course.cycle().subject(),"hover");
    		row.setObjectForKey(byCourse.objectForKey(course), "values");
    		details.addObject(row);
		}
    }
    
	public WOActionResults selectTeacher() {
		return TeacherSelector.selectorPopup(this, "currTeacher", ec);
	}
	
	public String value() {
		if(!(item instanceof NSDictionary)) {
			if(index!=null)
				return Integer.toString(index.intValue() + 1);
		}
		BigDecimal[] values = (BigDecimal[])((NSDictionary)item).valueForKey("values");
		if(values == null)
			return Integer.toString(index.intValue() + 1);
		BigDecimal value = values[(index == null)?0:index.intValue() +1];
		if(value == null)
			return null;
		if(value != null) {
			value = value.stripTrailingZeros();
			if(value.scale() < 0)
				value = value.setScale(0);
		}
		return value.toString();
	}
	
	public String sum() {
		index = null;
		return value();
	}
}