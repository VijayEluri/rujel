package net.rujel.curriculum;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.GregorianCalendar;

import net.rujel.base.BaseCourse;
import net.rujel.base.MyUtility;
import net.rujel.eduplan.EduPeriod;
import net.rujel.eduplan.PlanCycle;
import net.rujel.interfaces.EOPeriod;
import net.rujel.interfaces.EduCourse;
import net.rujel.interfaces.EduLesson;
import net.rujel.interfaces.Person;
import net.rujel.interfaces.Teacher;
import net.rujel.reusables.Counter;
import net.rujel.reusables.ExportCSV;
import net.rujel.reusables.ExportHTML;
import net.rujel.reusables.SessionedEditingContext;
import net.rujel.reusables.SettingsReader;
import net.rujel.reusables.Export;
import net.rujel.reusables.Various;
import net.rujel.ui.TeacherSelector;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;

// Generated by the WOLips Templateengine Plug-in at May 13, 2009 2:56:05 PM
public class Tabel extends com.webobjects.appserver.WOComponent {
	
	public EOEditingContext ec;
	public NSArray months;
	public NSDictionary currMonth;
	public NSDictionary item;
	public Object currTeacher;
	public NSMutableArray details;
	public Integer index;
	public Boolean cantSelect;
	public NSArray journalZPU;
	public NSMutableDictionary options = new NSMutableDictionary(
			new Boolean[] {Boolean.TRUE,Boolean.TRUE},
			new String[] {"unsubmitted","unsubmittedZPU"});
	public Integer section;
	public String sectionName;
	
    public Tabel(WOContext context) {
        super(context);
        ec = new SessionedEditingContext(context.session());
        section = (Integer)context.session().valueForKeyPath("state.section.idx");
        Calendar cal = Calendar.getInstance();
        cal.setTime((NSTimestamp)session().valueForKey("today"));
//        currMonth = new NSMutableDictionary(cal,"cal");
        int cmi = cal.get(Calendar.MONTH);
        NSArray monthNames = (NSArray)application().valueForKeyPath(
        		"strings.Reusables_Strings.presets.monthLong");
//        currMonth.takeValueForKey(monthNames.objectAtIndex(cmi), "name");
        cal.set(Calendar.YEAR, ((Number)session().valueForKey("eduYear")).intValue());
        cal.set(Calendar.MONTH,
        		SettingsReader.intForKeyPath("edu.newYearMonth",GregorianCalendar.JULY));
        cal.set(Calendar.DATE, SettingsReader.intForKeyPath("edu.newYearDay",1));
        NSDictionary[] mns = new NSDictionary[12 + 
                  ((cal.get(Calendar.DATE) > 1)?1:0)];
        for (int i = 0; i < mns.length; i++) {
        	int m = cal.get(Calendar.MONTH);
        	mns[i] = new NSMutableDictionary(new Object[] {
					new Integer(cal.get(Calendar.YEAR)), new Integer(m),
						monthNames.objectAtIndex(m)}
			,new Object[] { "year", "month", "name"});
        	mns[i].takeValueForKey(new NSTimestamp(cal.getTimeInMillis()), "beginDate");
        	if(i == 12) {
        		cal.set(Calendar.DATE, SettingsReader.intForKeyPath("edu.newYearDay",28));
        		cal.add(Calendar.DATE, -1);
        	} else {
        		cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
        	}
        	mns[i].takeValueForKey(new NSTimestamp(cal.getTimeInMillis()), "endDate");
			if(m == cmi)
				currMonth = mns[i];
			cal.add(Calendar.DATE, 1);
		}
        months = new NSArray(mns);
        EOKeyGlobalID gid = (EOKeyGlobalID)context.session().valueForKey("userPersonGID");
        if(gid != null && gid.entityName().equals(Teacher.entityName)) {
        	setCurrTeacher((Teacher)ec.faultForGlobalID(gid, ec));
        	cantSelect = (Boolean)context.session().valueForKeyPath("readAccess._edit.Tabel");
        }
    }
    
    public String title() {
    	return (String)application().valueForKeyPath(
    			"strings.RujelCurriculum_Curriculum.Tabel.title");
    }
    
    protected static void addHoursToKey(NSMutableDictionary dict, 
    		BigDecimal hours, int day, int days, Object key) {
    	BigDecimal[] byTeacher = (BigDecimal[])((dict==null)?key:dict.objectForKey(key));
    	if(byTeacher ==  null) {
    		byTeacher = new BigDecimal[days +1];
    		dict.setObjectForKey(byTeacher, key);
    	}    	
    	if(byTeacher[day] == null) {
    		byTeacher[day] = hours;
    	} else {
    		byTeacher[day] = byTeacher[day].add(hours);
    	}
    	if(byTeacher[0] == null) {
    		byTeacher[0] = hours;
    	} else {
    		byTeacher[0] = byTeacher[0].add(hours);
    	}
    }
    
    protected NSMutableArray monthQual() {
    	EOQualifier quals[] = new EOQualifier[2];
    	quals[0] = new EOKeyValueQualifier("date",
    			EOQualifier.QualifierOperatorGreaterThanOrEqualTo,
    			currMonth.valueForKey("beginDate"));
    	quals[1] = new EOKeyValueQualifier("date",
    			EOQualifier.QualifierOperatorLessThanOrEqualTo,
    			currMonth.valueForKey("endDate"));
    	NSMutableArray result = new NSMutableArray(quals);
    	return result;
    }
    
    public static EOQualifier[] monthQuals(int year, int month, String key, Calendar cal) {
    	if(cal == null)
    		cal = Calendar.getInstance();
    	cal.set(Calendar.YEAR, year);
    	cal.set(Calendar.MONTH, month);
    	cal.set(Calendar.DAY_OF_MONTH, 1);
    	EOQualifier quals[] = new EOQualifier[2];
    	quals[0] = new EOKeyValueQualifier(key,
    			EOQualifier.QualifierOperatorGreaterThanOrEqualTo,
    			new NSTimestamp(cal.getTimeInMillis()));
    	cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
    	quals[1] = new EOKeyValueQualifier(key,
    			EOQualifier.QualifierOperatorLessThanOrEqualTo,
    			new NSTimestamp(cal.getTimeInMillis()));
    	return quals;
    }
    
    public WOActionResults exportTabel() {
    	Calendar cal = Calendar.getInstance();
    	NSMutableArray quals = null;
    	EOQualifier qual = new EOKeyValueQualifier("school",EOQualifier.QualifierOperatorEqual,
    			session().valueForKey("school"));
    	if(section != null) {
    		quals = new NSMutableArray(qual);
    		quals.addObject(new EOKeyValueQualifier("section",
    				EOQualifier.QualifierOperatorEqual,section));
    		qual = new EOAndQualifier(quals);
    	}
    	EOFetchSpecification fs = new EOFetchSpecification(PlanCycle.ENTITY_NAME,qual,null);
    	NSArray list = ec.objectsWithFetchSpecification(fs);
    	if(list == null || list.count() == 0)
    		return noData();
    	qual = Various.getEOInQualifier("cycle", list);
    	quals = new NSMutableArray(qual);
    	quals.addObject(new EOKeyValueQualifier("eduYear",EOQualifier.QualifierOperatorEqual,
    			session().valueForKey("eduYear")));
		qual = new EOAndQualifier(quals);
		fs = new EOFetchSpecification(EduCourse.entityName,qual,null);
		NSArray courses = ec.objectsWithFetchSpecification(fs);
		if(courses == null || courses.count() == 0)
			return noData();
    	quals = monthQual();
//		cal.set(Calendar.YEAR,((Integer)currMonth.valueForKey("year")).intValue());
//		cal.set(Calendar.MONTH, ((Integer)currMonth.valueForKey("month")).intValue());
		NSTimestamp lastDay = (NSTimestamp)currMonth.valueForKey("endDate");
		cal.setTime(lastDay);
		int days = cal.get(Calendar.DAY_OF_YEAR) +1;
		NSTimestamp firstDay = (NSTimestamp)currMonth.valueForKey("beginDate");
		cal.setTime(firstDay);
		int firstDOY = cal.get(Calendar.DAY_OF_YEAR);
		int maxDOY = cal.getActualMaximum(Calendar.DAY_OF_YEAR);
		days -= firstDOY;
		if(days < 0)
			days += maxDOY;
//		cal.set(Calendar.DAY_OF_MONTH, days);
//		int lastDOY = cal.get(Calendar.DAY_OF_YEAR);
		qual = new EOAndQualifier(quals);
    	fs = new EOFetchSpecification(Substitute.ENTITY_NAME,qual,null);
    	fs.setRefreshesRefetchedObjects(true);
    	ec.objectsWithFetchSpecification(fs);
    	quals.addObject(Various.getEOInQualifier("course", courses));
		qual = new EOAndQualifier(quals);
    	fs = new EOFetchSpecification(EduLesson.entityName,qual,null);
    	list = ec.objectsWithFetchSpecification(fs);
    	if(list == null || list.count() == 0)
    		return noData();
    	boolean omitUnsubmitted = !Various.boolForObject(options.valueForKey("unsubmitted"));
    	NSMutableDictionary byTeacher = new NSMutableDictionary();
    	NSMutableDictionary subsByTeacher = new NSMutableDictionary();
    	NSMutableDictionary plusByTeacher = new NSMutableDictionary();
//    	NSMutableDictionary byCourse = new NSMutableDictionary();
    	Enumeration enu = list.objectEnumerator();
    	while (enu.hasMoreElements()) {   // lessons
			EduLesson lesson = (EduLesson) enu.nextElement();
			cal.setTime(lesson.date());
			int day = cal.get(Calendar.DAY_OF_YEAR) - firstDOY +1;
			if(day < 0)
				day += maxDOY;
			NSArray subs = (NSArray)lesson.valueForKey("substitutes");
			int subsCount = 0;
			if(subs != null && subs.count() > 0) {
/*				int[] sbt = (int[])byCourse.objectForKey(lesson.course());
				if(sbt == null) {
					sbt = new int[cal.getActualMaximum(Calendar.DAY_OF_MONTH) +1];
					byCourse.setObjectForKey(sbt, lesson.course());
				}
				sbt[cal.get(Calendar.DATE)]--;*/
				Enumeration sEnu = subs.objectEnumerator();
				while (sEnu.hasMoreElements()) {
					Substitute sub = (Substitute) sEnu.nextElement();
					if(omitUnsubmitted && sub.reason().unverified())
						continue;
					subsCount++;
					Teacher teacher = sub.teacher();
					addHoursToKey(byTeacher, sub.factor(), day, days, teacher);
					BigDecimal bySub = (BigDecimal)subsByTeacher.objectForKey(teacher);
					if(bySub == null) {
						subsByTeacher.setObjectForKey(sub.factor(), teacher);
					} else {
						subsByTeacher.setObjectForKey(bySub.add(sub.factor()), teacher);
					}
				}
			}
			if(subsCount == 0) {
				Object teacher = lesson.course().teacher(lesson.date());
				if(teacher == null)
					teacher = NSDictionary.EmptyDictionary;
				addHoursToKey(byTeacher, BigDecimal.ONE, day, days,teacher);
			}
		} // lessons
    	if(omitUnsubmitted) {
    		quals.addObject(new EOKeyValueQualifier("reason.verification",
    				EOQualifier.QualifierOperatorNotEqual,NullValue));
    	}
    	quals.addObject(new EOKeyValueQualifier(Variation.VALUE_KEY,
				EOQualifier.QualifierOperatorGreaterThan,new Integer(0)));
    	fs.setEntityName(Variation.ENTITY_NAME);
		fs.setQualifier(new EOAndQualifier(quals));
    	list = ec.objectsWithFetchSpecification(fs); // positive variations
    	if(list != null && list.count() > 0) { // variations
    		Enumeration vEnu = list.objectEnumerator();
        	quals.removeLastObject();
        	quals.addObject(new EOKeyValueQualifier(Variation.VALUE_KEY,
    				EOQualifier.QualifierOperatorLessThan,new Integer(0)));
        	quals.addObject(new EOKeyValueQualifier("relatedLesson",
    				EOQualifier.QualifierOperatorNotEqual,NullValue));
    		fs.setQualifier(new EOAndQualifier(quals));
        	list = ec.objectsWithFetchSpecification(fs); // substituted variations
vars:		while (vEnu.hasMoreElements()) { // variations
				Variation var = (Variation) vEnu.nextElement();
				if(var.reason().namedFlags().flagForKey("toReturn"))
					continue;
				Object teacher = var.course().teacher(var.date());
				EduLesson lesson = var.relatedLesson();
				if(lesson != null) {
					NSArray found = (NSArray)lesson.valueForKey("substitutes");
					if(found != null && found.count() > 0) { // is substituted
						if(!omitUnsubmitted)
							continue;
						Enumeration sEnu = found.objectEnumerator();
						while (sEnu.hasMoreElements()) {
							Substitute sub = (Substitute) sEnu.nextElement();
							if(!sub.reason().unverified())
								continue vars;
						}
					}
					if(list != null && list.count() > 0) { // test varSub
						qual = new EOKeyValueQualifier("relatedLesson", 
								EOQualifier.QualifierOperatorEqual, lesson);
						found = EOQualifier.filteredArrayWithQualifier(list, qual);
						if(found != null && found.count() > 0) { // is varSub
							BigDecimal bySub = (BigDecimal)subsByTeacher.objectForKey(teacher);
							if(bySub == null) {
								subsByTeacher.setObjectForKey(BigDecimal.ONE, teacher);
							} else {
								subsByTeacher.setObjectForKey(
										bySub.add(BigDecimal.ONE), teacher);
							}
							continue;
						}
					}
				}
				Counter cnt = (Counter)plusByTeacher.objectForKey(teacher);
				if(cnt == null)
					plusByTeacher.setObjectForKey(new Counter(1), teacher);
				else
					cnt.add(1);
			} // variations enumeration
    	} // have variatins
    	NSMutableDictionary loads = null;
    	if(Various.boolForObject(options.valueForKey("showLoad"))) {
    		enu = courses.objectEnumerator();
    		loads = new NSMutableDictionary();
    		while (enu.hasMoreElements()) {
    			EduCourse course = (EduCourse) enu.nextElement();
				NSArray pdetails = EOUtilities.objectsMatchingKeyAndValue(ec,
						"PlanDetail","course", course);
				int hours[] = new int[] {0,0};
				if(pdetails != null && pdetails.count() > 0) {
					Enumeration denu = pdetails.objectEnumerator();
					NSTimestamp minBegin = null;
					NSTimestamp maxEnd = null;
					while (denu.hasMoreElements()) {
						EOEnterpriseObject pd = (EOEnterpriseObject)denu.nextElement();
						EduPeriod per = (EduPeriod)pd.valueForKey("eduPeriod");
						if(EOPeriod.Utility.compareDates(per.end(), firstDay) <= 0)
							continue;
						if(EOPeriod.Utility.compareDates(per.begin(), lastDay) >= 0)
							continue;
						if(minBegin == null || minBegin.after(per.begin())) {
							minBegin = per.begin();
							hours[0] = (Integer)pd.valueForKey("weekly");
						}
						if(maxEnd == null || maxEnd.before(per.end())) {
							maxEnd = per.end();
							hours[1] = (Integer)pd.valueForKey("weekly");
						}
					}
				} else {
	    			PlanCycle cycle = (PlanCycle)course.cycle();
	    			hours[0] = cycle.weekly(course);
	    			hours[1] = hours[0];
				}
    			Object startTeacher = course.teacher(firstDay);
    			if(startTeacher == null) startTeacher = NSDictionary.EmptyDictionary;
    			int[] load = (int[])loads.objectForKey(startTeacher);
    			if(load == null) {
    				load = new int[] {hours[0], 0};
    				loads.setObjectForKey(load, startTeacher);
    			} else {
    				load[0] += hours[0];
    			}
    			Object endTeacher = course.teacher(lastDay);
    			if(endTeacher == null) endTeacher = NSDictionary.EmptyDictionary;
    			if(startTeacher == endTeacher) {
    				load[1] += (hours[1] - hours[0]);
    				continue;
    			}
    			load[1] -= hours[0];
    			load = (int[])loads.objectForKey(endTeacher);
    			if(load == null) {
    				load = new int[] {0, hours[1]};
    				loads.setObjectForKey(load, endTeacher);
    			} else {
    				load[1] += hours[1];
    			}
    		}
    	} // show load
    	
    	list = EOSortOrdering.sortedArrayUsingKeyOrderArray(
    			byTeacher.allKeys(),Person.sorter);
    	Export exportPage;
    	if(Various.boolForObject(context().request().formValueForKey("html"))) {
    		exportPage = new ExportHTML(context(), null, (String)currMonth.valueForKey("name"));
        	exportPage.beginTitleRow();
    		exportPage.addValue(application().valueForKeyPath(
    				"strings.RujelInterfaces_Names.Teacher.this"));
    	} else {
        	StringBuilder buf = new StringBuilder("tabel");
        	buf.append(currMonth.valueForKey("year"));
        	int month = ((Integer)currMonth.valueForKey("month")).intValue();
        	month++;
        	if(month < 10)
        		buf.append('0');
        	exportPage = new ExportCSV(context(),buf.toString());
        	exportPage.beginTitleRow();
        	exportPage.addValue(currMonth.valueForKey("name"));
    	}
    	if(Various.boolForObject(options.valueForKey("showDetails"))) {
			cal.setTime(firstDay);
    		for (int i = 1; i <= days; i++) {
    			exportPage.addValue(Integer.toString(cal.get(Calendar.DATE)));
    			cal.add(Calendar.DATE, 1);
    		}
    	}
    	if(loads != null) {
    		exportPage.addValue(application().valueForKeyPath(
				"strings.RujelCurriculum_Curriculum.Tabel.load"));
    	}
		exportPage.addValue(application().valueForKeyPath(
				"strings.RujelCurriculum_Curriculum.Tabel.total"));
		if(subsByTeacher.count() > 0)
			exportPage.addValue(application().valueForKeyPath(
					"strings.RujelCurriculum_Curriculum.Tabel.bySubs"));
		if(plusByTeacher.count() > 0)
			exportPage.addValue(application().valueForKeyPath(
					"strings.RujelCurriculum_Curriculum.Tabel.extraLessons.subject"));
		exportPage.endRow();
    	enu = list.objectEnumerator();
    	while (enu.hasMoreElements()) {
			Object teacher = enu.nextElement();
			exportPage.beginRow();
			if(teacher instanceof Teacher)
				exportPage.addValue(Person.Utility.fullName(
						(Teacher)teacher, true, 2, 1, 1));
			else
				exportPage.addValue(session().valueForKeyPath(
						"strings.RujelBase_Base.vacant"));
			BigDecimal[] allHours = (BigDecimal[]) byTeacher.objectForKey(teacher); 
			if(Various.boolForObject(options.valueForKey("showDetails"))) {
				for (int i = 1; i <= days; i++) {
					exportPage.addValue(MyUtility.formatDecimal(allHours[i]));
				}
	    	}
	    	if(loads != null) {
	    		int[] load = (int[])loads.objectForKey(teacher);
	    		if(load == null) {
	    			exportPage.addValue("0");
	    		} else if (load[1] == 0) {
	    			exportPage.addValue(Integer.toString(load[0]));
	    		} else {
	    			StringBuilder buf = new StringBuilder(5);
	    			buf.append(load[0]);
	    			if(load[1] >= 0)
	    				buf.append('+');
	    			buf.append(load[1]);
	    			exportPage.addValue(buf);
	    		}
	    	}			
			exportPage.addValue(MyUtility.formatDecimal(allHours[0]));
			if(subsByTeacher.count() > 0) {
				BigDecimal value = (BigDecimal)subsByTeacher.objectForKey(teacher);
				exportPage.addValue(MyUtility.formatDecimal(value));
			}
			if(plusByTeacher.count() > 0)
				exportPage.addValue(plusByTeacher.objectForKey(teacher));
			exportPage.endRow();
		}
    	return exportPage;
    }

	private WOActionResults noData() {
		String message = (String)session().valueForKeyPath(
					"strings.RujelCurriculum_Curriculum.Tabel.noData");
		session().takeValueForKey(message, "message");
		return null;
	}
    
	public WOActionResults exportDetails() {
		if(details == null || details.count() == 0) {
			WOResponse response = WOApplication.application().createResponseInContext(context());
    		response.appendContentString((String)session().valueForKeyPath(
				"strings.RujelCurriculum_Curriculum.Tabel.noData"));
        	response.setHeader("application/octet-stream","Content-Type");
        	response.setHeader("attachment; filename=\"noData.txt\"","Content-Disposition");
        	return response;
		}
    	StringBuilder buf = new StringBuilder("details");
    	buf.append(currMonth.valueForKey("year"));
    	int month = ((Integer)currMonth.valueForKey("month")).intValue();
    	month++;
    	if(month < 10)
    		buf.append('0');
    	buf.append(month);
		Export export = new ExportCSV(context(),buf.toString());

		int days = ((Integer)currMonth.valueForKey("days")).intValue();
		export.beginRow();
//		export.addValue(currMonth.valueForKey("name"));
		if(currTeacher instanceof Teacher)
			export.addValue(Person.Utility.fullName((Teacher)currTeacher, true, 2, 2, 2));
		else
			export.addValue(session().valueForKeyPath("strings.RujelBase_Base.vacant"));
		export.addValue(null);
		{
		Calendar cal = Calendar.getInstance();
		cal.setTime((NSTimestamp)currMonth.valueForKey("beginDate"));
		for (int i = 1; i <= days; i++) {
			export.addValue(Integer.toString(cal.get(Calendar.DATE)));
			cal.add(Calendar.DATE, 1);
		}
		}
		export.addValue(application().valueForKeyPath(
				"strings.RujelCurriculum_Curriculum.Tabel.total"));
		export.endRow();

		Enumeration enu = details.objectEnumerator();
    	NSNumberFormatter formatter = new NSNumberFormatter();
    	formatter.setDecimalSeparator(",");
    	formatter.setThousandSeparator(" ");
		while (enu.hasMoreElements()) {
			NSDictionary row = (NSDictionary) enu.nextElement();
			export.beginRow();
			export.addValue(row.valueForKey("eduGroup"));
			String subject = (String)row.valueForKey("subject");
			if(subject.indexOf('<') > 0) {
				EduCourse course = (EduCourse)row.valueForKey("course");
				subject = course.cycle().subject();
				if(course.comment() != null)
					subject = subject + " (" + course.comment() + ')';
			}
			export.addValue(subject);
			BigDecimal[] values = (BigDecimal[])row.valueForKey("values");
			NSMutableArray[] info = (NSMutableArray[])row.valueForKey("info");
			for (int i = 0; i <= days; i++) {
				BigDecimal value = values[(i==days)?0:i + 1];
				String val = MyUtility.formatDecimal(value);
				if(i < days && info != null && info[i+1] != null && info[i+1].count() > 0)
					val = (val==null)?"*":val + '*';
				export.addValue(val);
			}
			export.endRow();
		}
		return export;
	}
    
    public void setCurrTeacher(Object teacher) {
    	currTeacher = teacher;
    	go();
    }
    
    public void setCurrMonth(NSDictionary month) {
		currMonth = month;
		go();
	}
    
    public void go() {
    	journalZPU = null;
    	if(currTeacher == null || currMonth == null)
    		return;
    	Calendar cal = Calendar.getInstance();
//    	cal.set(Calendar.YEAR,((Integer)currMonth.valueForKey("year")).intValue());
//    	cal.set(Calendar.MONTH, ((Integer)currMonth.valueForKey("month")).intValue());
//    	cal.set(Calendar.DAY_OF_MONTH, 1);
    	NSTimestamp firstDay = (NSTimestamp)currMonth.valueForKey("beginDate");
    	cal.setTime(firstDay);
    	int firstDOY = cal.get(Calendar.DAY_OF_YEAR);
    	int maxDOY = cal.getActualMaximum(Calendar.DAY_OF_YEAR);
//    	int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
//    	cal.set(Calendar.DAY_OF_MONTH, days);
    	NSTimestamp lastDay = (NSTimestamp)currMonth.valueForKey("endDate");
    	cal.setTime(lastDay);
    	int lastDOY = cal.get(Calendar.DAY_OF_YEAR);
    	int days = lastDOY - firstDOY +1;
    	if(days > 0)
    		maxDOY = 0;
    	else
    		days += maxDOY;
    	currMonth.takeValueForKey(new Integer(days), "days");
    	// courses for teacher
    	EOQualifier[] quals = new EOQualifier[2];//NSMutableArray();
    	quals[0] = new EOKeyValueQualifier("date",
    			EOQualifier.QualifierOperatorGreaterThanOrEqualTo,firstDay);
    	quals[1] = new EOKeyValueQualifier("date",
    			EOQualifier.QualifierOperatorLessThanOrEqualTo,lastDay);
    	EOQualifier monthQual = new EOAndQualifier(new NSArray(quals));
    	EOQualifier teacherQual =  new EOKeyValueQualifier("teacher",
    			EOQualifier.QualifierOperatorEqual,currTeacher);
    	quals[0] = teacherQual;
    	quals[1] = new EOKeyValueQualifier("eduYear",EOQualifier.QualifierOperatorEqual,
    			session().valueForKey("eduYear"));
    	quals[1] = new EOAndQualifier(new NSArray(quals));
    	EOFetchSpecification fs = new EOFetchSpecification(
    			EduCourse.entityName,quals[1],null);
    	fs.setRefreshesRefetchedObjects(true);
    	NSArray list = ec.objectsWithFetchSpecification(fs);
       	NSTimestamp[] dates = new NSTimestamp[2];
       	int weekly = 0;
       	int change = 0;
		details = new NSMutableArray();
		final NSMutableArray clear = new NSMutableArray();
		Integer school = (Integer)session().valueForKey("school");
		NSArray detailsSorter = new NSArray(new Object[] {
	 		EOSortOrdering.sortOrderingWithKey("eduPeriod.begin",EOSortOrdering.CompareAscending),
	 		EOSortOrdering.sortOrderingWithKey("eduPeriod.end",EOSortOrdering.CompareDescending)});
    	if(list != null && list.count() > 0) {  // recent courses
	    	quals[1] = new EOKeyValueQualifier("date",
	    			EOQualifier.QualifierOperatorLessThanOrEqualTo,lastDay);
    		Enumeration enu = list.objectEnumerator();
    		while (enu.hasMoreElements()) {
				BaseCourse course = (BaseCourse) enu.nextElement();
				if(!school.equals(course.cycle().school()))
					continue;
				if(section != null && !section.equals(course.valueForKeyPath("cycle.section")))
					continue;
				EOEnterpriseObject ct = course.teacherChange(lastDay,dates);				
				if(ct != null)
					continue;
				PlanCycle cycle = (PlanCycle)course.cycle();
				int hours = cycle.weekly(course);
				if(dates[0] != null && dates[0].compare(firstDay) < 0)
						dates[0] = null;
				if(dates[1] != null && dates[0].compare(lastDay) > 0)
					dates[1] = null;
				NSArray pdetails = EOUtilities.objectsMatchingKeyAndValue(ec,
						"PlanDetail","course", course);
				pdetails = EOSortOrdering.sortedArrayUsingKeyOrderArray(pdetails, detailsSorter);
		    	StringBuilder buf = new StringBuilder(3);
				if(pdetails != null && pdetails.count() > 0) {
					hours = (dates[0] == null)?-Math.abs(hours):0;
					NSTimestamp since = (dates[0]==null)? firstDay : dates[0];
					NSTimestamp to = (dates[1]==null)? lastDay : dates[1];
					for (int i = 0; i < pdetails.count(); i++) {
						EOEnterpriseObject pd = (EOEnterpriseObject)pdetails.objectAtIndex(i);
						EduPeriod per = (EduPeriod)pd.valueForKey("eduPeriod");
						if(EOPeriod.Utility.compareDates(per.end(), since) <= 0)
							continue;
						if(EOPeriod.Utility.compareDates(per.begin(), to) >= 0)
							break;
						Integer dHours = (Integer)pd.valueForKey("weekly");
						if(hours < 0) {
							hours = dHours.intValue();
							if(dates[0] == null) {
								//EOPeriod.Utility.compareDates(per.begin(), firstDay) < 0
								weekly += hours;
							} else {
								buf.append('+');
								change += hours;
							}
							buf.append(dHours);
						} else {
							int diff = dHours.intValue() - hours;
							if(diff > 0)
								buf.append('+');
							buf.append(diff);
							change += diff;
							hours = dHours.intValue();
						}
					} // for (details)
					if(hours <= 0)
						continue;
				} // has details
				NSMutableDictionary dict = new NSMutableDictionary(course,"course");
				if(dates[0] != null) {
			    	quals[0] = new EOKeyValueQualifier("date",
			    			EOQualifier.QualifierOperatorGreaterThanOrEqualTo,dates[0]);
			    	dict.takeValueForKey(new EOAndQualifier(new NSArray(quals)),"qual");
			    	NSMutableArray[] info = new NSMutableArray[days +1];
			    	cal.setTime(dates[0]);
			    	int fin = cal.get(Calendar.DAY_OF_YEAR) - firstDOY;
			    	if(fin < 0) fin += maxDOY;
			    	for (int i = 1; i <= fin; i++) {
						info[i] = clear;
					}
			    	dict.takeValueForKey(info, "info");
			    	if(buf.length() == 0) {
			    		buf.append('+').append(hours);
			    		change += hours;
			    	}
				} else {
			    	dict.takeValueForKey(monthQual,"qual");
			    	if(pdetails == null || pdetails.count() == 0)
			    		weekly += hours;
				}
				if(buf.length() > 0)
					dict.takeValueForKey(buf.toString(), "hours");
				else
					dict.takeValueForKey(new Integer(hours), "hours");
		    	details.addObject(dict);
    		} // courses enumeration
    	} // recent cources
    	quals[0] = teacherQual;
    	quals[1] = new EOKeyValueQualifier("date",
    			EOQualifier.QualifierOperatorGreaterThan,firstDay);
    	quals[0] = new EOAndQualifier(new NSArray(quals));
    	fs.setQualifier(quals[0]);
    	fs.setEntityName("TeacherChange");
    	list = ec.objectsWithFetchSpecification(fs);
     	
    	if(list != null && list.count() > 0) {   // changed courses
    		Enumeration enu = list.objectEnumerator();
    		while (enu.hasMoreElements()) {
				EOEnterpriseObject ct = (EOEnterpriseObject) enu.nextElement();
				NSTimestamp end = (NSTimestamp)ct.valueForKey("date");
				end = end.timestampByAddingGregorianUnits(0, 0, -1, 0, 0, 0);
				BaseCourse course = (BaseCourse) ct.valueForKey("course");
				PlanCycle cycle = (PlanCycle)course.cycle();
				if(!school.equals(cycle.school()))
					continue;
				if(section != null && !section.equals(cycle.section()))
					continue;
				NSMutableDictionary dict = new NSMutableDictionary(course,"course");
				int hours = cycle.weekly(course);
				ct = course.teacherChange(end, dates);
				if(ct == null)
					continue;
				NSTimestamp begin = dates[0];
				if(begin != null && begin.compare(lastDay) > 0)
					continue;

				StringBuilder buf = new StringBuilder(3);
				NSArray pdetails = EOUtilities.objectsMatchingKeyAndValue(ec,
						"PlanDetail","course", course);
				pdetails = EOSortOrdering.sortedArrayUsingKeyOrderArray(pdetails, detailsSorter);
				if(pdetails != null && pdetails.count() > 0) {
					hours = -Math.abs(hours);
					NSTimestamp since = (dates[0]==null)? firstDay : dates[0];
					NSTimestamp to = (dates[1]==null)? lastDay : dates[1];
					for (int i = 0; i < pdetails.count(); i++) {
						EOEnterpriseObject pd = (EOEnterpriseObject)pdetails.objectAtIndex(i);
						EduPeriod per = (EduPeriod)pd.valueForKey("eduPeriod");
						if(EOPeriod.Utility.compareDates(per.end(), since) <= 0)
							continue;
						if(EOPeriod.Utility.compareDates(per.begin(), to) >= 0)
							break;
						Integer dHours = (Integer)pd.valueForKey("weekly");
						if(hours < 0) {
							hours = dHours.intValue();
							if(begin == null || begin.compare(firstDay) < 0) {
								weekly += hours;
							} else {
								buf.append('+');
								change += hours;
							}
							buf.append(dHours);
						} else {
							int diff = dHours.intValue() - hours;
							if(diff > 0)
								buf.append('+');
							buf.append(diff);
							change += diff;
							hours = dHours.intValue();
						}
					} // for (details)
					if(hours <= 0)
						continue;
				} // has details

				NSMutableArray[] info = null;
				if(begin == null || begin.compare(firstDay) < 0) {
					begin = firstDay;
					if(pdetails == null || pdetails.count() == 0)
						weekly += hours;
				} else {
					info = new NSMutableArray[days +1];
			    	cal.setTime(begin);
			    	int fin = cal.get(Calendar.DAY_OF_YEAR) - firstDOY;
			    	if(fin < 0) fin += maxDOY;
			    	for (int i = fin; i > 0; i--) {
						info[i] = clear;
					}
			    	if(buf.length() == 0) {
			    		buf.append('+').append(hours);
				    	change += hours;
			    	}
				}
				if(end.compare(lastDay) > 0) {
					end = lastDay;
				} else {
					if(info == null)
						info = new NSMutableArray[days +1];
			    	cal.setTime(end);
			    	int fin = cal.get(Calendar.DAY_OF_YEAR) - firstDOY;
			    	if(fin < 0) fin += maxDOY;
			    	for (int i = fin +2; i < info.length; i++) {
						info[i] = clear;
					}
			    	change -= hours;
			    	if(hours > 0) {
			    		if(buf.length() == 0)
			    			buf.append(hours);
			    		buf.append('-').append(hours);
			    	}
				}
				if(buf.length() > 0)
					dict.takeValueForKey(buf.toString(), "hours");
				else
					dict.takeValueForKey(new Integer(hours), "hours");
		    	dict.takeValueForKey(info, "info");
		    	quals[0] = new EOKeyValueQualifier("date",
		    			EOQualifier.QualifierOperatorGreaterThanOrEqualTo,begin);
		    	quals[1] = new EOKeyValueQualifier("date",
		    			EOQualifier.QualifierOperatorLessThanOrEqualTo,end);
		    	dict.takeValueForKey(new EOAndQualifier(new NSArray(quals)),"qual");
		    	details.addObject(dict);
			} // changes enumeration
    	} //changed courses

    	if(details.count() > 1) {
           	NSArray sorter = new NSArray(new EOSortOrdering[] {
        			new EOSortOrdering("course.cycle",EOSortOrdering.CompareAscending),
        			new EOSortOrdering("course.eduGroup",EOSortOrdering.CompareAscending),
        			new EOSortOrdering("course.comment",EOSortOrdering.CompareAscending)});
           	EOSortOrdering.sortArrayUsingKeyOrderArray(details, sorter);
    	}
    	list = details.immutableClone();
    	BigDecimal[] totals = new BigDecimal[days + 1];  // grand total
    	totals[0] = BigDecimal.ZERO;
    	BigDecimal[] subsTotals = new BigDecimal[days + 1]; // substitutes total
		BigDecimal[] factorCounts = null; // current value group subtotal
    	BigDecimal[] extras = null;  // extra lessons total
    	NSMutableSet substitutes = new NSMutableSet();
    	NSMutableSet variations = new NSMutableSet();
    	NSMutableDictionary row = ((NSDictionary)application().valueForKeyPath(
    			"strings.RujelCurriculum_Curriculum.Tabel.grandTotal")).mutableClone();
    	row.setObjectForKey(totals, "values");
    	if(change == 0) {
    		row.takeValueForKey(new Integer(weekly), "hours");
    	} else {
    		StringBuilder buf = new StringBuilder(5);
    		buf.append(weekly);
    		if(change >= 0)
    			buf.append('+');
    		buf.append(change);
    		row.takeValueForKey(buf.toString(), "hours");
    	}
    	details = new NSMutableArray(row);
		NSMutableDictionary byCourse = new NSMutableDictionary();
// main courses
    	if(list.count() > 0) {
    		BigDecimal[] mainTotals = new BigDecimal[days + 1];
    		row = ((NSDictionary)application().valueForKeyPath(
				"strings.RujelCurriculum_Curriculum.Tabel.mainTotal")).mutableClone();
    		row.setObjectForKey(mainTotals, "values");
    		details.addObject(row);
    		String itemClass = (String)row.valueForKey("itemClass");
    		Enumeration coursEnu = list.objectEnumerator();
			NSArray sorter = new NSArray(new EOSortOrdering(Variation.VALUE_KEY,
					EOSortOrdering.CompareAscending));
    		while (coursEnu.hasMoreElements()) {
    			NSDictionary dict = (NSDictionary)coursEnu.nextElement();
				EduCourse course = (EduCourse) dict.valueForKey("course");
				row = new NSMutableDictionary(course,"course");
				row.takeValueForKey(course.eduGroup().name(), "eduGroup");
				row.takeValueForKey(course.subjectWithComment(),"subject");
				row.takeValueForKey(itemClass, "class");
				row.takeValueForKey(dict.valueForKey("hours"), "hours");
				BigDecimal[] allHours = new BigDecimal[days + 1];
	        	NSMutableArray[] info = (NSMutableArray[])dict.valueForKey("info");
				row.setObjectForKey(allHours, "values");
				quals[0] = (EOQualifier)dict.valueForKey("qual");
				quals[1] = new EOKeyValueQualifier("course",
						EOQualifier.QualifierOperatorEqual,course);
	    		fs.setEntityName(EduLesson.entityName);
				fs.setQualifier(new EOAndQualifier(new NSArray(quals)));
				fs.setSortOrderings(null);
				list = ec.objectsWithFetchSpecification(fs);
				if(list != null && list.count() > 0) {  //lessons
					Enumeration lEnu = list.objectEnumerator();
					while (lEnu.hasMoreElements()) {
						EduLesson lesson = (EduLesson) lEnu.nextElement();
						cal.setTime(lesson.date());
						list = (NSArray)lesson.valueForKey("substitutes");
						int day = cal.get(Calendar.DAY_OF_YEAR) - firstDOY +1;
						if(day < 0) day += maxDOY;
						if(list != null && list.count() > 0) {
							substitutes.addObjectsFromArray(list);
							if(info == null)
								info = new NSMutableArray[days +1];
							if(info[day] == null)
								info[day] = new NSMutableArray(lesson);
							else
								info[day].addObject(lesson);
						} else {
							addHoursToKey(null, BigDecimal.ONE, day, days, allHours);
							addHoursToKey(null, BigDecimal.ONE, day, days, mainTotals);
							addHoursToKey(null, BigDecimal.ONE, day, days, totals);
						}
					}
				} //lessons
				fs.setSortOrderings(sorter);
				fs.setEntityName(Variation.ENTITY_NAME);
				list = ec.objectsWithFetchSpecification(fs);
				if(list != null && list.count() > 0) {  //variations
					variations.addObjectsFromArray(list);
					if(info == null)
						info = new NSMutableArray[days +1];
					Enumeration vEnu = list.objectEnumerator();
					while (vEnu.hasMoreElements()) {
						Variation var = (Variation) vEnu.nextElement();
						int val = var.value().intValue();
						cal.setTime(var.date());
						int day = cal.get(Calendar.DAY_OF_YEAR) - firstDOY +1;
						if(day < 0) day += maxDOY;
						if(info[day] == null) {
							info[day] = new NSMutableArray(var);
						} else {
							if(val > 0) {
								EduLesson lesson = var.relatedLesson();
								if(lesson != null && info[day].containsObject(var.relatedLesson()))
									val = 0;
							}
							info[day].addObject(var);
						}
						if(val <= 0)
							continue;
						boolean toReturn = var.reason().namedFlags().flagForKey("toReturn");
						if(!toReturn)
							addHoursToKey(null, new BigDecimal(-val), day, days, mainTotals);
						Variation paired = var.getPaired();
						if(paired != null) {
							addHoursToKey(byCourse, BigDecimal.ONE, day, days, paired.course());
							if(factorCounts == null)
								factorCounts = new BigDecimal[days + 1];
							addHoursToKey(null, BigDecimal.ONE, day, days, factorCounts);
							if(!toReturn)
								addHoursToKey(null, BigDecimal.ONE, day, days, subsTotals);
						} else if(!toReturn) {
							if(extras == null)
								extras = new BigDecimal[days + 1];
							addHoursToKey(null, new BigDecimal(val), day, days, extras);
						}
					}
				} // variations
				row.takeValueForKey(info, "info");
	    		details.addObject(row);
			}
    	} // main courses
    	if(extras != null) {
    		row = ((NSDictionary)application().valueForKeyPath(
					"strings.RujelCurriculum_Curriculum.Tabel.extraLessons")).mutableClone();
			row.takeValueForKey(extras,"values");
			details.insertObjectAtIndex(row, 2);
//			details.addObject(row);
    	}
		row = ((NSDictionary)application().valueForKeyPath(
				"strings.RujelCurriculum_Curriculum.Tabel.subsTotal")).mutableClone();
		row.setObjectForKey(subsTotals, "values");
		String itemClass = (String)row.valueForKey("itemClass");
    	if(factorCounts != null) {
    		details.addObject(row);
    		row = ((NSDictionary)application().valueForKeyPath(
				"strings.RujelCurriculum_Curriculum.Tabel.varSub")).mutableClone();
			row.takeValueForKey(factorCounts,"values");
			details.addObject(row);
			appendCourses(byCourse, null, itemClass);
    	}
    	quals[0] = teacherQual;
    	quals[1] = monthQual;
    	quals[1] = new EOAndQualifier(new NSArray(quals));
    	fs.setEntityName(Substitute.ENTITY_NAME);
    	fs.setQualifier(quals[1]);
    	list = new NSArray(new EOSortOrdering(
    			Substitute.FACTOR_KEY,EOSortOrdering.CompareDescending));
    	fs.setSortOrderings(list);
    	list = ec.objectsWithFetchSpecification(fs);
    	if(list == null || list.count() == 0) {
    		journalZPU = JournalZPU.prepareJournalZPU(enu(substitutes), enu(variations),section);
    		return;
    	} else if(factorCounts == null) {
    		details.addObject(row);
    	}
    	substitutes.addObjectsFromArray(list);
		Enumeration enu = list.objectEnumerator();
		BigDecimal currFactor = null;
       	NSArray sorter = new NSArray(new EOSortOrdering[] {
    			new EOSortOrdering("cycle",EOSortOrdering.CompareAscending),
    			new EOSortOrdering("eduGroup",EOSortOrdering.CompareAscending),
    			new EOSortOrdering("teacher.person",EOSortOrdering.CompareAscending),
    			new EOSortOrdering("comment",EOSortOrdering.CompareAscending)});
       	while (enu.hasMoreElements()) { //
			Substitute sub = (Substitute) enu.nextElement();
			if(!school.equals(sub.valueForKeyPath("lesson.course.cycle.school")))
				continue;
			if(section != null && !section.equals(sub.valueForKeyPath(
					"lesson.course.cycle.section")))
				continue;
			BigDecimal factor = sub.factor();
			if(factor.compareTo(BigDecimal.ZERO) == 0)
				continue;
			cal.setTime(sub.lesson().date());
			int day = cal.get(Calendar.DAY_OF_YEAR) - firstDOY +1;
			if(day < 0) day += maxDOY;
			if(day < 0 || day > days)
				continue;
			if(!factor.equals(currFactor)) {
				if(byCourse.count() > 0)
					appendCourses(byCourse, sorter, itemClass);
				currFactor = factor;
				factorCounts = new BigDecimal[days + 1];
				row = new NSMutableDictionary("2","colspan");
				row.takeValueForKey("backfield2","class");
				row.takeValueForKey(sub.title() + " - " + MyUtility.formatDecimal(factor)
						, "subject");
				row.takeValueForKey(factorCounts,"values");
				details.addObject(row);
			}
			addHoursToKey(byCourse, BigDecimal.ONE, day, days, sub.lesson().course());
			addHoursToKey(null, BigDecimal.ONE, day, days, factorCounts);
			addHoursToKey(null, factor, day, days, subsTotals);
			addHoursToKey(null, factor, day, days, totals);
		} // substitutes
		if(byCourse.count() > 0)
			appendCourses(byCourse, sorter, itemClass);
		journalZPU = JournalZPU.prepareJournalZPU(enu(substitutes), enu(variations),section);
    }
    
    private void appendCourses(NSMutableDictionary byCourse,
    		NSArray sorter,String itemClass) {
    	NSArray list = byCourse.allKeys();
    	if(sorter == null)
    		list = EOSortOrdering.sortedArrayUsingKeyOrderArray(list, EduCourse.sorter);
    	else
    		list = EOSortOrdering.sortedArrayUsingKeyOrderArray(list, sorter);
    	Enumeration enu = list.objectEnumerator();
    	while (enu.hasMoreElements()) {
			EduCourse course = (EduCourse) enu.nextElement();
			PlanCycle cycle = (PlanCycle)course.cycle();
			int hours = cycle.weekly(course);
			NSMutableDictionary row = new NSMutableDictionary(course,"course");
			row.takeValueForKey("<span style = \"color:#999999;\">"
					+ hours + "</span>", "hours");
			row.takeValueForKey(course.eduGroup().name(), "eduGroup");
			row.takeValueForKey(Person.Utility.fullName(course.teacher(), true, 2, 1, 1),
					(sorter==null)?"hover":"subject");
			if(sorter == null)
				row.takeValueForKey(course.subjectWithComment(),"subject");
			else
				row.takeValueForKey(course.cycle().subject(),"hover");
//			row.takeValueForKey(course.cycle().subject(),"hover");
			row.takeValueForKey(itemClass, "class");
    		row.setObjectForKey(byCourse.objectForKey(course), "values");
    		details.addObject(row);
		}
    	byCourse.removeAllObjects();
    }
    
	public WOActionResults selectTeacher() {
		WOComponent selector = TeacherSelector.selectorPopup(this, "currTeacher", ec);
		selector.takeValueForKeyPath(section, "dict.presenterBindings.section");
		return selector;
	}
	
	public String value() {
		if(item == null && index!=null) {
			Calendar cal = Calendar.getInstance();
			cal.setTime((NSTimestamp)currMonth.valueForKey("beginDate"));
			cal.add(Calendar.DATE, index.intValue());
			if(cal.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY) {
				StringBuilder buf = new StringBuilder("<span style = \"color:#cc0000;\">");
				buf.append(cal.get(Calendar.DATE)).append("</span>");
				return buf.toString();
			}
			return Integer.toString(cal.get(Calendar.DATE));
		}
		BigDecimal[] values = (BigDecimal[])((NSDictionary)item).valueForKey("values");
		if(values == null)
			return Integer.toString(index.intValue() + 1);
		BigDecimal value = values[(index == null)?0:index.intValue() +1];
		NSArray[] infos = (NSArray[])((NSDictionary)item).valueForKey("info");
		boolean info = (index != null && infos != null && infos[index.intValue() +1] != null
				&& infos[index.intValue() +1].count() > 0);
		if(value == null)
			return (info)?"*":null;
		return (info)? MyUtility.formatDecimal(value) + '*' : MyUtility.formatDecimal(value);
	}
	
	public String cellHover() {
		if(item == null || index == null)
			return null;
		NSArray[] values = (NSArray[])((NSDictionary)item).valueForKey("info");
		if(values == null || values[index.intValue() +1] == null ||
				values[index.intValue() +1].count() == 0)
			return null;
		StringBuilder buf = new StringBuilder();
		Enumeration enu = values[index.intValue() +1].objectEnumerator();
		while (enu.hasMoreElements()) {
			Object obj = enu.nextElement();
			if(obj instanceof EduLesson)
				buf.append(Substitute.subsTitleForLesson((EduLesson)obj)).append('\n');
			else if(obj instanceof Variation) {
				Variation var = (Variation)obj;
				if(var.value().intValue() > 0) {
					if(var.reason().namedFlags().flagForKey("toReturn"))
						buf.append(session().valueForKeyPath(
								"strings.RujelCurriculum_Curriculum.Reason.toReturn"));
					else
						buf.append('+').append(var.value());
				} else {
					buf.append(var.value());
				}
				buf.append(" : ").append(var.reason().title());
				if(var.getPaired() != null) {
					EduCourse bc = var.relatedLesson().course();
					if(bc == var.course()) {
						bc = var.getPaired().course();
					}
					buf.append(' ').append('(');
					buf.append(session().valueForKeyPath(
							"strings.RujelCurriculum_Curriculum.Substitute.Substitute"));
					String subj = (bc == null)?"???":bc.cycle().subject();
					buf.append(':').append(' ').append(subj).append(')');
				}
				buf.append('\n');
			}
		}
		return WOMessage.stringByEscapingHTMLAttributeValue(buf.toString());
	}
	
	public String cellClass() {
		if(item == null || index == null)
			return null;
		NSArray[] values = (NSArray[])((NSDictionary)item).valueForKey("info");
		if(values != null && values[index.intValue() +1] != null &&
				values[index.intValue() +1].count() == 0)
			return "green";
		return null;
	}
	
	public String sum() {
		index = null;
		return value();
	}
	
	public WOActionResults openCourse() {
		Object course = item.valueForKey("course");
		if(course == null)
			return null;
		WOComponent page = pageWithName("LessonNoteEditor");
		page.takeValueForKey(course, "course");
		session().takeValueForKey(this, "pushComponent");
		return page;
	}
	
	protected static Enumeration enu(Object collection) {
		if(collection instanceof NSSet && ((NSSet)collection).count() > 0) {
			return ((NSSet)collection).objectEnumerator();
		} else if(collection instanceof NSArray && ((NSArray)collection).count() > 0) {
			return ((NSArray)collection).objectEnumerator();
		}
		return null;
	}
	
	public WOActionResults exportTeacherZPU() {
    	StringBuilder buf = new StringBuilder("journalT");
    	buf.append(currMonth.valueForKey("year"));
    	int month = ((Integer)currMonth.valueForKey("month")).intValue();
    	month++;
    	if(month < 10)
    		buf.append('0');
    	buf.append(month);
		return JournalZPU.exportJournalZPU(journalZPU,context(),buf.toString());
	}
	
	protected NSArray fullZPU() {
		NSMutableArray quals = monthQual();
		quals.addObject(new EOKeyValueQualifier("reason.school",
				EOQualifier.QualifierOperatorEqual, session().valueForKey("school")));
		if(!Various.boolForObject(options.valueForKey("unsubmittedZPU")))
			quals.addObject(new EOKeyValueQualifier("reason.verification",
					EOQualifier.QualifierOperatorNotEqual,NullValue));
    	EOFetchSpecification fs = new EOFetchSpecification(Substitute.ENTITY_NAME,
    			new EOAndQualifier(quals),null);
    	fs.setRefreshesRefetchedObjects(true);
    	NSArray substitutes = ec.objectsWithFetchSpecification(fs);
    	// Variations
    	fs.setEntityName(Variation.ENTITY_NAME);
    	if(!Various.boolForObject(options.valueForKey("includeAdded"))) {
    		quals.addObject(new EOKeyValueQualifier(Variation.VALUE_KEY,
    				EOQualifier.QualifierOperatorLessThanOrEqualTo,new Integer(0)));
    		fs.setQualifier(new EOAndQualifier(quals));
    	}
    	NSArray variations = ec.objectsWithFetchSpecification(fs);
    	return JournalZPU.prepareJournalZPU(enu(substitutes), enu(variations),section);
	}
	
	public WOActionResults showFullZPU() {
     	WOComponent result = pageWithName("JournalZPU");
    	result.takeValueForKey(currMonth, "currMonth");
//    	result.takeValueForKey(currTeacher, "currTeacher");
    	result.takeValueForKey(fullZPU(), "journalZPU");
    	return result;
	}
	
	public WOActionResults exportFullZPU() {
	   	StringBuilder buf = new StringBuilder("Journal");
    	buf.append(currMonth.valueForKey("year"));
    	int month = ((Integer)currMonth.valueForKey("month")).intValue();
    	month++;
    	if(month < 10)
    		buf.append('0');
    	buf.append(month);
		return JournalZPU.exportJournalZPU(fullZPU(),context(),buf.toString());
	}
	
	public WOActionResults applyDates() {
		currMonth.takeValueForKey(Boolean.TRUE, "manual");
		int idx = months.indexOfIdenticalObject(currMonth);
		Integer year = (Integer)currMonth.valueForKey("year");
		Integer month = (Integer)currMonth.valueForKey("month");
		Calendar cal = Calendar.getInstance();
		// process beginDate
		cal.setTime((NSTimestamp)currMonth.valueForKey("beginDate"));
		if(cal.get(Calendar.MONTH) == month.intValue() || 
				month.intValue() - cal.get(Calendar.MONTH) == 1) {
			cal.set(Calendar.YEAR, year.intValue());
		} else if(month.intValue() == Calendar.JANUARY && 
				cal.get(Calendar.MONTH) == Calendar.DECEMBER) {
			cal.set(Calendar.YEAR, year.intValue() -1);
		} else {
			cal.set(Calendar.YEAR, year.intValue());
			cal.set(Calendar.MONTH,month.intValue());
			cal.set(Calendar.DATE, 1);
		}
		currMonth.takeValueForKey(new NSTimestamp(cal.getTimeInMillis()), "beginDate");
		if(idx > 0) {
			cal.add(Calendar.DATE, -1);
			NSMutableDictionary mDict = (NSMutableDictionary)months.objectAtIndex(idx -1);
			mDict.takeValueForKey(new NSTimestamp(cal.getTimeInMillis()), "endDate");
		}
		// process endDate
		cal.setTime((NSTimestamp)currMonth.valueForKey("endDate"));
		if(cal.get(Calendar.MONTH) == month.intValue() || 
				month.intValue() - cal.get(Calendar.MONTH) == -1) {
			cal.set(Calendar.YEAR, year.intValue());
		} else if(month.intValue() == Calendar.DECEMBER && 
				cal.get(Calendar.MONTH) == Calendar.JANUARY) {
			cal.set(Calendar.YEAR, year.intValue() +1);
		} else {
			cal.set(Calendar.YEAR, year.intValue());
			cal.set(Calendar.MONTH,month.intValue());
			cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));
		}
		currMonth.takeValueForKey(new NSTimestamp(cal.getTimeInMillis()), "endDate");
		if(idx > 0 && idx < months.count() -1) {
			cal.add(Calendar.DATE, 1);
			NSMutableDictionary mDict = (NSMutableDictionary)months.objectAtIndex(idx +1);
			mDict.takeValueForKey(new NSTimestamp(cal.getTimeInMillis()), "beginDate");
		}
		go();
		return null;
	}
	
	public WOActionResults noSection() {
		section = null;
		go();
		if(sectionName != null)
			sectionName = (String)session().valueForKeyPath("strings.RujelBase_Base.noLimit");
		return null;
	}
	
	public void setSection(Integer sect) {
		section = sect;
		if(sectionName != null) {
			updateSectionName();
		}
		go();
	}
	
	public void updateSectionName() {
		if(section == null) {
			sectionName = (String)session().valueForKeyPath("strings.RujelBase_Base.noLimit");
			return;
		}
		NSArray sections = (NSArray)session().valueForKeyPath("strings.sections.list");
		if(sections == null)
			return;
		Enumeration enu = sections.objectEnumerator();
		sectionName = null;
		while (enu.hasMoreElements()) {
			NSDictionary dict = (NSDictionary) enu.nextElement();
			if(section.equals(dict.valueForKey("idx"))) {
				sectionName = (String)dict.valueForKey("value");
				return;
			}
			if(sectionName == null)
				sectionName = (String)session().valueForKeyPath(
						"strings.RujelEduPlan_EduPlan.sections.sections");
		}
	}
	
	public String noneSectionClass() {
		if(section == null)
			return "selection";
		return "grey";
	}
}