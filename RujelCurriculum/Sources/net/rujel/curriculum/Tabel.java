package net.rujel.curriculum;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.GregorianCalendar;

import net.rujel.interfaces.EduLesson;
import net.rujel.interfaces.Person;
import net.rujel.interfaces.Teacher;
import net.rujel.reusables.SessionedEditingContext;
import net.rujel.reusables.SettingsReader;
import net.rujel.reusables.Export;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOAndQualifier;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOFetchSpecification;
import com.webobjects.eocontrol.EOKeyValueQualifier;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.*;

// Generated by the WOLips Templateengine Plug-in at May 13, 2009 2:56:05 PM
public class Tabel extends com.webobjects.appserver.WOComponent {
	
	public EOEditingContext ec;
	public NSArray months;
	public NSDictionary currMonth;
	public Object item;
	
    public Tabel(WOContext context) {
        super(context);
        ec = new SessionedEditingContext(context.session());
        Calendar cal = Calendar.getInstance();
        cal.setTime((NSTimestamp)session().valueForKey("today"));
//        currMonth = new NSMutableDictionary(cal,"cal");
        int cmi = cal.get(Calendar.MONTH);
        NSArray monthNames = (NSArray)application().valueForKeyPath(
        		"strings.Reusables_Strings.presets.monthLong");
//        currMonth.takeValueForKey(monthNames.objectAtIndex(cmi), "name");
        cal.set(Calendar.YEAR, ((Number)session().valueForKey("eduYear")).intValue());
        cal.set(Calendar.MONTH,
        		SettingsReader.intForKeyPath("edu.newYearMonth",GregorianCalendar.JULY));
        NSDictionary[] mns = new NSDictionary[12 + 
                  ((SettingsReader.intForKeyPath("edu.newYearDay",1) > 1)?1:0)];
        for (int i = 0; i < mns.length; i++) {
        	int m = cal.get(Calendar.MONTH);
			mns[i] = new NSDictionary(new Object[] {
					new Integer(cal.get(Calendar.YEAR)), new Integer(m)
						,monthNames.objectAtIndex(m)}
			,new Object[] { "year", "month", "name" });
			if(m == cmi)
				currMonth = mns[i];
			cal.add(Calendar.MONTH, 1);
		}
        months = new NSArray(mns);
    }
    
    public String title() {
    	return (String)application().valueForKeyPath(
    			"strings.RujelCurriculum_Curriculum.Tabel.title");
    }
    
    protected static void addHousToTeacher(NSMutableDictionary dict, 
    		BigDecimal hours, int day, int maxday, Teacher teacher) {
    	BigDecimal[] byTeacher = (BigDecimal[]) dict.objectForKey(teacher);
    	if(byTeacher ==  null) {
    		byTeacher = new BigDecimal[maxday];
    		dict.setObjectForKey(byTeacher, teacher);
    	}
    	day--;
    	if(byTeacher[day] == null) {
    		byTeacher[day] = hours;
    	} else {
    		byTeacher[day] = byTeacher[day].add(hours);
    	}
    }
    
    public WOActionResults export() {
    	Calendar cal = Calendar.getInstance();
    	cal.set(Calendar.YEAR, ((Integer)currMonth.valueForKey("year")).intValue());
    	cal.set(Calendar.MONTH, ((Integer)currMonth.valueForKey("month")).intValue());
    	cal.set(Calendar.DAY_OF_MONTH, 1);
    	EOQualifier quals[] = new EOQualifier[2];
    	quals[0] = new EOKeyValueQualifier("date",
    			EOQualifier.QualifierOperatorGreaterThanOrEqualTo,
    			new NSTimestamp(cal.getTimeInMillis()));
    	int days = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
    	cal.set(Calendar.DAY_OF_MONTH, days);
    	quals[1] = new EOKeyValueQualifier("date",
    			EOQualifier.QualifierOperatorLessThanOrEqualTo,
    			new NSTimestamp(cal.getTimeInMillis()));
    	quals[0] = new EOAndQualifier(new NSArray(quals));
    	EOFetchSpecification fs = new EOFetchSpecification(
    			Substitute.ENTITY_NAME,quals[0],null);
    	fs.setRefreshesRefetchedObjects(true);
    	ec.objectsWithFetchSpecification(fs);
    	fs.setEntityName(EduLesson.entityName);
//    	NSArray list = new NSArray(new String[] {"substitutes.teacher","course.teacher"});
//    	fs.setPrefetchingRelationshipKeyPaths(list);
    	NSArray list = ec.objectsWithFetchSpecification(fs);
    	
    	NSMutableDictionary byTeacher = new NSMutableDictionary();
    	Enumeration enu = list.objectEnumerator();
    	while (enu.hasMoreElements()) {
			EduLesson lesson = (EduLesson) enu.nextElement();
			cal.setTime(lesson.date());
			NSArray subs = (NSArray)lesson.valueForKey("substitutes");
			if(subs != null && subs.count() > 0) {
				Enumeration sEnu = subs.objectEnumerator();
				while (sEnu.hasMoreElements()) {
					Substitute sub = (Substitute) sEnu.nextElement();
					addHousToTeacher(byTeacher, sub.factor(), 
							cal.get(Calendar.DAY_OF_MONTH), days, sub.teacher());
				}
			} else {
				addHousToTeacher(byTeacher, BigDecimal.ONE, 
						cal.get(Calendar.DAY_OF_MONTH), days, lesson.course().teacher());
			}
		}
    	list = EOSortOrdering.sortedArrayUsingKeyOrderArray(
    			byTeacher.allKeys(),Person.sorter);
    	
    	StringBuilder buf = new StringBuilder("tabel");
    	buf.append(currMonth.valueForKey("year"));
    	int month = ((Integer)currMonth.valueForKey("month")).intValue();
    	month++;
    	if(month < 10)
    		buf.append('0');
    	buf.append(month);
    	Export exportPage = new Export(context(),buf.toString());
    	
    	exportPage.beginRow();
    	exportPage.addValue(currMonth.valueForKey("name"));
		for (int i = 1; i <= days; i++) {
			exportPage.beginValue();
			exportPage.response().appendContentString(Integer.toString(i));
			exportPage.endValue();
		}
		exportPage.endRow();
    	
    	NSNumberFormatter formatter = new NSNumberFormatter();
    	formatter.setDecimalSeparator(",");
    	formatter.setThousandSeparator(" ");
    	enu = list.objectEnumerator();
    	while (enu.hasMoreElements()) {
			Teacher teacher = (Teacher) enu.nextElement();
			exportPage.beginRow();
			exportPage.addValue(Person.Utility.fullName(teacher, true, 2, 1, 1));
			BigDecimal[] allHours = (BigDecimal[]) byTeacher.objectForKey(teacher); 
			for (int i = 0; i < days; i++) {
				BigDecimal value = allHours[i];
				if(value != null) {
					try {
						value = value.setScale(0);
					} catch (ArithmeticException e) {
						value = value.stripTrailingZeros();
					}
				}
				exportPage.addValue(formatter.format(value));
			}
			exportPage.endRow();
		}
    	return exportPage;
    }
}