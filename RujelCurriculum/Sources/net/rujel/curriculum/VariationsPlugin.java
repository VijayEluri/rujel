//VariationsPlugin.java: Class file for WO Component 'VariationsPlugin'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.curriculum;

import java.util.Calendar;
import java.util.Enumeration;

import net.rujel.base.SettingsBase;
import net.rujel.eduplan.*;
import net.rujel.interfaces.EduCourse;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOAndQualifier;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.eocontrol.EOFetchSpecification;
import com.webobjects.eocontrol.EOKeyValueQualifier;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.*;

// Generated by the WOLips Templateengine Plug-in at Feb 10, 2009 3:17:25 PM
public class VariationsPlugin extends com.webobjects.appserver.WOComponent {
//    protected EduCourse _course;
	public NSDictionary planFact;

	public VariationsPlugin(WOContext context) {
        super(context);
    }

/*	public EduCourse course() {
		if(_course == null) {
			_course = (EduCourse)valueForBinding("course");
		}
		return _course;
	}*/
	
    public void appendToResponse(WOResponse aResponse, WOContext aContext) {
    	NSTimestamp today = (NSTimestamp)session().valueForKey("today");
    	EduCourse course = (EduCourse)valueForBinding("course");
    	
    	planFact = planFact(course, today);
    	super.appendToResponse(aResponse, aContext);
    }
	

	
	public WOActionResults popup() {
		WOComponent popup = pageWithName("VariationsList");
		popup.takeValueForKey(valueForBinding("course"), "course");
		popup.takeValueForKey(context().page(), "returnPage");
//		popup.takeValueForKey(valueForBinding("currLesson"), "currLesson");
//		popup.takeValueForKey(valueForBinding("currTab"), "currTab");
		//popup.takeValueForKey(planFact, "planFact");
		return popup;
	}

	public boolean isStateless() {
		return true;
	}
	
	public boolean synchronizesVariablesWithBindings() {
		return false;
	}
	
	public void reset() {
		planFact = null;
//		_course = null;	
		super.reset();
	}
	
	public static NSDictionary planFact(EduCourse course, NSTimestamp date) {
		int plan = 0;
		int maxDev = 0;
		int days = 0;
		int weeks = 0;
		int extraDays = 0;
		int active = 2;
		boolean exclude = false;
		EOEditingContext ec = course.editingContext();
		int weekDays = SettingsBase.numericSettingForCourse(EduPeriod.ENTITY_NAME, course, ec,7);
	
		String listName = SettingsBase.stringSettingForCourse(EduPeriod.ENTITY_NAME, course, ec);
		if(date != null) {
			active = EduPeriod.dayState(date, ec, listName);
			if(active==0) {
				Calendar cal = Calendar.getInstance();
				cal.setTime(date);
				exclude = (cal.get(Calendar.HOUR_OF_DAY) == 0);
			}
		}
		NSArray list = EOUtilities.objectsMatchingKeyAndValue(ec,
				"PlanDetail","course", course);
		if(list != null && list.count() > 0) {
			Enumeration enu = list.objectEnumerator();
			while (enu.hasMoreElements()) {
				EOEnterpriseObject pd = (EOEnterpriseObject) enu.nextElement();
				Integer hours = (Integer)pd.valueForKey("hours");
				if(hours == null || hours.intValue() == 0)
					continue;
				EduPeriod per = (EduPeriod)pd.valueForKey("eduPeriod");
				if(date == null || date.compare(per.end()) > 0) {
					days += per.daysInPeriod(null,listName);
					plan += hours.intValue();
				} else if(date.compare(per.begin()) > 0) {
					hours = (Integer)pd.valueForKey("weekly");
					if(hours == null || hours.intValue() == 0)
						continue;
					int perDays = per.daysInPeriod(date,listName);
					if(active == 0 && perDays > 0)
						perDays--;
					days += perDays;
					int perWeeks = perDays/weekDays;
					maxDev = hours.intValue();
					plan += perWeeks*maxDev;
					if (perDays > 0) {
						extraDays = perDays % weekDays;
						if (active == 0 && !exclude)
							extraDays++;
					}
				}
				if(maxDev == 0)
					active = 2;
				weeks = days/weekDays;
			}
		} else {
			days = EduPeriod.daysForList(listName, date, ec);
			if(active == 0 && days > 0)
				days--;
			else if(active == 2) {
				EOQualifier[] quals = new EOQualifier[2];
				quals[0] = new EOKeyValueQualifier("period.end",
						EOQualifier.QualifierOperatorGreaterThanOrEqualTo,date);
				quals[1] = new EOKeyValueQualifier("listName",
						EOQualifier.QualifierOperatorEqual,listName);
				quals[0] = new EOAndQualifier(new NSArray(quals));
				EOFetchSpecification fs = new EOFetchSpecification("PeriodList",quals[0],null);
				fs.setFetchLimit(1);
				list = ec.objectsWithFetchSpecification(fs);
				if(list == null || list.count() == 0)
					active = 3;
			}
			weeks = days/weekDays;
			extraDays = days%weekDays;
			PlanCycle cl = (PlanCycle)course.cycle();
			maxDev = cl.weeklyHours(course.eduYear())[0];
			if(active < 3) {
				plan = weeks*maxDev;
				if(active == 0 && !exclude)
					extraDays++;
			} else {
				plan = cl.hours().intValue();
			}
		}

		NSMutableDictionary result = new NSMutableDictionary();
		result.takeValueForKey(new Integer(plan), "plan");
		result.takeValueForKey(new Integer(maxDev), "maxDeviation");
		result.takeValueForKey(new Integer(extraDays), "extraDays");
		result.takeValueForKey(new Integer(weeks), "weeks");

		if(plan + extraDays == 0)
			return result;
		list = Variation.variations(course, null, date);
		int plus = 0;
		int minus = 0;
//		boolean verifiedOnly = SettingsReader.boolForKeyPath("ignoreUnverifiedReasons", false);
		int verifiedOnly = SettingsBase.numericSettingForCourse("ignoreUnverifiedReasons", course, ec, 0);
		if(list != null && list.count() > 0) {
			Enumeration enu = list.objectEnumerator();
			while (enu.hasMoreElements()) {
				Variation var = (Variation) enu.nextElement();
				int value = var.value().intValue();
					if(verifiedOnly > 0 && var.reason().unverified())
						continue;
					if (value > 0)
						plus += value;
					else
						minus -= value;
			}
			result.takeValueForKey(new Integer(plus), "plus");
			result.takeValueForKey(new Integer(minus), "minus");
			result.takeValueForKey(new Integer(plus - minus), "netChange");
		}		
		int fact = factOnDate(course, date,exclude);
		if(fact < 0)
			return result;
		else
			result.takeValueForKey(new Integer(fact), "fact");
		
		int deviation = fact - (plan + plus - minus);
		result.takeValueForKey(new Integer(deviation), "deviation");
		if(deviation < 0) {
			result.takeValueForKey(new Integer(deviation), "result");
			result.takeValueForKey("warning", "styleClass");
		} else if(deviation > maxDev) {
			result.takeValueForKey(new Integer(deviation - maxDev), "result");
			result.takeValueForKey("highlight2", "styleClass");
		} else {
			result.takeValueForKey(new Integer(0), "result");
			result.takeValueForKey("gerade", "styleClass");
		}
//		if(result.valueForKey("weekend") == Boolean.TRUE)
//			result.takeValueForKey(new Integer(plan + hours), "nextPlan");
		return result;
	}
	
	public static int factOnDate(EduCourse course, NSTimestamp date,boolean exclude) {
		NSArray list = course.lessons();
		if(list != null && list.count() > 0) {
			if (date != null) {
				if (exclude)
					date = date.timestampByAddingGregorianUnits(0, 0, -1, 0, 0,
							0);
				EOQualifier dateQual = new EOKeyValueQualifier("date",
						EOQualifier.QualifierOperatorLessThanOrEqualTo, date);
				list = EOQualifier.filteredArrayWithQualifier(list, dateQual);
			}
			if(list != null) {
				return list.count();
			}
		} else {
			return -1;
		}
		return 0;
	}
}