// ShowSubstitute.java

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.curriculum;

import net.rujel.interfaces.*;

import com.webobjects.appserver.*;
import com.webobjects.foundation.NSKeyValueCoding;
import com.webobjects.appserver.WOActionResults;

// Generated by the WOLips Templateengine Plug-in at Sep 30, 2008 12:18:15 PM
public class ShowSubstitute extends com.webobjects.appserver.WOComponent {
    public ShowSubstitute(WOContext context) {
        super(context);
    }
    
    protected NSKeyValueCoding _dict;
    public NSKeyValueCoding dict() {
    	if(_dict == null)
    		_dict = (NSKeyValueCoding)valueForBinding("extention");
    	return _dict;
    }
    
    public Substitute substitute() {
    	return (Substitute)dict().valueForKey("substitute");
    }
    
    protected EduCourse _course;
    public EduCourse eduCourse() {
    	if(_course == null) {
    		EduLesson lesson = (EduLesson)valueForBinding("lesson");
    		_course = lesson.course();
    	}
    	return _course;
    }
    
    public String substitutor() {
    	Substitute sub = substitute();
    	if(sub == null || sub.teacher() == eduCourse().teacher())
    		return null;
    	return Person.Utility.fullName(sub.teacher(), true, 2, 1, 1);
    }
    /*
	public String insteadof() {
    	Substitute sub = substitute();
    	if(sub == null || sub.eduCourse() == eduCourse())
    		return null;
		StringBuffer buf = new StringBuffer((String)
				application().valueForKeyPath("strings.RujelCurriculum_Curriculum.Instead"));
		buf.append(':').append(' ');
		if(sub.eduCourse() == null)
			buf.append(application().valueForKeyPath("strings.RujelCurriculum_Curriculum.noSubject"));
		else
			buf.append(sub.eduCourse().cycle().subject());
		return buf.toString();
	}*/
   
	public boolean isStateless() {
		return true;
	}
	
	public boolean synchronizesVariablesWithBindings() {
		return false;
	}
	
	public void reset() {
		super.reset();
		_dict = null;
		_course = null;
	}
	
	public Boolean cantEdit() {
		if(substitute() == null)
			return (Boolean)session().valueForKeyPath("readAccess._create.Substitute");
		else
			return (Boolean)session().valueForKeyPath("readAccess._edit.substitute");
	}

	public WOActionResults edit() {
		WOComponent editor = pageWithName("EditSubstitute");
		editor.takeValueForKey(context().page(), "returnPage");
		editor.takeValueForKey(valueForBinding("lesson"), "lesson");	
		editor.takeValueForKey(substitute(), "substitute");
		return editor;
	}
	
	public String cellClass() {
		if(substitute() == null)
			return "grey";
		else
			return "gerade";
	}
/*
	public String subsTitle() {
		if(Various.boolForObject(valueForKeyPath("substitute.sFlags.join")))
			return (String)application().valueForKeyPath("strings.RujelCurriculum_Curriculum.Join");
		return (String)application().valueForKeyPath("strings.RujelCurriculum_Curriculum.Substitute");
	}*/
}