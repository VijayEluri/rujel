// PrintCurriculum.java: Class file for WO Component 'PrintCurriculum'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.curriculum;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Enumeration;

import net.rujel.interfaces.*;
import net.rujel.reusables.Period;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;

// Generated by the WOLips Templateengine Plug-in at Jun 28, 2009 12:38:19 PM
public class PrintCurriculum extends com.webobjects.appserver.WOComponent {
	
	public EduCourse course;
	public Period period;
	public NSArray variations;
	public NSArray substitutes;
	public NSArray reasons;
	
	public NSDictionary planFact;
	public Integer deviation;
	public Object item;
	
    public PrintCurriculum(WOContext context) {
        super(context);
    }
    
    public void appendToResponse(WOResponse aResponse, WOContext aContext) {
    	// prepare variations;
		NSTimestamp begin = null;
		NSTimestamp end = null;
		if(period != null) {
			Date date = period.begin();
			if(date instanceof NSTimestamp)
				begin = (NSTimestamp)date;
			else
				begin = new NSTimestamp(date);
			date = period.end();
			if(date instanceof NSTimestamp)
				end = (NSTimestamp)date;
			else
				end = new NSTimestamp(date);
		}
		variations = Variation.variations(course, begin, end);
		NSMutableSet rSet = new NSMutableSet();
		Enumeration enu;
		if (variations != null && variations.count() > 0) {
			enu = variations.objectEnumerator();
			while (enu.hasMoreElements()) {
				Variation var = (Variation) enu.nextElement();
				rSet.addObject(var.reason());
			}
		} // end prepare variations
		
		// prepare substitutes
    	EOQualifier qual = new EOKeyValueQualifier("course",
    			EOQualifier.QualifierOperatorEqual,course);
    	if(period != null) {
    		NSMutableArray quals = new NSMutableArray(qual);
     		qual = new EOKeyValueQualifier("date",
    				EOQualifier.QualifierOperatorGreaterThanOrEqualTo,begin);
    		quals.addObject(qual);
    		qual = new EOKeyValueQualifier("date",
    				EOQualifier.QualifierOperatorLessThanOrEqualTo,end);
    		quals.addObject(qual);
    		qual = new EOAndQualifier(quals);
    	}
    	EOFetchSpecification fs = new EOFetchSpecification
    						(EduLesson.entityName,qual,EduLesson.sorter);
    	NSArray list = course.editingContext().objectsWithFetchSpecification(fs);
    	if(list != null && list.count() != 0) {
    		enu = list.objectEnumerator();
    		NSMutableArray result = new NSMutableArray();
    		while (enu.hasMoreElements()) {
    			EduLesson lesson = (EduLesson) enu.nextElement();
    			NSArray subs = (NSArray)lesson.valueForKey("substitutes");
    			if(subs == null || subs.count() == 0)
    				continue;
    			for (int i = 0; i < subs.count(); i++) {
    				Substitute sub = (Substitute)subs.objectAtIndex(i);
    				NSMutableDictionary dict = new NSMutableDictionary(Person.Utility.
    						fullName(sub.teacher(), true, 2, 2, 2), "teacher");
    				BigDecimal factor = sub.factor().stripTrailingZeros();
    				if(factor.scale() < 0)
    					factor.setScale(0);
    				dict.takeValueForKey(factor.toString(),"factor");
    				dict.takeValueForKey(sub.reason(), "reason");
    				if(sub.reason().unverified())
    					dict.takeValueForKey("font-style:italic;", "reasonStyle");
    				if(i==0) {
    					dict.takeValueForKey(lesson.date(), "date");
    					if(subs.count() > 1)
    						dict.takeValueForKey(Integer.toString(subs.count()), "rowspan");
    				}
    				rSet.addObject(sub.reason());
    				result.addObject(dict);
    			}
    		}
    		substitutes = result.immutableClone();
    	} // end prepare substitutes
    	
    	if (rSet.count() > 0) {
			reasons = rSet.allObjects();
			if (reasons.count() > 1)
				reasons = EOSortOrdering.sortedArrayUsingKeyOrderArray
														(reasons,EOPeriod.sorter);
		}
    	planFact = VariationsPlugin.planFact(course, null);
    	Integer plan = (Integer)planFact.valueForKey("plan");
    	Integer fact = (Integer)planFact.valueForKey("fact");
    	if(plan != null && fact != null)
    		deviation = new Integer(fact.intValue() - plan.intValue());
		super.appendToResponse(aResponse, aContext);
    }

    public String reasonStyle() {
    	if(item instanceof NSDictionary)
    		return (String)((NSDictionary)item).valueForKey("reasonStyle");
    	boolean unverified = false;
    	if(item instanceof Reason.Event) {
    		unverified = ((Reason.Event)item).reason().unverified();
     	} else if (item instanceof Reason) {
     		unverified = ((Reason)item).unverified();
     	}
    	return (unverified)?"font-style:italic;":null;
	}

}