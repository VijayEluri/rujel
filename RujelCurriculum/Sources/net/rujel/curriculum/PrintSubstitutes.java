// PrintSubstitutes.java: Class file for WO Component 'PrintSubstitutes'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.curriculum;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Enumeration;

import net.rujel.base.MyUtility;
import net.rujel.interfaces.EduCourse;
import net.rujel.interfaces.EduLesson;
import net.rujel.interfaces.Person;
import net.rujel.reusables.Period;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOAndQualifier;
import com.webobjects.eocontrol.EOFetchSpecification;
import com.webobjects.eocontrol.EOKeyValueQualifier;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;
import com.webobjects.foundation.NSTimestamp;

// Generated by the WOLips Templateengine Plug-in at Jun 27, 2009 1:50:01 PM
public class PrintSubstitutes extends com.webobjects.appserver.WOComponent {
	
	public EduCourse course;
	public Period period;
	public NSArray list;
	public NSMutableDictionary item;
	
    public PrintSubstitutes(WOContext context) {
        super(context);
    }
    
    public NSArray list() {
    	if(list != null)
    		return list;
    	EOQualifier qual = new EOKeyValueQualifier("course",
    			EOQualifier.QualifierOperatorEqual,course);
    	if(period != null) {
    		NSMutableArray quals = new NSMutableArray(qual);
    		Date date = period.begin();
    		if(!(date instanceof NSTimestamp))
    			date = new NSTimestamp(date);
    		qual = new EOKeyValueQualifier("date",
    				EOQualifier.QualifierOperatorGreaterThanOrEqualTo,date);
    		quals.addObject(qual);
    		date = period.end();
    		if(!(date instanceof NSTimestamp))
    			date = new NSTimestamp(date);
    		qual = new EOKeyValueQualifier("date",
    				EOQualifier.QualifierOperatorLessThanOrEqualTo,date);
    		quals.addObject(qual);
    		qual = new EOAndQualifier(quals);
    	}
    	EOFetchSpecification fs = new EOFetchSpecification
    						(EduLesson.entityName,qual,EduLesson.sorter);
    	list = course.editingContext().objectsWithFetchSpecification(fs);
    	if(list == null)
    		list = NSArray.EmptyArray;
    	if(list.count() == 0)
    		return list;
    	Enumeration enu = list.objectEnumerator();
    	NSMutableArray result = new NSMutableArray();
    	while (enu.hasMoreElements()) {
			EduLesson lesson = (EduLesson) enu.nextElement();
			NSArray subs = (NSArray)lesson.valueForKey("substitutes");
			if(subs == null || subs.count() == 0)
				continue;
			for (int i = 0; i < subs.count(); i++) {
				Substitute sub = (Substitute)subs.objectAtIndex(i);
				NSMutableDictionary dict = new NSMutableDictionary(Person.Utility.fullName(
	    				sub.teacher(), true, 2, 2, 2), "teacher");
	    		BigDecimal factor = sub.factor().stripTrailingZeros();
	    		if(factor.scale() < 0)
	    			factor.setScale(0);
	    		dict.takeValueForKey(factor.toString(),"factor");
	    		dict.takeValueForKey(sub.reason().title(), "reason");
	    		if(sub.reason().unverified())
	    			dict.takeValueForKey("font-style:italic;", "reasonStyle");
	    		if(i==0) {
	    			dict.takeValueForKey(MyUtility.dateFormat().format(lesson.date()), "date");
	    			if(subs.count() > 1)
	    				dict.takeValueForKey(Integer.toString(subs.count()), "rowspan");
	    		}
	    		result.addObject(dict);
			}
		}
    	list = result.immutableClone();
    	return list;
    }
    
    
}