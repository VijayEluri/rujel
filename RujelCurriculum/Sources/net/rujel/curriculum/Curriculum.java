// Curriculum.java: Class file for WO Component 'Curriculum'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.curriculum;

import java.io.InputStream;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.logging.Logger;

import net.rujel.interfaces.EduCourse;
import net.rujel.interfaces.Person;
import net.rujel.reusables.DisplayAny;
import net.rujel.reusables.SessionedEditingContext;
import net.rujel.reusables.SettingsReader;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.eocontrol.EOFetchSpecification;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.*;

// Generated by the WOLips Templateengine Plug-in at Jan 29, 2009 1:57:26 PM
public class Curriculum extends com.webobjects.appserver.WOComponent {
	
	public static Logger logger = Logger.getLogger("rujel.curriculum"); 
	public final boolean ifArchive = SettingsReader.boolForKeyPath("markarchive.Reason", false);
	
	public EOEditingContext ec;
	public NSArray availableRegimes;
	public NSKeyValueCodingAdditions currTab;
	public NSDictionary plist;
	public NSKeyValueCodingAdditions itemDict;
	public NSMutableDictionary params = new NSMutableDictionary();
	public NSArray list;
	public Object itemRow;
	public Reason currReason;
	public Object currObject;
	public Object highlight;
	public NSKeyValueCodingAdditions valueOf;
	public Object item;
	
    public Curriculum(WOContext context) {
        super(context);
        try {
			InputStream pstream = application().resourceManager()
					.inputStreamForResourceNamed("Overview.plist",
							"RujelCurriculum", null);
			NSData pdata = new NSData(pstream, pstream.available());
			plist = (NSDictionary)NSPropertyListSerialization.propertyListFromData(
								pdata, "utf8");
			//availableRegimes = (NSArray)session().valueForKeyPath("modules.curriculumRegime");
		} catch (Exception e) {
			Object[] args = new Object[] {session(),e};
			logger.log(WOLogLevel.WARNING,
					"Error reading Overview.pist",args);
		}
		ec = new SessionedEditingContext(session());
		
		NSTimestamp day = (NSTimestamp)session().valueForKey("today");
		params.takeValueForKey(day, "to");
		Calendar cal = Calendar.getInstance();
		cal.setTime(day);
		cal.add(Calendar.MONTH,-1);
		day = new NSTimestamp(cal.getTimeInMillis());
		params.takeValueForKey(day,"since");
		NSArray tabs = (NSArray)plist.valueForKey("tabs");
		currTab = (NSKeyValueCodingAdditions)tabs.objectAtIndex(0);
		
		valueOf = new DisplayAny.ValueReader(this);
    }
    
    public void search() {
    	NSArray args = (NSArray)currTab.valueForKeyPath("qualifier.args");
    	Enumeration enu = args.objectEnumerator();
    	args = new NSMutableArray();
    	while (enu.hasMoreElements()) {
			String arg = (String) enu.nextElement();
			Object param = params.valueForKey(arg);
			if(param == null)
				param = NullValue;
			((NSMutableArray)args).addObject(param);
		}
    	String qualifierFormat = (String)currTab.valueForKeyPath("qualifier.formatString");
    	EOQualifier qual = EOQualifier.qualifierWithQualifierFormat(qualifierFormat, args);
    	String entityName = (String)currTab.valueForKey("entity");
    	EOFetchSpecification fs = new EOFetchSpecification(entityName,qual,null);
    	fs.setRefreshesRefetchedObjects(true);
    	args = (NSArray)currTab.valueForKey("prefetch");
    	if(args != null && args.count() > 0)
    		fs.setPrefetchingRelationshipKeyPaths(args);
    	list = ec.objectsWithFetchSpecification(fs);
    	if(list != null && list.count() > 1)
    		sort();
    }
    
    public void sort() {
    	if(list == null || list.count() == 0)
    		return;
    	NSArray properties = (NSArray)currTab.valueForKey("properties");
    	if(properties == null || properties.count() == 0)
    		return;
    	NSMutableArray sorter = new NSMutableArray();
    	Enumeration enu = properties.objectEnumerator();
    	while (enu.hasMoreElements()) {
			NSKeyValueCoding prop = (NSKeyValueCoding) enu.nextElement();
			String key = (String)prop.valueForKey("keyPath");
			if(key == null)
				continue;
			NSSelector selector = EOSortOrdering.CompareAscending;
			EOSortOrdering so = EOSortOrdering.sortOrderingWithKey(key, selector);
			sorter.addObject(so);
		}
    	list = EOSortOrdering.sortedArrayUsingKeyOrderArray(list, sorter);
    }
    
    public void setCurrTab(NSKeyValueCodingAdditions tab) {
    	currTab = tab;
    	if(currTab == null)
    		return;
    	if(Reason.ENTITY_NAME.equals(currTab.valueForKey("entity")))
    		currObject = currReason;
    	if(list != null)
    		search();
    }
    
    public void setItemDict(NSKeyValueCodingAdditions newDict) {
    	itemDict = newDict;
    	if(itemRow == null || itemDict == null) {
    		item = null;
    	} else {
    		String keyPath = (String)itemDict.valueForKeyPath("keyPath");
    		if(keyPath == null || keyPath.equals("."))
    			item = itemRow;
    		else
    			item = NSKeyValueCodingAdditions.Utility.valueForKeyPath(itemRow, keyPath);
    	}
    }
       
    public String rowClass() {
    	if(currObject == itemRow) {
    		//if(Reason.ENTITY_NAME.equals(currTab.valueForKey("entity")))
    			return "selection";
    		//return "highlight2";
    	}
    	return (String)valueOf.valueForKeyPath("itemRow.currTab.rowClass");
    }
    
    public String cellClass() {
    	if(item == currReason)
    		return "selectionBorder";
    	if((item==null)?(highlight==null):item.equals(highlight))
    		return "selectionBorder";
    	if(highlight instanceof EduCourse) {
    		String coursePath = (String)itemDict.valueForKey("course");
    		if(coursePath!=null && 
    				highlight == NSKeyValueCodingAdditions.Utility.valueForKeyPath(itemRow, coursePath))
    			return "selectionBorder";
    	}
    	return "pad";    	
    }
    
    public WOActionResults select() {
    	if(itemRow == item) {
    		return popup();
    	}
    	currObject = itemRow;
    	highlight = item;
    	if(itemRow instanceof Reason)
    		currReason = (Reason)itemRow;
    	else
    		currReason = (Reason)NSKeyValueCoding.Utility.valueForKey(itemRow, "reason");
    	return null;
    }
    
    public String onSelect() {
    	if(itemDict.valueForKey("popup") != null)
    		return (String)session().valueForKey("ajaxPopup");
    	return (String)session().valueForKey("checkRun");
    }
    
    protected WOActionResults popup() {
    	String name = (String)valueOf.valueForKeyPath("item.itemDict.popup");
		WOComponent nextPage = pageWithName(name);
		nextPage.takeValueForKey(this, "returnPage");
		NSDictionary popupParams = (NSDictionary)itemDict.valueForKey("popupParams");
		if(popupParams == null || popupParams.count() == 0)
			return nextPage;
		Enumeration enu = popupParams.keyEnumerator();
		while (enu.hasMoreElements()) {
			String key = (String) enu.nextElement();
			Object value = valueOf.valueForKeyPath("item.itemDict.popupParams." + key);
			nextPage.takeValueForKey(value, key);
		}
		return nextPage;
	}
    
    public void save() {
    	ec.lock();
		try {
    		if(ifArchive && ec.hasChanges()) {
    			EOEnterpriseObject archive = EOUtilities.createAndInsertInstance(ec,"MarkArchive");
    			archive.takeValueForKey(currReason, "objectIdentifier");
    			archive.takeValueForKey(currReason.reason(),"@reason");
    			archive.takeValueForKey(currReason.begin(),"@begin");
    			archive.takeValueForKey(currReason.end(),"@end");
    			if(currReason.namedFlags().flagForKey("forTeacher"))
    				archive.takeValueForKey(Person.Utility.fullName(
    						currReason.teacher(), true, 2, 1, 1),"@teacher");
    			if(currReason.namedFlags().flagForKey("forEduGroup"))
    				archive.takeValueForKey(currReason.eduGroup().name(),"@eduGroup");
    		}
			ec.saveChanges();
			Object[] args = new Object[] {session(),currReason};
			logger.log(WOLogLevel.UNOWNED_EDITING,"Reason is saved",args);
		} catch (Exception ex) {
			ec.revert();
			session().takeValueForKey(ex.getMessage(), "message");
			Object[] args = new Object[] {session(),currReason,ex};
			logger.log(WOLogLevel.FINE,"Failed to save reason",args);
		} finally {
			ec.unlock();
		}
    }
}