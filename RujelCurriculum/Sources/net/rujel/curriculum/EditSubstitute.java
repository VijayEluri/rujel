// EditSubstitute.java: Class file for WO Component 'EditSubstitute'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.curriculum;

import java.math.BigDecimal;
import java.util.Enumeration;
import java.util.logging.Logger;

import net.rujel.interfaces.*;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOAndQualifier;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOFetchSpecification;
import com.webobjects.eocontrol.EOGlobalID;
import com.webobjects.eocontrol.EOKeyValueQualifier;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.*;
import net.rujel.interfaces.Teacher;
import net.rujel.reusables.SettingsReader;
import net.rujel.reusables.Various;
import net.rujel.reusables.WOLogLevel;

// Generated by the WOLips Templateengine Plug-in at Oct 1, 2008 1:23:43 PM
public class EditSubstitute extends com.webobjects.appserver.WOComponent {
	protected static Logger logger = Logger.getLogger("rujel.curriculum");

	public EditSubstitute(WOContext context) {
        super(context);
        tabs = new NSArray(new Object[] {
        	session().valueForKeyPath("strings.RujelCurriculum_Curriculum.Substitute.Substitute"),	
        	session().valueForKeyPath("strings.RujelCurriculum_Curriculum.Substitute.Join")});
    }
    
    public WOActionResults returnPage;
    public Substitute substitute;
    public EduLesson lesson;
    public NSArray forcedList;
	public Teacher teacher;
	//public boolean join = false;
//	public BigDecimal factor = BigDecimal.ONE;
	//public String comment;
	public Reason reason;
	public Boolean cantSelect;
	public Boolean cantEdit = Boolean.TRUE;
	public Boolean canDelete = Boolean.FALSE;
	public NSArray fromList;
	public EduLesson item;
	public EduLesson fromLesson;
	public NSArray tabs;
	public int idx;
	public String message;
	protected NSArray others;

   
    public void setLesson(EduLesson aLesson) {
    	lesson = aLesson;
    	EOEditingContext ec = lesson.editingContext();
    	EOGlobalID userGID = (EOGlobalID)session().valueForKey("userPersonGID");
    	if(userGID != null) {
       	   	PersonLink userPerson = (PersonLink)ec.objectForGlobalID(userGID);
       	   	if(userPerson instanceof Teacher && !(userPerson == lesson.course().teacher())) {
       	   		forcedList = new NSArray(userPerson);
       	   		teacher = (Teacher)userPerson;
       	   	}
    	}
    	others = (NSArray)lesson.valueForKey("substitutes");
    }
    
    public void setIdx(Integer index) {
    	if(index == null)
    		idx = 0;
    	else
    		idx = index.intValue();
    	if(idx > 0)
    		populateFrom();
    	if(fromLesson == null || fromList == null || !fromList.contains(fromLesson))
    		cantEdit = Boolean.TRUE;
    }
    
    protected void populateFrom() {
    	fromLesson = null;
    	if(teacher == null) {
    		message = "<div style = \"font-size:larger;color:#ff6600;\">" +
    			session().valueForKeyPath(
    				"strings.RujelCurriculum_Curriculum.messages.teacherRequired") +
    				"</div>";
    		cantEdit = Boolean.TRUE;
    		return;
    	}
    	EOQualifier[] quals = new EOQualifier[2];
    	quals[0] = new EOKeyValueQualifier("teacher",
    			EOQualifier.QualifierOperatorEqual,teacher);
    	quals[1] = new EOKeyValueQualifier("eduYear",
    			EOQualifier.QualifierOperatorEqual,lesson.course().eduYear());
    	quals[0] = new EOAndQualifier(new NSArray(quals));
    	EOFetchSpecification fs = new EOFetchSpecification(
    			EduCourse.entityName,quals[0],null);
    	EOEditingContext ec = lesson.editingContext();
    	fromList = ec.objectsWithFetchSpecification(fs);
    	if(fromList != null && fromList.count() > 0) {
    		quals[0] = Various.getEOInQualifier("course", fromList);
        	quals[1] = new EOKeyValueQualifier("date",
        			EOQualifier.QualifierOperatorEqual,lesson.date());
        	quals[0] = new EOAndQualifier(new NSArray(quals));
        	fs.setEntityName(EduLesson.entityName);
        	fs.setQualifier(quals[0]);
        	fromList = ec.objectsWithFetchSpecification(fs);
    	}
    	if(fromList == null || fromList.count() == 0) {
    		fromList = NSArray.EmptyArray;
    		message =  "<div style = \"font-size:larger;color:#ff6600;\">" +
				session().valueForKeyPath(
				"strings.RujelCurriculum_Curriculum.messages.noLessonsForTeacher") +
				"</div>";
    		cantEdit = Boolean.TRUE;
    	} else {
    		message = null;
    	}
    	if(fromList.count() > 1) {
    		NSArray sorter =  new NSArray(new EOSortOrdering[] {
    				new EOSortOrdering("course",EOSortOrdering.CompareAscending),
    				new EOSortOrdering("number",EOSortOrdering.CompareAscending)
    		});
    		fromList = EOSortOrdering.sortedArrayUsingKeyOrderArray(fromList,sorter);
    	}
    }
    
    public String presentFromLesson() {
    	if(item == null)
    		item = fromLesson;
    	if(item == null)
    		return null;
    	StringBuilder buf = new StringBuilder("<strong style = \"white-space:nowrap;\">");
    	buf.append(item.course().eduGroup().name()).append("</strong> ");
    	if(item.course().cycle() != lesson.course().cycle() &&
    			!item.course().cycle().subject().equals(lesson.course().cycle().subject()))
    		buf.append(item.course().cycle().subject()).append(' ');
    	if(item.course().comment() != null) {
    		buf.append("<em>(").append(WOMessage.stringByEscapingHTMLString(
    				item.course().comment())).append(")</em>");
    	}
//    	buf.append(':').append(' ');
//    	buf.append(WOMessage.stringByEscapingHTMLString(item.theme()));
    	return buf.toString();
    }
    
    public String lessonsListStyle() {
    	if(fromLesson != null)
    		return "display:none;";
    	return null;
    }
    
    public String factor() {
    	if(idx == 0)
    		return "1";
    	if(substitute == null) {
    		BigDecimal factor = new BigDecimal(SettingsReader.stringForKeyPath(
    				"edu.joinFactor", "0.5"));
    		if(others != null && others.count() > 0) {
    			factor = factor.divide(new BigDecimal(others.count() +1),
    					2,BigDecimal.ROUND_HALF_UP);
    		}
    		return factor.toString();
    	}
    	return substitute.factor().stripTrailingZeros().toString();
    }
    
    public void setFactor(String factor) {
    	if(substitute == null)
    		return;
    	substitute.setFactor(new BigDecimal(factor));
    }
    
    public void setSubstitute(Substitute sub) {
    	substitute = sub;
    	if(sub != null) {
    		teacher = sub.teacher();
    		if(forcedList == null || !forcedList.contains(teacher)) {
    			if(forcedList == null)
    				forcedList = new NSArray(teacher);
    			else
    				forcedList = forcedList.arrayByAddingObject(teacher);
    		}
    		reason = substitute.reason();
    		if(sub.factor().compareTo(BigDecimal.ONE) < 0) {
    			idx = 1;
    			populateFrom();
    		} else {
    			idx = 0;
    		}
    		fromLesson = sub.fromLesson();
    		// TODO: think on more specific access reading
    		String obj = (context().page() == this)?"substitute":"Substitute";
    		cantEdit = (Boolean)session().valueForKeyPath("readAccess._edit." + obj);
    		cantSelect = cantEdit;
    		canDelete = (Boolean)session().valueForKeyPath("readAccess.delete." + obj);
    		if(others == null)
    			others = new NSArray(substitute);
    		else if(!others.containsObject(substitute))
    			others = others.arrayByAddingObject(substitute);
    	} else {
    		cantSelect = (Boolean)session().valueForKeyPath("readAccess._edit.Substitute");
    	}
		if(cantSelect.booleanValue() && teacher == null) {
			cantSelect = Boolean.FALSE;
		}
    }
    
    public WOActionResults selectFrom() {
    	fromLesson = item;
    	cantEdit = Boolean.FALSE;
   	return this;
    }

    public void setTeacher(Teacher aTeacher) {
    	teacher = (Teacher)EOUtilities.localInstanceOfObject(lesson.editingContext(), aTeacher);
    	if(aTeacher != null) {
    		String path = "readAccess." + ((substitute==null)?"_create.S":"_edit.s") +"ubstitute";
    		cantEdit = (Boolean)session().valueForKeyPath(path);
    	} else {
    		cantEdit = Boolean.TRUE;
    	}
    	if(idx > 0) {
    		populateFrom();
        	if(fromLesson == null || fromList == null || !fromList.contains(fromLesson))
        		cantEdit = Boolean.TRUE;    		
    	}
    }
    
	public WOActionResults save() {
		EOEditingContext ec = lesson.editingContext(); 
		if(others != null && others.count() > 0) {
			Enumeration enu = others.objectEnumerator();
			while (enu.hasMoreElements()) {
				Substitute sub = (Substitute) enu.nextElement();
				if(sub != substitute && sub.teacher() == teacher) {
					reason = null;
					session().takeValueForKey(application().valueForKeyPath(
						"strings.RujelCurriculum_Curriculum.messages.duplicateTeacher"), "message");
					session().removeObjectForKey("lessonProperies");
					break;
				}
			}
		}
		if(reason == null) {
			if (returnPage instanceof WOComponent) 
				((WOComponent)returnPage).ensureAwakeInContext(context());
			if(ec.hasChanges())
				ec.revert();
			return returnPage;
		}
		String action = "saved";
		ec.lock();
		if(substitute == null) {
			substitute = (Substitute)EOUtilities.createAndInsertInstance(ec, Substitute.ENTITY_NAME);
			substitute.addObjectToBothSidesOfRelationshipWithKey(lesson, "lesson");
			action = "created";
			if(others != null && !others.containsObject(substitute))
				others = others.arrayByAddingObject(substitute);
		}
		substitute.setDate(lesson.date());
		substitute.addObjectToBothSidesOfRelationshipWithKey(teacher,"teacher");
		BigDecimal factor = new BigDecimal(SettingsReader.stringForKeyPath(
				"edu.joinFactor", "0.5"));
		if(others != null && others.count() > 1) {
			factor = factor.divide(new BigDecimal(others.count()),
					2,BigDecimal.ROUND_HALF_UP);
			Enumeration enu = others.objectEnumerator();
			while (enu.hasMoreElements()) {
				Substitute sub = (Substitute) enu.nextElement();
				if(sub.factor().compareTo(BigDecimal.ONE) < 0)
					sub.setFactor(factor);
			}
		}
		if(idx == 0)
			factor = BigDecimal.ONE;
		else
			substitute.addObjectToBothSidesOfRelationshipWithKey(fromLesson, "fromLesson");
		substitute.setFactor(factor);
		substitute.addObjectToBothSidesOfRelationshipWithKey(reason, "reason");
		return done(action);
	}
	
	public WOActionResults delete() {
		EOEditingContext ec = lesson.editingContext(); 
		ec.lock();
		if(substitute != null && substitute.editingContext() != null) {
			logger.log(WOLogLevel.UNOWNED_EDITING,"Deleting substitute",substitute);
			if(others != null && others.count() > 1) {
				BigDecimal factor = new BigDecimal(SettingsReader.stringForKeyPath(
						"edu.joinFactor", "0.5"));
				if(others.count() > 2)
					factor = factor.divide(new BigDecimal(others.count() -1),
						2,BigDecimal.ROUND_HALF_UP);
				Enumeration enu = others.objectEnumerator();
				while (enu.hasMoreElements()) {
					Substitute sub = (Substitute) enu.nextElement();
					if(sub.factor().compareTo(BigDecimal.ONE) < 0)
						sub.setFactor(factor);
				}
			}
			ec.deleteObject(substitute);
		}
		return done("deleted");
	}
	
	protected WOActionResults done(String action) {
		EOEditingContext ec = lesson.editingContext();
		try {
			ec.saveChanges();
			Object[] args = new Object[] {session(),lesson};
			logger.log(WOLogLevel.UNOWNED_EDITING,"Substitute for lesson " + action,args);
		} catch (NSValidation.ValidationException vex) {
			ec.revert();
	    	others = (NSArray)lesson.valueForKey("substitutes");
			session().takeValueForKey(vex.getMessage(), "message");
			Object[] args = new Object[] {session(),lesson,vex.getMessage()};
			logger.log(WOLogLevel.FINE,"Failed to save "+ action + " Substitute for lesson ",args);
		} catch (Exception e) {
			ec.revert();
	    	others = (NSArray)lesson.valueForKey("substitutes");
			session().takeValueForKey(e.getMessage(), "message");
			Object[] args = new Object[] {session(),lesson,e};
			logger.log(WOLogLevel.WARNING,"Failed to save "+ action + " Substitute for lesson ",args);
		} finally {
			ec.unlock();
		}
		session().removeObjectForKey("lessonProperies");
		if (returnPage instanceof WOComponent) 
			((WOComponent)returnPage).ensureAwakeInContext(context());
		return returnPage;
	}
	
	public WOActionResults review() {
		WOComponent nextPage = pageWithName("LessonNoteEditor");
		nextPage.takeValueForKey(fromLesson,"currLesson");
		nextPage.takeValueForKey(fromLesson.course(),"course");
		nextPage.takeValueForKey(nextPage.valueForKey("currLesson"),"selector");
		session().takeValueForKey(returnPage,"pushComponent");
		return nextPage;
	}
 }