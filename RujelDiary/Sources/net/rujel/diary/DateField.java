// DateField.java : Class file for WO Component 'DateField'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.diary;

import java.text.ParsePosition;

import net.rujel.base.MyUtility;

import com.webobjects.appserver.*;
import com.webobjects.foundation.NSTimestamp;

// Generated by the WOLips Templateengine Plug-in at Jan 21, 2009 11:38:15 AM
public class DateField extends com.webobjects.appserver.WOComponent {
 	public DateField(WOContext context) {
        super(context);
    }

 	public String fieldName;
    public String value;
    public String className;
    public String onEnter;
    public String onBlur;

	public void appendToResponse(WOResponse aResponse, WOContext aContext) {
		WORequest req = aContext.request();
		fieldName = (String)valueForBinding("name");
		value = req.stringFormValueForKey(fieldName);
		NSTimestamp date = (NSTimestamp)valueForBinding("date");
		if(date != null) {
			value = MyUtility.dateFormat().format(date);
		} else {
			try {
				date = (NSTimestamp)MyUtility.dateFormat().parseObject(value);
			} catch (Exception e) {
				className = "default";
				onEnter = "this.className='';";
				onBlur = "if(value==defaultValue)className='default';";
				String base = (String)valueForBinding("baseName");
				base = req.stringFormValueForKey(base);
				date = (NSTimestamp)MyUtility.dateFormat().parseObject(base, new ParsePosition(0));
				if(date == null)
					date = (NSTimestamp)application().valueForKey("today");
				Integer shift = (Integer)valueForBinding("shift");
				if(shift != null)
					date = date.timestampByAddingGregorianUnits(0, 0, shift.intValue(), 0, 0, 0);
				value = MyUtility.dateFormat().format(date);
			}
			if(hasBinding("date"))
				setValueForBinding(date, "date");
		}
		super.appendToResponse(aResponse, aContext);
	}
 
    public boolean synchronizesVariablesWithBindings() {
        return false;
	}
	
    public boolean isStateless() {
		return true;
	}
	
	public void reset() {
		value = null;
		className = null;
		onEnter = null;
		onBlur = null;
		super.reset();
	}
}