// WorksOnDate.java

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.ui;

import net.rujel.criterial.Work;
import net.rujel.interfaces.EduLesson;
import net.rujel.reusables.SessionedEditingContext;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.eocontrol.EOSharedEditingContext;
import com.webobjects.foundation.*;

// Generated by the WOLips Templateengine Plug-in at Aug 28, 2008 11:14:11 PM
public class WorksOnDate extends com.webobjects.appserver.WOComponent {
    public WorksOnDate(WOContext context) {
        super(context);
    }
    
    protected NSKeyValueCoding _dict;
    public NSKeyValueCoding dict() {
    	if(_dict == null)
    		_dict = (NSKeyValueCoding)valueForBinding("extention");
    	return _dict;
    }
    
    protected NSArray _workList;
    public NSArray workList() {
    	if(_workList == null) {
    		_workList = (NSArray)dict().valueForKey("works");
    	}
    	return _workList;
    }
    
    public Work workItem;
    
    public void selectWork() {
    	context().page().takeValueForKeyPath("MarksPresenter", "present.tmpPresenter");
    	setValueForBinding(workItem, "currLesson");
    }
    
    public String rowClass() {
    	if(workItem == valueForBinding("currLesson"))
    		return "selection";
    	return workItem.styleClass();
    }
    
	public String rowStyle() {
	   	EduLesson lesson = (EduLesson)valueForBinding("lesson");
	    if(lesson.date().equals(workItem.date()))
	    	return "font-weight:bold;";
		return null;
	}
    
    public WOActionResults inspectorPopup() {
    	WOComponent nextPage = pageWithName("WorkInspector");
    	nextPage.takeValueForKey(context().page(), "returnPage");
    	EduLesson lesson = (EduLesson)valueForBinding("lesson");
     	EOEnterpriseObject currLesson = (EOEnterpriseObject)valueForBinding("currLesson");
    	if(currLesson instanceof Work) {
    		//currLesson = EOUtilities.localInstanceOfObject(tmpEc, currLesson);
    	} else {
    	   	EOEditingContext tmpEc = new SessionedEditingContext(lesson.editingContext(),session());
        	tmpEc.setSharedEditingContext(EOSharedEditingContext.defaultSharedEditingContext());
        	tmpEc.lock();
        	currLesson = EOUtilities.createAndInsertInstance(tmpEc, "Work");
        	NSTimestamp date = lesson.date();
        	((Work)currLesson).setDate(date);
        	((Work)currLesson).setAnnounce(date);
        	((Work)currLesson).setType(new Integer(Work.CLASSWORK));
        	EOEnterpriseObject course = EOUtilities.localInstanceOfObject(tmpEc, lesson.course());
        	((Work)currLesson).setNumber(new Integer(0));
        	currLesson.addObjectToBothSidesOfRelationshipWithKey(course, "course");
        	nextPage.takeValueForKey(tmpEc, "tmpEC");
        	tmpEc.unlock();
    	}
    	nextPage.takeValueForKey(currLesson, "work");
    	return nextPage;
    }
    /*
    public WOActionResults newWork() {
       	WOComponent nextPage = pageWithName("WorkInspector");
    	nextPage.takeValueForKey(context().page(), "returnPage");
    	EduLesson lesson = (EduLesson)valueForBinding("lesson");
    	EOEditingContext tmpEc = new EOEditingContext(lesson.editingContext());
    	Work newWork = (Work)EOUtilities.createAndInsertInstance(tmpEc, "Work");
    	NSTimestamp date = lesson.date();
    	newWork.setDate(date);
    	newWork.setAnnounce(date);
    	newWork.setType(new Integer(Work.CLASSWORK));
    	nextPage.takeValueForKey(newWork, "work");
    	nextPage.takeValueForKey(tmpEc, "tmpEC");
    	setValueForBinding(newWork, "currLesson");
    	return nextPage;
    }
    */
    public String inspectorIcon() {
    	Object currLesson = valueForBinding("currLesson");
    	if(currLesson instanceof Work)
    		return "info.gif";
    	else
    		return "plus.png";
    }
    
    public String inspectorTitle() {
    	Object currLesson = valueForBinding("currLesson");
    	if(currLesson instanceof Work)
    		return (String)application().valueForKeyPath("strings.RujelCriterial_Strings.inspector");
    	else
    		return (String)application().valueForKeyPath("strings.Reusables_Strings.uiElements.Add");
    }
    
	public boolean isStateless() {
		return true;
	}
	
	public boolean synchronizesVariablesWithBindings() {
		return false;
	}
	
	public void reset() {
		super.reset();
		_workList = null;
		_dict = null;
	}
}