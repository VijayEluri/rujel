package net.rujel.criterial;

import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;

import net.rujel.base.MyUtility;
import net.rujel.interfaces.*;
import net.rujel.reusables.Counter;
import net.rujel.reusables.Various;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;

// Generated by the WOLips Templateengine Plug-in at Jan 20, 2009 11:46:47 AM
public class WorksDiary extends com.webobjects.appserver.WOComponent {
    
	public static final NSArray monthDate = (NSArray)WOApplication.application().valueForKeyPath(
					"strings.Reusables_Strings.presets.monthDate");
	public static final NSArray weekdayShort = (NSArray)WOApplication.application().valueForKeyPath(
					"strings.Reusables_Strings.presets.weekdayShort");
	public static final NSArray weekdayLong = (NSArray)WOApplication.application().valueForKeyPath(
					"strings.Reusables_Strings.presets.weekdayLong");
	
	public WorksDiary(WOContext context) {
        super(context);
    }
    
    public NSArray courses;
    public NSTimestamp to;
    public NSTimestamp since;
    public String title;
    public boolean period;
    
    protected NSMutableDictionary subjects = new NSMutableDictionary();
    
    public NSArray sections;
    public Object section;
    public Integer index;
    public NSMutableArray agregate;
    public Object item;
       
	public void appendToResponse(WOResponse aResponse, WOContext aContext) {
		courses = (NSArray)valueForBinding("courses");
		if(courses == null) {
			aResponse.appendContentString("No courses defined");
			return;
		}
		
		NSTimestamp date = (NSTimestamp)valueForBinding("date");
		to = (date == null)?new NSTimestamp():date;
		since = (NSTimestamp)valueForBinding("since");
		NSDictionary tab = (NSDictionary)valueForBinding("tab");
		period = Various.boolForObject(tab.valueForKey("period"));
		if(since == null) {
			since = (period)?to.timestampByAddingGregorianUnits(0, 0, -7, 0, 0, 0):to;
		}
		
		title = MyUtility.dateFormat().format(since);
		if(period)
			title = title + " - " + MyUtility.dateFormat().format(to);
		
		Enumeration enu = courses.objectEnumerator();
		while (enu.hasMoreElements()) {
			EduCourse course = (EduCourse) enu.nextElement();
			String subject = course.cycle().subject();
			Counter counter = (Counter)subjects.objectForKey(subject);
			if(counter == null) {
				counter = new Counter(1);
				subjects.takeValueForKey(counter, subject);
			} else {
				counter.raise();
			}
		}
		
		EOQualifier qual = Various.getEOInQualifier("course", courses);
		NSMutableArray quals = new NSMutableArray(qual);
		if(date != null) {
			qual = new EOKeyValueQualifier(Work.ANNOUNCE_KEY,
					EOQualifier.QualifierOperatorLessThanOrEqualTo,to);
			quals.addObject(qual);
		}
		qual = new EOKeyValueQualifier(Work.DATE_KEY,
				EOQualifier.QualifierOperatorGreaterThanOrEqualTo,since);
		quals.addObject(qual);
		qual = new EOKeyComparisonQualifier(Work.ANNOUNCE_KEY,
				EOQualifier.QualifierOperatorNotEqual,Work.DATE_KEY);
		quals.addObject(qual);
		qual = new EOAndQualifier(quals);
		EOFetchSpecification fs = new EOFetchSpecification(Work.ENTITY_NAME,qual,null);
		fs.setRefreshesRefetchedObjects(true);
		EOEditingContext ec = EOSharedEditingContext.defaultSharedEditingContext();
		NSArray list = ec.objectsWithFetchSpecification(fs);
		if(list != null && list.count() > 0) {
			NSArray sorter = (NSArray)tab.valueForKey("order");
			if(sorter != null && sorter.count() > 0) {
				String sectionKey = (String)sorter.objectAtIndex(0);
				enu = sorter.objectEnumerator();
				sorter = new NSMutableArray();
				EOSortOrdering so = null;
				while (enu.hasMoreElements()) {
					String key = (String) enu.nextElement();
					if(key.charAt(0) == '-') {
						key = key.substring(1);
						so = new EOSortOrdering(key,EOSortOrdering.CompareDescending);
					} else {
						so = new EOSortOrdering(key,EOSortOrdering.CompareAscending);
					}
					((NSMutableArray)sorter).addObject(so);
				} // prepare sorter
				list = EOSortOrdering.sortedArrayUsingKeyOrderArray(list, sorter);

				sections = new NSMutableArray();
				NSMutableArray sectionList = null;
				agregate = new NSMutableArray();
				//NSMutableDictionary sectionDict = new NSMutableDictionary();
				Calendar cal = Calendar.getInstance();
				cal.setTime(to);
				int week = cal.get(Calendar.WEEK_OF_YEAR);
				enu = list.objectEnumerator();
				while (enu.hasMoreElements()) {
					Work work = (Work) enu.nextElement();
					if(week >= 0)
						cal.setTime(work.date());
					boolean finWeek = (week >= 0 && week < cal.get(Calendar.WEEK_OF_YEAR));
					Object nextValue = work.valueForKeyPath(sectionKey);
					if(!nextValue.equals(section)) {
						if(finWeek) {
							agregate.addObject(NSArray.EmptyArray);
							((NSMutableArray)sections).addObject(Boolean.FALSE);
							week = -1;
						}
						section = nextValue;
						((NSMutableArray)sections).addObject(section);
						sectionList = new NSMutableArray(work);
						agregate.addObject(sectionList);
						// sectionDict.setObjectForKey(sectionList, section);
					} else {
						if(finWeek) {
							sectionList.addObject(Boolean.FALSE);
							week = -1;
						}
						sectionList.addObject(work);
					}
				} // agregate works into sections
			}
		}
		super.appendToResponse(aResponse, aContext);
	}

	public NSArray list() {
		try {
			return (NSArray)agregate.objectAtIndex(index.intValue());
		} catch (Exception e) {
			return null;
		}
	}
	
/*	public void setItem(Object nextItem) {
		if(nextItem != null) {
			section = NSKeyValueCoding.Utility.valueForKey(nextItem, sectionKey);
			if (item != null && section != null) {
				Object oldValue = NSKeyValueCoding.Utility.valueForKey(item, sectionKey);
				if(oldValue.equals(section))
					section = null;
			}
		}
		item = nextItem;
	}
*/
	
	public String formatSection() {
		StringBuilder result = new StringBuilder(52);
		if (section instanceof Date) {
			Date date = (Date) section;
			NSTimestamp late = to.timestampByAddingGregorianUnits(0, 0, 7, 0, 0, 0);
			boolean isLate = date.compareTo(late) > 0;
			Calendar cal = Calendar.getInstance();
			cal.setTime(date);
			if(isLate) {
				result.append(cal.get(Calendar.DATE)).append(' ');
				result.append(monthDate.objectAtIndex(cal.get(Calendar.MONTH)));
				result.append(' ').append(cal.get(Calendar.YEAR)).append(" (");
				result.append(weekdayShort.objectAtIndex(cal.get(Calendar.DAY_OF_WEEK) -1)).append(')');
			} else {
				result.append(weekdayLong.objectAtIndex(cal.get(Calendar.DAY_OF_WEEK) -1));
				result.append(", ").append(cal.get(Calendar.DATE)).append(' ');
				result.append(monthDate.objectAtIndex(cal.get(Calendar.MONTH)));
			}
		}
		else if (section instanceof EduCourse) {
			EduCourse course = (EduCourse) section;
			result.append(course.cycle().subject());
			if(course.comment() != null) {
				result.append(" <i>(").append(course.comment()).append(")</i>");
			}
			if(course.teacher() != null) {
				result.append(" <span style=\"font-weight:normal;\">- ");
				result.append(Person.Utility.fullName(course.teacher(), true, 2, 1, 1));
				result.append("</span>");
			}
		} else { // unknown section type
			return section.toString();
		}
		return result.toString();
	}
	
	public String itemLabel() {
		@SuppressWarnings("hiding")
		Work item = (Work)this.item;
		StringBuffer result = new StringBuffer(16);
		if(!(section instanceof Date)) {
			Calendar cal = Calendar.getInstance();
			cal.setTime(item.date());
			result.append(cal.get(Calendar.DATE)).append(' ');
			result.append(monthDate.objectAtIndex(cal.get(Calendar.MONTH)));
			result.append(" (");
			result.append(weekdayShort.objectAtIndex(cal.get(Calendar.DAY_OF_WEEK) -1)).append(')');
			//MyUtility.dateFormat().format(item.date(), result, new FieldPosition(0));
			result.append(' ');
		}
		if(!(section instanceof EduCourse)) {
			String subject = item.course().cycle().subject();
			result.append(subject);
			Counter count = (Counter)subjects.valueForKey(subject);
			if(count.value() > 1) {
				result.append(" <i style=\"white-space:nowrap;\">");
				result.append(Person.Utility.fullName(item.course().teacher(), true, 2, 1, 1));
				result.append("</i>");
			}
		}		
		return result.toString();
	}
	
	public boolean synchronizesVariablesWithBindings() {
        return false;
	}
	public boolean isStateless() {
		return true;
	}
	
	public void reset() {
		courses = null;
		to = null;
		since = null;
		sections = null;
		section = null;
		agregate = null;
		item = null;
		index = null;
		subjects.removeAllObjects();
		super.reset();
	}

	public String announce() {
		NSTimestamp announceDate = ((Work)item).announce();
		return MyUtility.dateFormat().format(announceDate);
	}
}