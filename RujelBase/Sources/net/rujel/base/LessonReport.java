// LessonReport.java

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.base;

import java.text.Format;
import java.util.Date;
import java.util.Enumeration;
import java.util.logging.Logger;

import net.rujel.interfaces.*;
import net.rujel.reusables.Period;
import net.rujel.reusables.Various;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;

// Generated by the WOLips Templateengine Plug-in at Sep 15, 2008 2:38:54 PM
public class LessonReport extends com.webobjects.appserver.WOComponent {
    public LessonReport(WOContext context) {
        super(context);
    }

	public NSDictionary lessonItem;

	public static NSDictionary reportForStudent(NSDictionary settings) {
		NSDictionary options = (NSDictionary)settings.valueForKeyPath("settings.lessons");	
		if(options == null || !Various.boolForObject(options.valueForKey("active")))
			return null;
		
		Student student = (Student)settings.valueForKey("student");
		EOEditingContext ec = student.editingContext();
		
		NSMutableDictionary result = new NSMutableDictionary("lessons","id");
		result.takeValueForKey("LessonReport", "component");
		result.takeValueForKey(options.valueForKey("sort"), "sort");
		int count = 0;
		Date since = (NSTimestamp)settings.valueForKey("since");
		Date to = (NSTimestamp)settings.valueForKey("to");		
		Period period = (Period)settings.valueForKey("period");
		if(period != null) {
			if(since == null) {
				since = period.begin();
				if(!(since instanceof NSTimestamp))
					since = new NSTimestamp(since);
			}
			if(to == null) {
				to = period.begin();
				if(!(to instanceof NSTimestamp))
					to = new NSTimestamp(to);
			}
		}
//		NSMutableArray args = new NSMutableArray(new Object[] { since,to,student });
		if(!Various.boolForObject(options.valueForKey("all"))) { //get existing notes
			NSMutableArray list = new NSMutableArray(new EOKeyValueQualifier("student",
					EOQualifier.QualifierOperatorEqual,student));
			if(since != null)
				list.addObject(new EOKeyValueQualifier("lesson.date",
						EOQualifier.QualifierOperatorGreaterThanOrEqualTo,since));
			if(to != null)
				list.addObject(new EOKeyValueQualifier("lesson.date",
						EOQualifier.QualifierOperatorLessThanOrEqualTo,to));
			EOFetchSpecification fs = new EOFetchSpecification("BaseNote",
					new EOAndQualifier(list),null);
			NSArray allNotes = ec.objectsWithFetchSpecification(fs);
			if(allNotes == null || allNotes.count() == 0)
				return null;
			NSMutableDictionary tmpRes = new NSMutableDictionary();
			Enumeration enu = allNotes.objectEnumerator();
			while (enu.hasMoreElements()) {
				EOEnterpriseObject note = (EOEnterpriseObject) enu.nextElement();
				EduCourse course = (EduCourse)note.valueForKeyPath("lesson.course");
				if(course == null) {
					Logger.getLogger("rujel.base").
							log(WOLogLevel.INFO,"Dangling note found",note);
					continue;
				}
				EduLesson lesson = (EduLesson)note.valueForKey("lesson");
				NSMutableDictionary dict = formatLesson(lesson);
				dict.takeValueForKey(note.valueForKey("note"), "note");
				list = (NSMutableArray)tmpRes.objectForKey(course);
				if(list == null) {
					list = new NSMutableArray(dict);
					tmpRes.setObjectForKey(list, course);
				} else {
					list.addObject(dict);
				}
			} //notes iteration
			enu = tmpRes.keyEnumerator();
			while (enu.hasMoreElements()) {
				EduCourse course = (EduCourse) enu.nextElement();
				NSMutableArray courseLessons = (NSMutableArray)tmpRes.objectForKey(course);
				EOSortOrdering.sortArrayUsingKeyOrderArray(courseLessons, EduLesson.sorter);
				result.setObjectForKey(courseLessons, course);
				count++;
			}
		} else { // all lessons

			NSArray courses = (NSArray)settings.valueForKey("courses");

			Enumeration enu = courses.objectEnumerator();
			NSMutableArray preQuals = new NSMutableArray();
			if(since != null)
				preQuals.addObject(new EOKeyValueQualifier(BaseLesson.DATE_KEY,
						EOQualifier.QualifierOperatorGreaterThanOrEqualTo,since));
			if(to != null)
				preQuals.addObject(new EOKeyValueQualifier(BaseLesson.DATE_KEY,
						EOQualifier.QualifierOperatorLessThanOrEqualTo,to));
//			EOQualifier qual = EOQualifier.qualifierWithQualifierFormat("date >= %@ AND date <= %@",args);
			while(enu.hasMoreElements()) { //get lessons for courses;
				EduCourse course = (EduCourse)enu.nextElement();
				NSMutableArray quals = preQuals.mutableClone();// new NSMutableArray(qual);
				quals.add(new EOKeyValueQualifier("course",EOQualifier.QualifierOperatorEqual,course));
				EOFetchSpecification fs = new EOFetchSpecification("BaseLesson",
						new EOAndQualifier(quals),EduLesson.sorter);
				fs.setRefreshesRefetchedObjects(true);
				NSArray lessons = ec.objectsWithFetchSpecification(fs);
				if(lessons != null && lessons.count() > 0) {
					Enumeration lenu = lessons.objectEnumerator();
					NSMutableArray courseLessons = new NSMutableArray();
					while (lenu.hasMoreElements()) {
						EduLesson lesson = (EduLesson) lenu.nextElement();
						NSMutableDictionary dict = formatLesson(lesson);
						dict.takeValueForKey(lesson.noteForStudent(student), "note");
						courseLessons.addObject(dict);
					}
					result.setObjectForKey(courseLessons, course);
					count++;
				}
			}
		}
		if(count == 0)
			return null;
		return result;
	}
	protected static Format dateFormat = MyUtility.dateFormat();
	protected static NSMutableDictionary formatLesson(EduLesson lesson) {
		NSMutableDictionary result = new NSMutableDictionary(lesson,"lesson");
		result.takeValueForKey(lesson.number(), "number");
		result.takeValueForKey(dateFormat.format(lesson.date()), "date");
		result.takeValueForKey(lesson.theme(), "theme");
		result.takeValueForKey(lesson.homeTask(), "homeTask");
		return result;
	}
	public boolean isStateless() {
		return true;
	}
	
	public boolean synchronizesVariablesWithBindings() {
        return false;
	}
	/*
	public void reset() {
	}
	 */
}