// ByCoursePresenter.java: Class file for WO Component 'ByCoursePresenter'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.ui;

import java.util.Enumeration;

import net.rujel.base.QualifiedSetting;
import net.rujel.base.SettingsBase;
import net.rujel.interfaces.EduCycle;
import net.rujel.interfaces.EduGroup;
import net.rujel.reusables.NamedFlags;
import net.rujel.reusables.Various;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSKeyValueCoding;
import com.webobjects.foundation.NSKeyValueCodingAdditions;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;
import com.webobjects.foundation.NSSelector;

// Generated by the WOLips Templateengine Plug-in at Jul 17, 2009 3:54:08 PM
public class ByCoursePresenter extends com.webobjects.appserver.WOComponent {
	
	public static final int OTHER = 0;
	public static final int GROUP = 1;
	public static final int SUBJECT = 2;
	public static final int TEACHER = 3;
	
	protected NSKeyValueCoding _bc;
	protected NSMutableDictionary[] matrix;
	public Integer rowspan;
	public boolean islist;
	public NSArray list;
	public Object item;
	public int index;
//	protected NSArray descriptions;
	public Boolean noEdit;
	
    public ByCoursePresenter(WOContext context) {
        super(context);
    }
    
    public NSKeyValueCoding bc() {
    	if(_bc == null)
    		_bc = (NSKeyValueCoding)valueForBinding("value");
    	return _bc;
    }
    
    public void appendToResponse(WOResponse aResponse, WOContext aContext) {
    	prepare();
    	if(hasBinding("rowspan"))
    		setValueForBinding(rowspan, "rowspan");
    	super.appendToResponse(aResponse, aContext);
    }
    
    protected void prepare() {
    	_bc = (NSKeyValueCoding)valueForBinding("value");
    	if(_bc == null || _bc instanceof SettingsBase)
    		return;
    	QualifiedSetting qs = (QualifiedSetting)_bc;
    	list = qs.getCourses();
    	if(list != null) {
    		islist = true;
    		if(list.count() > 0)
    			rowspan = new Integer(list.count() +1);
    		return;
    	}
    	EOQualifier qual = qs.getQualifier();
    	analyseQualifier(qual, false);
    }
    
    public boolean omitCell() {
    	boolean result = hasBinding("rowspan");
    	return result;
    }
    
    protected void analyseQualifier(EOQualifier qual, boolean negate) {
    	if(qual == null)
    		return;
    	if(qual instanceof EOOrQualifier) {
    		if(list != null)
    			noEdit = Boolean.TRUE;
    		list = ((EOOrQualifier)qual).qualifiers();
    		if(list.count() > 1)
    			rowspan = new Integer(list.count());
    	} else if (qual instanceof EONotQualifier) {
    		//analyseQualifier(((EONotQualifier)qual).qualifier(), !negate);
    		noEdit = Boolean.TRUE;
    	} else if (qual instanceof EOAndQualifier) {
    		Enumeration enu = ((EOAndQualifier)qual).qualifiers().objectEnumerator();
    		while (enu.hasMoreElements()) {
				EOQualifier q = (EOQualifier) enu.nextElement();
				analyseQualifier(q, negate);
			}
    	} else if (qual instanceof EOKeyValueQualifier) {
    		if(matrix == null)
    			matrix = new NSMutableDictionary[4];
    		matrix = identifyQualifier((EOKeyValueQualifier)qual, matrix, session());
    		if(matrix == null)
    			noEdit = Boolean.TRUE;
    	}
    }
    
    public static NSMutableDictionary[] identifyQualifier(
    		EOKeyValueQualifier qual, NSMutableDictionary[] matrix, WOSession ses) {
		String key = qual.key();
		Object value = qual.value();
		NSArray descriptions = null;
		if(key.equals("eduGroup")) {
			matrix[GROUP] = ((NSDictionary)ses.valueForKeyPath(
					"strings.RujelBase_Base.SettingsBase.eduGroup")).mutableClone();
			matrix[GROUP].takeValueForKey(((EduGroup)value).name(), "value");
			matrix[GROUP].takeValueForKey(qual, "qualifier");
		} else if(key.equals("cycle.grade")) {
			if(matrix[GROUP] == null) {
				matrix[GROUP] = ((NSDictionary)ses.valueForKeyPath(
						"strings.RujelBase_Base.SettingsBase.grade")).mutableClone();
			} else if(!"cycle.grade".equals(matrix[GROUP].valueForKey("keyPath"))) {
				return null;
			}
			NSSelector sel = ((EOKeyValueQualifier)qual).selector();
			if(sel == EOQualifier.QualifierOperatorEqual) {
    			matrix[GROUP].takeValueForKey(value, "value");
    			matrix[GROUP].takeValueForKey(qual, "qualifier");
			} else if(sel == EOQualifier.QualifierOperatorGreaterThan || 
					sel == EOQualifier.QualifierOperatorGreaterThanOrEqualTo) {
    			matrix[GROUP].takeValueForKey(value, "min");
    			matrix[GROUP].takeValueForKey(qual, "qualifierLow");
    			Object max = matrix[GROUP].valueForKey("max");
    			StringBuilder buf = new StringBuilder(8);
    			if(max == null) {
    				if(sel == EOQualifier.QualifierOperatorGreaterThan)
    					buf.append("&gt;");
    				else
    					buf.append("&ge;");
    				buf.append(value);
    			} else {
    				buf.append(value).append("...").append(max);
    			}
				matrix[GROUP].takeValueForKey(buf.toString(), "value");
			} else if(sel == EOQualifier.QualifierOperatorLessThan || 
					sel == EOQualifier.QualifierOperatorLessThanOrEqualTo) {
    			matrix[GROUP].takeValueForKey(value, "max");
    			matrix[GROUP].takeValueForKey(qual, "qualifierHigh");
    			Object min = matrix[GROUP].valueForKey("min");
    			StringBuilder buf = new StringBuilder(8);
    			if(min == null) {
    				if(sel == EOQualifier.QualifierOperatorLessThan)
    					buf.append("&lt;");
    				else
    					buf.append("&le;");
    				buf.append(value);
    			} else {
    				buf.append(min).append("...").append(value);
    			}
				matrix[GROUP].takeValueForKey(buf.toString(), "value");
			}
		} else if(key.equals("cycle.subject")) {
			matrix[SUBJECT] = ((NSDictionary)ses.valueForKeyPath(
					"strings.RujelBase_Base.SettingsBase.subject")).mutableClone();
			matrix[SUBJECT].takeValueForKey(value, "value");
			matrix[SUBJECT].takeValueForKey(qual, "qualifier");
		} else if(key.equals("cycle")) {
			matrix[SUBJECT] = ((NSDictionary)ses.valueForKeyPath(
			"strings.RujelBase_Base.SettingsBase.cycle")).mutableClone();
			matrix[SUBJECT].takeValueForKey(((EduCycle)value).subject(), "value");
			matrix[SUBJECT].takeValueForKey(qual, "qualifier");
			if(matrix[GROUP] == null) {
				matrix[GROUP] = matrix[SUBJECT].mutableClone();
				matrix[GROUP].takeValueForKey(
						matrix[GROUP].valueForKey("styleGrade"),"style");
    			matrix[GROUP].takeValueForKey(((EduCycle)value).grade(), "value");
				matrix[GROUP].takeValueForKey("grade","presentPath");
			}
		} else if(key.equals("teacher")) {
			matrix[TEACHER] = ((NSDictionary)ses.valueForKeyPath(
					"strings.RujelBase_Base.SettingsBase.teacher")).mutableClone();
			matrix[TEACHER].takeValueForKey(value, "value");
			matrix[TEACHER].takeValueForKey(qual, "qualifier");
		} else {
			descriptions = (NSArray)ses.valueForKeyPath("modules.settingQualifiers");
		}
    	if(descriptions == null || descriptions.count() == 0)
    		return matrix;
    	Enumeration enu = descriptions.objectEnumerator();
    	NSDictionary desc = null;
    	while (enu.hasMoreElements()) {
			desc = (NSDictionary) enu.nextElement();
			if(!key.equals(desc.valueForKey("keyPath")))
				continue;
			String selector = (String)desc.valueForKey("selector");
			if(selector == null)
				selector = "=";
			if(selector.equals(EOQualifier.stringForOperatorSelector(qual.selector())))
					break;
			desc = null;
		}
    	if(desc == null) {
    		return null;
    	}
    	NSMutableDictionary dict = desc.mutableClone();
    	String presentPath = (String)desc.valueForKey("presentPath");
    	if(presentPath != null)
    		value = NSKeyValueCodingAdditions.Utility.valueForKeyPath(
    				value, presentPath);
//    	if(value == null || value == NullValue)
//    		value = "&oslash;";
		dict.takeValueForKey(value, "value");
    	dict.takeValueForKey(qual, "qualifier");
    	String field = (String)desc.valueForKey("field");
    	if("group".equalsIgnoreCase(field)) {
    		matrix[GROUP] = dict;
    	} else if ("subject".equalsIgnoreCase(field)) {
    		matrix[SUBJECT] = dict;
    	} else if ("teacher".equalsIgnoreCase(field)) {
    		matrix[TEACHER] = dict;
    	} else {
    		if(matrix[OTHER] == null)
       			matrix[OTHER] = ((NSDictionary)ses.valueForKeyPath(
       					"strings.RujelBase_Base.SettingsBase.otherDesc")).mutableClone();
    		NSMutableArray others = (NSMutableArray)matrix[OTHER].valueForKey("list");
    		if(others == null) {
    			others = new NSMutableArray(dict);
    			matrix[OTHER].takeValueForKey(others, "list");
    		} else {
    			others.addObject(dict);
    		}
    	}
    	return matrix;
    }
    
    public NSDictionary dict() {
    	if(islist)
    		return (NSDictionary)session().valueForKeyPath(
				"strings.RujelBase_Base.SettingsBase.otherDesc");
    	if(matrix == null)
    		return null;
    	return matrix[index];
    }
    
    public boolean hide() {
    	if(list != null) {
    		return matrix[index] == null;
    	} else {
    		NSMutableDictionary[] omit = (NSMutableDictionary[])valueForBinding("omit");
    		return (omit != null && omit[index] != null);
    	}
    }
    
    public Boolean showOther() {
    	if(matrix == null || matrix[OTHER] == null)
    		return Boolean.FALSE;
    	if(valueForBinding("omit") != null)
    		return Boolean.FALSE;
    	return Boolean.TRUE;
    }
    
    protected NamedFlags _access;
    public NamedFlags access() {
    	if(_access != null)
    		return _access;
    	_access = (NamedFlags)valueForBinding("access");
    	if(_access != null)
    		return _access;
    	_access = (NamedFlags)session().valueForKeyPath("readAccess.FLAGS.SettingByCourse");
    	return _access;
    }
    
	public String editorHead() {
    	if(Various.boolForObject(valueForBinding("readOnly")))
    		return null;
    	NamedFlags access = (NamedFlags)valueForBinding("access");
    	if(access == null)
    		access = (NamedFlags)session().valueForKeyPath("readAccess.FLAGS.SettingByCourse");
    	if(access.flagForKey("edit") || access.flagForKey("delete")) {
    		if(access.flagForKey("edit") && access.flagForKey("delete"))
    			return "<td colspan = \"2\"/>";
    		else
    			return "<td/>";
    	}
    	return null;
	}
	
    public boolean isBase() {
    	return (bc() instanceof SettingsBase);
    }
    
    public String groupStyle() {
    	if(bc().valueForKey("course") != null)
    		return null;
    	if(bc().valueForKey("eduGroup") != null)
    		return "gerade";
    	if(bc().valueForKey("grade") != null)
    		return "highlight";
    	return null;
    }

    public String subjectStyle() {
    	if(bc().valueForKey("course") != null)
    		return null;
    	if(bc().valueForKey("cycle") != null)
    		return "ungerade";
    	return null;
    }

    public String teacherStyle() {
    	if(bc().valueForKey("course") != null)
    		return null;
    	if(bc().valueForKey("teacher") != null)
    		return "green";
    	return null;
    }

    public boolean isStateless() {
		return true;
	}
	public boolean synchronizesVariablesWithBindings() {
        return false;
	}
	
	public void reset() {
		islist = false;
		_bc = null;
		_access = null;
//		descriptions = null;
		list = null;
		item = null;
		matrix = null;
		noEdit = null;
		rowspan = null;
		super.reset();
	}

	public WOActionResults edit() {
		WOComponent editor = pageWithName("ByCourseEditor");
		editor.takeValueForKey(context().page(), "returnPage");
		editor.takeValueForKey(bc(), "byCourse");
		editor.takeValueForKey(valueForBinding("editList"), "editList");
    	if(hasBinding("pushByCourse")) {
    		editor.takeValueForKey(this, "resultGetter");
    		editor.takeValueForKey("^pushByCourse", "pushToKeyPath");
    	}
		return editor;
	}
	
	public void delete() {
		if(!(bc() instanceof EOEnterpriseObject))
			return;
		EOEnterpriseObject bc = (EOEnterpriseObject)bc();
		EOEditingContext ec = bc.editingContext();
		ec.lock();
		SettingsBase base = null;
		if(bc instanceof SettingsBase)
			base = (SettingsBase)bc;
		else
			base = (SettingsBase)bc.valueForKey("settingsBase");
		try {
			ec.deleteObject(bc);
			ByCourseEditor.logger.log(WOLogLevel.COREDATA_EDITING,"Deleting SettingByCourse: "
					+ base.key(), new Object[] {session(),bc.valueForKey("settingsBase")});
			String path = (String)valueForBinding("pushByCourse");
			if(path != null) {
				WOComponent getter = parent();
	    		while (path != null && path.charAt(0) == '^') {
	    			path = path.substring(1);
					path = (String)getter.valueForBinding(path);
					getter = getter.parent();
				}
	    		if(path != null)
	    			getter.takeValueForKeyPath(bc, path);
			}
			ec.saveChanges();
			NSMutableArray alist = (NSMutableArray)valueForBinding("editList");
			if(alist != null)
				alist.removeObject(bc);
		} catch (Exception e) {
			ByCourseEditor.logger.log(WOLogLevel.INFO,"Could not delete SettingByCourse: "
					+ base.key(), new Object[] {session(),bc,e});
			session().takeValueForKey(e.getMessage(), "message");
		} finally {
			ec.unlock();
		}
	}
}