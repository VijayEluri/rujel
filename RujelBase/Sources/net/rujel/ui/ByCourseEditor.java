// ByCourseEditor.java: Class file for WO Component 'ByCourseEditor'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.ui;

import java.util.Enumeration;
import java.util.logging.Logger;

import net.rujel.base.QualifiedSetting;
import net.rujel.base.SettingsBase;
import net.rujel.interfaces.EduCourse;
import net.rujel.interfaces.EduCycle;
import net.rujel.reusables.ModulesInitialiser;
import net.rujel.reusables.SettingsReader;
import net.rujel.reusables.Various;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;
import com.webobjects.appserver.WOActionResults;

// Generated by the WOLips Templateengine Plug-in at Jul 18, 2009 2:20:41 PM
public class ByCourseEditor extends com.webobjects.appserver.WOComponent {
	public static final Logger logger = Logger.getLogger("rujel.base");
	
	public WOComponent returnPage;
	public String pushToKeyPath;
	public NSKeyValueCodingAdditions resultGetter;
	
	public SettingsBase base;
	protected QualifiedSetting byCourse;

	public boolean advanced = false;
	public Object item;
	
	public NSMutableArray editors;
	public NSKeyValueCoding currEditor;
	
	public NSMutableArray editList;
	public NSArray grades;
	public NSMutableDictionary tmpValues = new NSMutableDictionary();
	public NSMutableDictionary params = new NSMutableDictionary();
	
	public EOEditingContext ec() {
		return base.editingContext();
	}
	
    public ByCourseEditor(WOContext context) {
        super(context);
        setCachingEnabled(false);
		int maxGrade = SettingsReader.intForKeyPath("edu.maxGrade", 11);
		int minGrade = SettingsReader.intForKeyPath("edu.minGrade", 1);
		Integer[] grds = new Integer[maxGrade - minGrade + 1];
		for (int i = 0; i < grds.length; i++) {
			grds[i] = new Integer(minGrade + i);
		}
		grades = new NSArray(grds);
		editors = QualifiedSetting.editors(context.session());
    }

    public void setQualifier(EOQualifier qual) {
    	if(qual == null)
    		return;
    	advanced = (editors == null || editors.count() == 0);
    	if(advanced) return;
    	params.removeAllObjects();
    	try {
			QualifiedSetting.analyseQual(qual, params, editors);
		} catch (QualifiedSetting.AdvancedQualifierException aqe) {
			advanced = true;
		}
    }

    public Object value() {
    	if(currEditor == null)
    		return null;
    	Object result = params.valueForKey(Parameter.attribute(currEditor));
    	if(result instanceof NSArray) {
        	Number idx = (Number)currEditor.valueForKey("selection");
        	if(idx != null) {
        		if(idx.intValue() < 0 || idx.intValue() >= ((NSArray)result).count())
        			return null;
        		result = ((NSArray)result).objectAtIndex(idx.intValue());
        	}
    	}
    	return result;
    }
    
    public void setValue(Object value) {
    	if(currEditor == null)
    		return;
    	String key = Parameter.attribute(currEditor);
    	if(Various.boolForObject(currEditor.valueForKey("or"))) {
    		NSMutableArray list = (NSMutableArray)params.valueForKey(key);
    		if(list == null) {
    			if(value != null) {
    				params.takeValueForKey(new NSMutableArray(value),key);
					currEditor.takeValueForKey(new Integer(0), "selection");
    			}
    		} else {
    			Number idx = (Number)currEditor.valueForKey("selection");
    			if(idx == null || idx.intValue() < 0 || idx.intValue() >= list.count()) {
    				if(value != null) {
    					currEditor.takeValueForKey(new Integer(list.count()), "selection");
    					list.addObject(value);
    				}
    			} else {
    				if(value == null)
    					list.removeObjectAtIndex(idx.intValue());
    				else
    					list.replaceObjectAtIndex(value, idx.intValue());
    			}
    		}
    	} else {
    		params.takeValueForKey(value,key);
    	}
    }
    
    public String editorClass() {
    	if(currEditor == null) {
    		if(item == null)
    			return "selection";
    		else
    			return "grey";
    	} else {
    		if (currEditor == item)
    			return "selection";
    		else
    			return "backfield2"; 
    	}
    }
    
    public WOActionResults doneEditing() {
    	currEditor = null;
    	return null;
    }
    
    public WOActionResults selectGrade() {
    	if(params.valueForKey("grade") == null) {
    		Number min = (Number)params.valueForKey("min_grade");
    		if(min != null && min.equals(params.valueForKey("max_grade")))
    			params.takeValueForKey(min, "grade");
    	}
    	if(params.valueForKey("grade") != null) {
    		params.removeObjectForKey("min_grade");
    		params.removeObjectForKey("max_grade");
    		currEditor.takeValueForKey("=", "qualifierSelector");
    		currEditor.takeValueForKey(null, "secondSelector");
    	} else {
    		currEditor.takeValueForKey(">=", "qualifierSelector");
    		currEditor.takeValueForKey("<=", "secondSelector");
    	}
    	currEditor = null;
    	return null;
    	/*
    	Integer value = (Integer)tmpValues.valueForKey("value");
    	NSMutableDictionary dict = currDict();
    	if(dict == null || !"grade".equals(dict.valueForKeyPath("editor")) 
    			|| (currQ != common)) {
    		dict = ((NSDictionary)currEditor).mutableClone();
    		currQ[crIdx.intValue()] = dict;
    	}
		dict.takeValueForKey(value, "value");
    	if(value != null) {
    		EOQualifier qual = new EOKeyValueQualifier("cycle.grade",
    				EOQualifier.QualifierOperatorEqual, value);
    		dict.takeValueForKey(qual, "qualifier");
    		dict.takeValueForKey(value, "value");
    		dict.takeValueForKey(null, "max");
    		dict.takeValueForKey(null, "qualifierLow");
    		dict.takeValueForKey(null, "min");
    		dict.takeValueForKey(null, "qualifierHigh");
    	} else {
    		dict.takeValueForKey(null, "qualifier");
    		value = (Integer)tmpValues.valueForKey("min");
    		boolean none = (value == null);
    		dict.takeValueForKey(value, "min");
    		StringBuilder buf = new StringBuilder(8);
    		if(!none) {
        		EOQualifier qual = new EOKeyValueQualifier("cycle.grade",
        				EOQualifier.QualifierOperatorGreaterThanOrEqualTo, value);
        		dict.takeValueForKey(qual, "qualifierLow");
        		buf.append(value);
    		} else {
        		dict.takeValueForKey(null, "qualifierLow");
    		}
    		value = (Integer)tmpValues.valueForKey("max");
    		dict.takeValueForKey(value, "max");
    		if(value != null) {
    			none = false;
        		EOQualifier qual = new EOKeyValueQualifier("cycle.grade",
        				EOQualifier.QualifierOperatorLessThanOrEqualTo, value);
        		dict.takeValueForKey(qual, "qualifierHigh");
        		if(buf.length() == 0)
        			buf.append("&le;");
        		else
        			buf.append("...");
        		buf.append(value);
    		} else {
        		dict.takeValueForKey(null, "qualifierHigh");
        		if(buf.length() > 0)
        			buf.insert(0, "&ge;");
    		}
    		if(buf.length() > 0)
    			dict.takeValueForKey(buf.toString(), "value");
    		else
    			currQ[crIdx.intValue()] = null;
    	}
    	return doneEditing(); */
    }
    
    public void setPushToKeyPath(String path) {
    	if(resultGetter instanceof WOComponent) {
    		WOComponent getter = (WOComponent)resultGetter;
    		while (path != null && path.charAt(0) == '^') {
    			path = path.substring(1);
				path = (String)getter.valueForBinding(path);
				getter = getter.parent();
			}
    		resultGetter = getter;
    	}
    	pushToKeyPath = path;
    }
    
    public void setByCourse(QualifiedSetting set) {
    	byCourse = set;
    	if(set == null)
    		return;
    	if(base == null)
    		base = (SettingsBase)byCourse.valueForKey("settingsBase");
    	if(byCourse != null)
    		setQualifier((EOQualifier)byCourse.valueForKey("qualifier"));
    	tmpValues.takeValueForKey(set.eduYear(), QualifiedSetting.EDU_YEAR_KEY);
    }
    
    public String onclick() {
		String href = context().componentActionURL();
		String result = "ajaxPopupAction('" + href + "');";
		return result;
    }
    
    public WOActionResults save() {
    	returnPage.ensureAwakeInContext(context());
    	if(base == null)
    		return returnPage;
//		NSComparator comparator = new SettingsBase.Comparator();
    	EOEditingContext ec = base.editingContext();
    	EOQualifier qual = QueryParams.paramsToQual(params, editors, EduCourse.entityName, this, ec, null);
    	if(qual == null)
    		return returnPage;
    	Integer num = (byCourse == null)?null:byCourse.sort();
    	if(!base.isSingle()) {
    		Enumeration enu = base.qualifiedSettings().objectEnumerator();
    		Integer eduYear = (Integer)session().valueForKey("eduYear");
    		int numb = 0;
    		while (enu.hasMoreElements()) {
    			QualifiedSetting bc = (QualifiedSetting) enu.nextElement();
    			if(bc == byCourse)
    				continue;
    			if(bc.valueForKey("eduYear") != null 
    					&& !eduYear.equals(bc.valueForKey("eduYear")))
    				continue;
    			if(qual.equals(bc.getQualifier())) {
    				session().takeValueForKey(application().valueForKeyPath(
    						"strings.RujelBase_Base.SettingsBase.duplicateByCourse"), "message");
    				return returnPage;
    			}
    			if(num == null && numb < bc.sort().intValue())
    				numb = bc.sort().intValue();
    		}
    		if(num == null)
    			num = new Integer(numb +1);
    	} // search for same
    	ec.lock();
    	try {
    		if(byCourse == null) {
				byCourse = (QualifiedSetting)EOUtilities.createAndInsertInstance(
						ec,QualifiedSetting.ENTITY_NAME);
				byCourse.takeValueForKey(tmpValues.valueForKey(
						SettingsBase.NUMERIC_VALUE_KEY), SettingsBase.NUMERIC_VALUE_KEY);
				byCourse.takeValueForKey(tmpValues.valueForKey(
						SettingsBase.TEXT_VALUE_KEY), SettingsBase.TEXT_VALUE_KEY);
				byCourse.addObjectToBothSidesOfRelationshipWithKey(base, "settingsBase");
			} // create from dict
    		byCourse.setQualifier(qual);
    		if(num == null)
    			num = new Integer(1);
    		byCourse.setSort(num);
			byCourse.takeValueForKey(tmpValues.valueForKey(
					QualifiedSetting.EDU_YEAR_KEY), QualifiedSetting.EDU_YEAR_KEY);
			if(editList != null) {
				if(editList.containsObject(byCourse)) {
					EOSortOrdering.sortArrayUsingKeyOrderArray(editList,ModulesInitialiser.sorter);
				} else {
					/*boolean done = false;
					for (int i = 0; i < editList.count(); i++) {
						QualifiedSetting qs = (QualifiedSetting)editList.objectAtIndex(i);
						if(qs.compare(byCourse) < 0) {
							editList.insertObjectAtIndex(byCourse, i);
							done = true;
							break;
						}
					}
					if(!done)*/
						editList.addObject(byCourse);
				} // insert into list
			}
			if(pushToKeyPath != null) {
				if(resultGetter == null)
					resultGetter = returnPage;
				resultGetter.takeValueForKeyPath(byCourse, pushToKeyPath);
			}
			ec.saveChanges();
			logger.log(WOLogLevel.COREDATA_EDITING,"Edited QualifiedSetting: " + base.key(),
					new Object[] {session(),byCourse});
    	} catch (Exception e) {
			logger.log(WOLogLevel.INFO,"Failed editing QualifiedSetting: " + base.key(),
					new Object[] {session(),byCourse,e});
    		session().takeValueForKey(e.getMessage(), "message");
    		ec.revert();
    	} finally {
    		ec.unlock();
    	}
    	return returnPage;
    }

    public WOActionResults pickGrade() {
    	tmpValues.takeValueForKey(item, "currGrade");
    	cyclesForGrade();
    	return null;
    }
    
    protected void cyclesForGrade() {
    	Integer grade = (Integer)tmpValues.valueForKey("currGrade");
    	if(grade == null) {
    		tmpValues.removeObjectForKey("cycles");
    		return;
    	}
    	NSArray list = EduCycle.Lister.cyclesForGrade(grade, base.editingContext());
    	if(list == null || list.count() == 0) {
    		tmpValues.removeObjectForKey("cycles");
    		return;
    	}
    	Enumeration enu = list.objectEnumerator();
    	NSMutableArray resut = new NSMutableArray();
    	Object currCycle = value();
    	Boolean hasExtra = Boolean.FALSE;
    	while (enu.hasMoreElements()) {
			EduCycle cycle = (EduCycle) enu.nextElement();
			NSMutableDictionary row = new NSMutableDictionary(cycle,"cycle");
			row.takeValueForKey(cycle.subject(), "subject");
			row.takeValueForKey((cycle == currCycle)?"selection":"highlight", "styleClass");
			if(hasExtra != null) {
				try {
					Object extra = cycle.valueForKey("extraInfo");
					if(extra != null) {
						hasExtra = Boolean.TRUE;
						row.takeValueForKey(extra, "extraInfo");
					}
				} catch (NSKeyValueCoding.UnknownKeyException e) {
					hasExtra = null;
				}
			}
			resut.addObject(row);
		}
    	tmpValues.takeValueForKey(hasExtra, "hasExtra");
    	tmpValues.takeValueForKey(resut, "cycles");
    }
    
	public WOActionResults selectCycle() {
    	EduCycle value = (EduCycle)NSKeyValueCoding.Utility.valueForKey(item,"cycle");
    	setValue(value);
    	return null;
//		return doneEditing();
	}
}