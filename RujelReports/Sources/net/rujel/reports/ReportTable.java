// ReportTable.java: Class file for WO Component 'ReportTable'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.reports;

import java.util.Enumeration;

import net.rujel.reusables.DisplayAny;
import net.rujel.reusables.Various;

import com.webobjects.appserver.*;
import com.webobjects.foundation.*;
import com.webobjects.appserver.WOActionResults;

// Generated by the WOLips Templateengine Plug-in at Apr 10, 2009 9:49:59 AM
public class ReportTable extends com.webobjects.appserver.WOComponent {
	public NSKeyValueCodingAdditions itemDict;
	public Object itemRow;
	public Object item;
	public NSKeyValueCodingAdditions subDict;

	public NSKeyValueCodingAdditions valueOf = new DisplayAny.ValueReader(this);;
	
	public ReportTable(WOContext context) {
        super(context);
    }

	public void appendToResponse(WOResponse aResponse, WOContext aContext) {
		setItemRow(null);
		setItemDict(null);
		super.appendToResponse(aResponse, aContext);
	}

	public String rowID() {
		if(itemRow == null)
			return null;
    	if(itemRow.equals(valueForBinding("currObject")))
    		return "curr";
    	return null;
    }
	
	public void setItemRow(Object nextRow) {
		itemRow = nextRow;
    	setValueForBinding(itemRow, "itemRow");
	}
	
    public void setItemDict(NSKeyValueCodingAdditions newDict) {
    	itemDict = newDict;
    	if(itemRow == null || itemDict == null) {
    		item = null;
    	} else if(itemDict.valueForKey("value") != null) {
    		item = valueOf.valueForKeyPath("itemRow.itemDict.value");
    	} else {
    		String keyPath = (String)itemDict.valueForKey("keyPath");
    		if(keyPath == null || keyPath.equals("."))
    			item = itemRow;
    		else
    			item = NSKeyValueCodingAdditions.Utility.valueForKeyPath(itemRow, keyPath);
    	}
    	setValueForBinding(itemDict, "itemDict");
    	setValueForBinding(item, "item");
     }
	
	public boolean isStateless() {
		return true;
	}
	
	public boolean synchronizesVariablesWithBindings() {
		return false;
	}
	
	public void reset() {
		itemRow = null;
		item = null;
		super.reset();
	}

	public String onClick() {
		if(hasBinding("onClick"))
			return (String)valueForBinding("onClick");
		if(subDict != null)
			return (String)valueOf.valueForKeyPath("item.subDict.onclick");
		return (String)valueOf.valueForKeyPath("item.itemDict.onclick");
	}
	
	public WOActionResults select() {
		if(hasBinding("selectAction"))
			return (WOActionResults) valueForBinding("selectAction");
		if(itemDict instanceof NSMutableDictionary)
			DisplayAny.ValueReader.clearResultCache(
					(NSMutableDictionary)itemDict, itemRow, true);
		String nextPage = (String)valueForKeyPath("subDict.nextPage");
		NSKeyValueCodingAdditions pageDict = (nextPage==null)?itemDict:subDict;
		if(nextPage == null)
			nextPage = (String)valueForKeyPath("itemDict.nextPage");
		if(nextPage != null) {
			WOComponent result = pageWithName(nextPage);
			boolean popup = Various.boolForObject(pageDict.valueForKey("popup"));
			if(popup) {
				result.takeValueForKey(context().page(), "returnPage");
			} else {
				session().takeValueForKey(context().page(),"pushComponent");
			}
			pageDict = (NSDictionary)pageDict.valueForKey("pageParams");
			Enumeration enu = ((NSDictionary)pageDict).keyEnumerator();
			while (enu.hasMoreElements()) {
				String key = (String) enu.nextElement();
				Object value = DisplayAny.ValueReader.evaluateValue(
						pageDict.valueForKey(key), "item", this);
				result.takeValueForKey(value, key);
			}

			return result;
		}
		if(valueForKeyPath("subDict.invokeAction") != null)
			return (WOActionResults)valueOf.valueForKeyPath("item.subDict.invokeAction");
		return (WOActionResults)valueOf.valueForKeyPath("item.itemDict.invokeAction");
	}
	
	public Boolean disabledClick() {
		if(Various.boolForObject(valueForBinding("disabled")))
			return Boolean.TRUE;
		if(subDict != null) {
			if(Various.boolForObject(valueOf.valueForKeyPath("item.subDict.disabled")))
				return Boolean.TRUE;
		}
		if(Various.boolForObject(valueOf.valueForKeyPath("item.itemDict.disabled")))
			return Boolean.TRUE;
		if(onClick() != null)
			return Boolean.FALSE;
		return Boolean.TRUE;
	}
	
	public String cellClass() {
		if(hasBinding("cellClass"))
			return (String)valueForBinding("cellClass");
		if(subDict != null) {
			String result = (String)valueOf.valueForKeyPath("item.subDict.class");
			if(result != null)
				return result;
		}
		return (String)valueOf.valueForKeyPath("item.itemDict.class");
	}
}