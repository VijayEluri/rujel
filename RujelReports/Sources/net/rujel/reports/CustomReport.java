// CustomReport.java: Class file for WO Component 'CustomReport'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.reports;

import java.util.Enumeration;
import java.util.logging.Logger;

import net.rujel.reusables.DisplayAny;
import net.rujel.reusables.SessionedEditingContext;
import net.rujel.reusables.Various;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOAndQualifier;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOFetchSpecification;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.*;

// Generated by the WOLips Templateengine Plug-in at Apr 28, 2009 12:10:12 PM
public class CustomReport extends com.webobjects.appserver.WOComponent {
	public EOEditingContext ec;
	public NSMutableArray reports;
	public NSMutableArray display;
	public NSArray list;
	public NSMutableDictionary currReport;
	public NSMutableDictionary params;

	public NSKeyValueCoding item;

	public CustomReport(WOContext context) {
        super(context);
        reports = ReportsModule.reportsFromDir("CustomReport", context);
        params = new NSMutableDictionary();
        ec = new SessionedEditingContext(context.session());
    }
    
    public String title() {
		return (String)application().valueForKeyPath(
				"strings.RujelReports_Reports.CoursesReport.title");
	}

    public void go() {
    	NSMutableArray quals = new NSMutableArray();
    	NSKeyValueCoding dict = (NSKeyValueCoding)currReport.valueForKey("qualifier");
    	if(dict != null) { // add forced qualifier if exists
    		NSArray args = (NSArray)dict.valueForKey("args");
    		if(args != null && args.count() > 0) {
    			Enumeration enu = args.objectEnumerator();
    			args = new NSMutableArray();
    			while (enu.hasMoreElements()) {
    				Object arg = enu.nextElement();
    				Object param = DisplayAny.ValueReader.evaluateValue(arg, "params", this);
    				if(param == null)
    					param = NullValue;
    				((NSMutableArray)args).addObject(param);
    			}
    		}
    		String qualifierFormat = (String)dict.valueForKey("formatString");
    		EOQualifier qual = EOQualifier.qualifierWithQualifierFormat(qualifierFormat, args);
    		quals.addObject(qual);
    	} // add forced qualifier if exists
    	
    	NSArray paramDicts = (NSArray)currReport.valueForKey("params");
    	Enumeration enu = paramDicts.objectEnumerator();
    	while (enu.hasMoreElements()) {
			dict = (NSKeyValueCoding) enu.nextElement();
			EOQualifier qual = Parameter.qualForParam(dict, params);
			if(qual != null)
				quals.addObject(qual);
		}
    	EOQualifier qual = null;
    	if(quals.count() > 0) {
    		if(quals.count() > 1)
    			qual = new EOAndQualifier(quals);
    		else
    			qual = (EOQualifier)quals.objectAtIndex(0);
    	}
    	String entityName = (String)currReport.valueForKey("entity");
    	EOFetchSpecification fs = new EOFetchSpecification(entityName,qual,null);
    	fs.setRefreshesRefetchedObjects(true);
    	NSArray args = (NSArray)currReport.valueForKey("prefetch");
    	if(args != null && args.count() > 0)
    		fs.setPrefetchingRelationshipKeyPaths(args);
    	list = ec.objectsWithFetchSpecification(fs);
    	if(list != null && list.count() > 1)
    		list = sort(list,display,Various.boolForObject(currReport.valueForKey("sortAll")));
    	display = (NSMutableArray)currReport.valueForKey("properties");
    }
    
    public static NSArray sort(NSArray list, NSArray properties,boolean all) {
    	if(list == null || list.count() == 0)
    		return list;
    	if(properties == null || properties.count() == 0)
    		return list;
    	NSMutableArray sorter = new NSMutableArray();
    	Enumeration enu = properties.objectEnumerator();
    	while (enu.hasMoreElements()) {
			NSKeyValueCoding prop = (NSKeyValueCoding) enu.nextElement();
			String key = (String)prop.valueForKey("comparison");
			if(key == null && !all)
				continue;
			NSSelector selector = EOSortOrdering.CompareAscending;
			if(key != null) {
				try {
					selector = (NSSelector)EOSortOrdering.class.getField(key).get(null);
				} catch (Exception e) {
					Object[] args = new Object[] {e,prop};
					Logger.getLogger("rujel.reports").log(WOLogLevel.WARNING,
							"Error parsing comparison for property "
							+ prop.valueForKey("title"),args);
					selector = EOSortOrdering.CompareAscending;
				};
			}
			key = (String)prop.valueForKey("sortKey");
			if(key == null)
				key = (String)prop.valueForKey("keyPath");
			if(key == null)
				continue;
			EOSortOrdering so = EOSortOrdering.sortOrderingWithKey(key, selector);
			sorter.addObject(so);
		}
    	return EOSortOrdering.sortedArrayUsingKeyOrderArray(list, sorter);
    }
}