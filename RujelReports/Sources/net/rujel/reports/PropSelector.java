package net.rujel.reports;

import java.util.Enumeration;

import net.rujel.reusables.DisplayAny;
import net.rujel.reusables.ModulesInitialiser;
import net.rujel.reusables.Various;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSKeyValueCoding;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;

// Generated by the WOLips Templateengine Plug-in at Apr 28, 2009 9:15:35 AM
public class PropSelector extends com.webobjects.appserver.WOComponent {

	public NSKeyValueCoding item;
	public NSKeyValueCoding subItem;
	public NSMutableArray reports;
	public NSMutableArray display;

	public PropSelector(WOContext context) {
        super(context);
    }
	
	public void appendToResponse(WOResponse aResponse, WOContext aContext) {		
    	reports = (NSMutableArray)valueForBinding("available");
    	display = (NSMutableArray)valueForBinding("active");
    	if((display == null || display.count() == 0) && 
    			Various.boolForObject(valueForBinding("initDefault"))) {
    		modifyList();
    	}
    		
    	super.appendToResponse(aResponse, aContext);
	}
	
	public void takeValuesFromRequest(WORequest aRequest, WOContext aContext) {
	   	reports = (NSMutableArray)valueForBinding("available");
    	super.takeValuesFromRequest(aRequest, aContext);
	}
	
    public WOActionResults invokeAction(WORequest aRequest, WOContext aContext) {
    	reports = (NSMutableArray)valueForBinding("available");
    	return super.invokeAction(aRequest, aContext);
    }

	
	public void modifyList() {
//		display = (NSMutableArray)valueForBinding("active");
//		if(display == null)
			display = (NSMutableArray)valueForBinding("forceActive");
		if(display == null)
			display = new NSMutableArray();
		if(item != null) {
			reports.takeValueForKey(Boolean.FALSE, "active");
			item.takeValueForKey(Boolean.TRUE, "active");
			NSArray subs = (NSArray)item.valueForKey("subParams");
			if(subs != null)
				subs.takeValueForKey(Boolean.TRUE, "active");
			display.addObject(item);
			setValueForBinding(display, "active");
			return;
		}
		EOSortOrdering.sortArrayUsingKeyOrderArray(reports, ModulesInitialiser.sorter);
		Enumeration enu = reports.objectEnumerator();
		while (enu.hasMoreElements()) {
			NSMutableDictionary rDict = (NSMutableDictionary) enu.nextElement();
			NSMutableArray sub = (NSMutableArray) rDict.valueForKey("subParams");
			if(sub != null)
				EOSortOrdering.sortArrayUsingKeyOrderArray(sub, ModulesInitialiser.sorter);
			if(!Various.boolForObject(rDict.valueForKey("active")))
				continue;
			DisplayAny.ValueReader.clearResultCache(rDict, null, true);
			rDict = rDict.mutableClone();
			display.addObject(rDict);
			if(sub != null) {
				Enumeration subEnu = sub.objectEnumerator();
				sub = new NSMutableArray();
				while (subEnu.hasMoreElements()) {
					NSMutableDictionary sDict = (NSMutableDictionary) subEnu.nextElement();
					if(Various.boolForObject(sDict.valueForKey("active")))
						sub.addObject(sDict);
				}
				rDict.takeValueForKey(sub, "subParams");
			}
		}
		setValueForBinding(display, "active");
	}

	public String subRowStyle() {
		if(item == null || Various.boolForObject(item.valueForKey("active")))
			return null;
		return "display:none;";
	}

	public String tableStyle() {
		if(Various.boolForObject(valueForBinding("hide")))
			return "display:none;";
		return null;
	}

	public void reset() {
		super.reset();
		reports = null;
		display = null;
	}

	public boolean isStateless() {
		return true;
	}
	
	public boolean synchronizesVariablesWithBindings() {
        return false;
	}
}