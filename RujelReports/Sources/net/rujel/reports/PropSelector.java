// PropSelector.java: Class file for WO Component 'PropSelector'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.reports;

import java.util.Enumeration;

import net.rujel.reusables.DisplayAny;
import net.rujel.reusables.ModulesInitialiser;
import net.rujel.reusables.Various;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSKeyValueCoding;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;

// Generated by the WOLips Templateengine Plug-in at Apr 28, 2009 9:15:35 AM
public class PropSelector extends com.webobjects.appserver.WOComponent {

	public NSKeyValueCoding item;
	public NSKeyValueCoding subItem;
	public NSMutableArray reports;
	public NSMutableArray display;

	public PropSelector(WOContext context) {
        super(context);
    }
	
	public WOElement template() {
		reports = (NSMutableArray)valueForBinding("available");
		return super.template();
	}
	
	public void appendToResponse(WOResponse aResponse, WOContext aContext) {		
    	reports = (NSMutableArray)valueForBinding("available");
    	display = (NSMutableArray)valueForBinding("active");
    	if((display == null || display.count() == 0) && 
    			Various.boolForObject(valueForBinding("initDefault"))) {
    		selectOne();
    	}
    		
    	super.appendToResponse(aResponse, aContext);
	}
	
    public void selectOne() {
    	display = (NSMutableArray)valueForBinding("forceActive");
    	if(display == null)
    		display = new NSMutableArray();
    	if(item == null) {
    		display.addObjectsFromArray(prepareActiveList(reports));
    		setValueForBinding(display, "active");
    		return;
    	}
    	reports.takeValueForKey(Boolean.FALSE, "active");
    	item.takeValueForKey(Boolean.TRUE, "active");
    	NSArray subs = (NSArray)item.valueForKey("subParams");
    	if(subs != null)
    		subs.takeValueForKey(Boolean.TRUE, "active");
    	display.addObject(item);
    	setValueForBinding(display, "active");
    }
	
	public static NSMutableArray prepareActiveList(NSMutableArray available) {
		EOSortOrdering.sortArrayUsingKeyOrderArray(available, ModulesInitialiser.sorter);
		Enumeration enu = available.objectEnumerator();
		NSMutableArray active = new NSMutableArray();
		while (enu.hasMoreElements()) {
			NSMutableDictionary rDict = (NSMutableDictionary) enu.nextElement();
			NSMutableArray sub = (NSMutableArray) rDict.valueForKey("subParams");
			if(sub != null)
				EOSortOrdering.sortArrayUsingKeyOrderArray(sub, ModulesInitialiser.sorter);
			if(!Various.boolForObject(rDict.valueForKey("active")))
				continue;
			DisplayAny.ValueReader.clearResultCache(rDict, null, true);
			rDict = rDict.mutableClone();
			active.addObject(rDict);
			if(sub != null) {
				Enumeration subEnu = sub.objectEnumerator();
				sub = new NSMutableArray();
				while (subEnu.hasMoreElements()) {
					NSMutableDictionary sDict = (NSMutableDictionary) subEnu.nextElement();
					if(Various.boolForObject(sDict.valueForKey("active"))) {
						sub.addObject(sDict);
					}
				}
				rDict.takeValueForKey(sub, "subParams");
			}
		}
		return active;
	}

	public String subRowStyle() {
		if(item == null || Various.boolForObject(item.valueForKey("active")))
			return null;
		return "display:none;";
	}

	public String tableStyle() {
		if(Various.boolForObject(valueForBinding("hide")))
			return "display:none;";
		return null;
	}

	public void reset() {
		super.reset();
		reports = null;
		display = null;
	}

	public boolean isStateless() {
		return true;
	}
	
	public boolean synchronizesVariablesWithBindings() {
        return false;
	}
}