// StudentReporter.java

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.ui;

import java.util.Enumeration;

import net.rujel.base.BaseCourse;
import net.rujel.interfaces.EduCourse;
import net.rujel.interfaces.EduGroup;
import net.rujel.interfaces.Person;
import net.rujel.interfaces.PersonLink;
import net.rujel.interfaces.Student;
import net.rujel.reusables.Period;

import com.webobjects.appserver.*;
import com.webobjects.foundation.*;

// Generated by the WOLips Templateengine Plug-in at Sep 10, 2008 10:31:40 AM
public class StudentReporter extends com.webobjects.appserver.WOComponent {

	public StudentReporter(WOContext context) {
        super(context);
    }
    
	public NSArray courses;
	protected EduGroup mainGroup;

	public Student student;
	public NSTimestamp since;
	public NSTimestamp to;
	public Period period;
	
	public NSArray reports;
    public NSMutableDictionary presenterCache;
    public NSDictionary reporter;
    
	protected static NSTimestamp date2timestamp(java.util.Date date) {
		if(date instanceof NSTimestamp)
			return (NSTimestamp)date;
		else
			return new NSTimestamp(date);
	}

	public boolean isStateless() {
		return true;
	}
	
	public boolean synchronizesVariablesWithBindings() {
        return false;
	}
	
	public void reset() {
		student = null;
		since = null;
		to = null;
		period = null;
//		allWorks = null;
		courses = null;
		reports = null;
		report = null;
		reporter = null;
		courseItem = null;
		_reportItem = null;
		if(presenterCache == null)
			presenterCache = new NSMutableDictionary();
		else
			presenterCache.removeAllObjects();
	}

	public void setCourses(NSArray list) {
		if(list != null) {
			Enumeration enu = list.objectEnumerator();
			mainGroup = null;
			while (enu.hasMoreElements()) {
				EduCourse crs = (EduCourse) enu.nextElement();
				if(mainGroup == null) {
					mainGroup = crs.eduGroup();
				} else if(mainGroup != crs.eduGroup()) {
					mainGroup = null;
					break;
				}
			}
		} else {
			mainGroup = student.recentMainEduGroup();
		}
		courses = BaseCourse.coursesForStudent(list, student);
	}
	
	public void appendToResponse(WOResponse aResponse,WOContext aContext) {
		Thread t = Thread.currentThread();
		int priority = t.getPriority();
		if(parent() != null) {
			student = (Student)valueForBinding("student");
			since = (NSTimestamp)valueForBinding("since");
			reporter = (NSDictionary)valueForBinding("reporter");
			to = (NSTimestamp)valueForBinding("to");
			period = (Period)valueForBinding("period");
			if(period != null) {
				if(since == null)
					since = date2timestamp(period.begin());
				if(to == null)
					to = date2timestamp(period.end());
			}
			//EOEditingContext ec = student.editingContext();

			setCourses((NSArray)valueForBinding("courses"));
		} else {
			t.setPriority(priority -1);
		}
		
		NSMutableDictionary reportSettings = new NSMutableDictionary(student, "student");
		reportSettings.takeValueForKey(since,"since");
		reportSettings.takeValueForKey(to,"to");
		if(period != null)
			reportSettings.takeValueForKey(period,"period");
		reportSettings.takeValueForKey(courses.immutableClone(), "courses");
		reportSettings.takeValueForKey(aContext.userInfoForKey("needData"), "needData");
		reportSettings.takeValueForKey(reporter, "reporter");
		reports = ReporterSetup.prepareReports(aContext.session(), reportSettings);
		if(reportSettings.valueForKey("needData") != null) {
			t.setPriority(priority);
			return;
		} else if (aContext.userInfoForKey("needData") != null) {
			aContext.setUserInfoForKey(null, "needData");
		}
		Enumeration enu = reports.objectEnumerator();
		while (enu.hasMoreElements()) {
			NSDictionary rp = (NSDictionary) enu.nextElement();
			NSArray extraCourses = (NSArray)rp.valueForKey("extraCourses");
			if(extraCourses != null)
				courses = courses.arrayByAddingObjectsFromArray(extraCourses);
		}
		super.appendToResponse(aResponse,aContext);
		t.setPriority(priority);
	}
	
	public EduCourse courseItem;
	public NSKeyValueCoding report;
	protected NSDictionary _reportItem;
	
	public void setReportItem(NSDictionary reportItem) {
		_reportItem = reportItem;
		if(reportItem == null || courseItem == null) {
			report = null;
		} else {
			report = (NSKeyValueCoding)reportItem.objectForKey(courseItem);
		}
	}
	
	public NSDictionary reportItem() {
		return _reportItem;
	}
	
	public String teacher() {
		PersonLink t = (PersonLink)valueForKeyPath("courseItem.teacher");
		if(t == null)
			return null;
		return Person.Utility.fullName(t,true,2,2,2);
	}
	
	public boolean showGroup() {
		return (courseItem != null && courseItem.eduGroup() != mainGroup);
	}
}