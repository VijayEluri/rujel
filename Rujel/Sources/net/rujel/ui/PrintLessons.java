// PrintLessons.java

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.ui;

import java.text.FieldPosition;
import java.text.Format;

import net.rujel.base.MyUtility;
import net.rujel.eduresults.EduPeriod;
import net.rujel.interfaces.*;
import net.rujel.reusables.Period;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;

// Generated by the WOLips Templateengine Plug-in at 02.06.2008 15:37:47
public class PrintLessons extends com.webobjects.appserver.WOComponent {
    public PrintLessons(WOContext context) {
        super(context);
    }
    
    public EduCourse course;
    public Period period;
    
    public EduLesson lessonItem;
    
    public String title() {
    	if(course == null)
    		return null;
    	StringBuffer buf = new StringBuffer(course.eduGroup().name());
    	buf.append(" - ").append(course.cycle().subject());
    	Person tp = course.teacher().person();
    	buf.append(" - ").append(Person.Utility.fullName(tp, true, 2, 1, 1));
    	return buf.toString();
    }
    
    public String eduYear() {
    	if (period instanceof EduPeriod) {
			EduPeriod ep = (EduPeriod) period;
			return ep.presentEduYear();
		} else {
			int year = MyUtility.eduYearForDate(period.end());
			return MyUtility.presentEduYear(year);
		}
    }
    
    public String persentPeriod() {
    	if (period instanceof EduPeriod) {
			EduPeriod ep = (EduPeriod) period;
			return ep.name();
		} else {
			StringBuffer buf = new StringBuffer();
			Format df = MyUtility.dateFormat();
			FieldPosition fp = new FieldPosition(0);
			df.format(period.begin(), buf, fp);
			buf.append(" - ");
			df.format(period.end(), buf, fp);
			return buf.toString();
		}
    }
    
    public String teacher() {
    	if(course == null)
    		return null;
    	Person tp = course.teacher().person();
    	return Person.Utility.fullName(tp, true, 2, 2, 2);
    }
    
    public NSArray lessonList() {
    	NSMutableArray result = course.lessons().mutableClone();
    	NSArray args = new NSArray(new Object[] {period.begin(),period.end()});
    	EOQualifier qual = EOQualifier.qualifierWithQualifierFormat("date >= %@ AND date <= %@", args);
    	EOQualifier.filterArrayWithQualifier(result, qual);
    	EOSortOrdering.sortArrayUsingKeyOrderArray(result, EduLesson.sorter);
    	return result;
    }
    /*
    public String substitute() {
    	if(lessonItem == null)
    		return null;
    	Teacher teacher = lessonItem.substitute();
    	if(teacher == null)
    		return null;
    	StringBuffer result = new StringBuffer();
    	result.append(application().valueForKeyPath("strings.properties.EduLesson.substitute"));
    	result.append(": ");
    	result.append(Person.Utility.fullName(teacher.person(), false, 2, 1, 1));
    	return result.toString();
    }
    */
    
	public EOEnterpriseObject substitute() {
    	if(lessonItem == null)
    		return null;
	   	try {
    		NSArray subs = (NSArray)lessonItem.valueForKey("substitutes");
        	if(subs == null || subs.count() == 0)
        		return null;
        	return (EOEnterpriseObject)subs.objectAtIndex(0);
    	} catch (Exception e) {
    		;
    	}
		return null;
	}

	public String substitutor() {
		EOEnterpriseObject substitute = substitute();
		if(substitute == null)
			return null;
		Teacher teacher = (Teacher)substitute.valueForKey("teacher");
		if(teacher == null)
			return null;
		return Person.Utility.fullName(teacher, false, 2, 1, 1);
	}

    public boolean hasWeight() {
    	return (EduLesson.entityName.equals("Work"));
    }
    /*
    public Integer rowspan() {
    	if(lessonItem == null || lessonItem.substitute() == null) {
    		return null;
    	}
    	return new Integer(2);
    }*/
}