// AdminPage.java: Class file for WO Component 'AdminPage'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.ui;

import java.util.Enumeration;
import java.util.logging.Logger;

import net.rujel.base.ReadAccess;
import net.rujel.reusables.NamedFlags;
import net.rujel.reusables.SessionedEditingContext;
import net.rujel.reusables.Various;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSKeyValueCodingAdditions;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;
import com.webobjects.appserver.WOActionResults;

// Generated by the WOLips Templateengine Plug-in at Jun 17, 2009 2:24:57 PM
public class AdminPage extends com.webobjects.appserver.WOComponent {
	
	public NSMutableArray modules;
	public NSKeyValueCodingAdditions currModule;

	public EOEditingContext ec;
    public Object item;
    public Object grItem;
    protected ReadAccess readAccess;
    public NamedFlags access;
	
    public AdminPage(WOContext context) {
        super(context);
        modules = (NSMutableArray)session().valueForKeyPath("modules.adminModules");
        if(modules == null)
    		modules = new NSMutableArray();
        {
        	NSArray base = (NSArray) session().valueForKeyPath("strings.Strings.baseSettings");
        	Enumeration enu = base.objectEnumerator();
        	while (enu.hasMoreElements()) {
        		Various.addToSortedList(enu.nextElement(),
        				modules, "sort", EOSortOrdering.CompareAscending);
			}
        }
        if(modules != null && modules.count() > 0) {
        	Enumeration enu = modules.objectEnumerator();
        	modules = new NSMutableArray();
        	NSMutableDictionary groups = new NSMutableDictionary();
        	while (enu.hasMoreElements()) {
				NSKeyValueCodingAdditions dict = (NSKeyValueCodingAdditions) enu.nextElement();
				{
					String checkAccess = (String)dict.valueForKey("checkAccess");
					if(checkAccess != null && Various.boolForObject(
							session().valueForKeyPath("readAccess._edit." + checkAccess)))
						continue;
				}
				String grouping = (String)dict.valueForKey("grouping");
				if(grouping == null) {
					modules.addObject(dict);
					continue;
				}
				NSMutableArray grList = (NSMutableArray)groups.valueForKey(grouping);
				if(grList == null) {
					grList = new NSMutableArray(dict);
					NSMutableDictionary grDict = new NSMutableDictionary(grouping,"grouping");
					grDict.takeValueForKey(grouping, "title");
					grDict.takeValueForKey(grList, "grSettings");
					grDict.takeValueForKey("RujelBase", "framework");
					grDict.takeValueForKey("sorting.js", "scriptResource");
					modules.addObject(grDict);
					groups.takeValueForKey(grList, grouping);
				} else {
					grList.addObject(dict);
				}
			}
        	currModule = (NSKeyValueCodingAdditions)modules.objectAtIndex(0);
        }
        ec = new SessionedEditingContext(context.session());
        readAccess = (ReadAccess)context.session().valueForKey("readAccess");
    }
    /*
    public NamedFlags access() {
    	if(item instanceof SettingsBase) {
    		return readAccess.cachedAccessForObject(SettingsBase.ENTITY_NAME, (Integer)null);
    	} else if(item instanceof QualifiedSetting) {
    		return readAccess.cachedAccessForObject(QualifiedSetting.ENTITY_NAME, 
    				(Integer)valueForKeyPath("item.section.sectionID"));
    	}
		String checkAccess = (String)currModule.valueForKey("checkAccess");
		if(checkAccess == null)
			checkAccess = "AdminPage";
		return readAccess.cachedAccessForObject(checkAccess, (Integer)null);
    }*/
    
    public void setCurrModule(NSKeyValueCodingAdditions currModule) {
		this.currModule = currModule;
		if(currModule == null || currModule.valueForKey("settingBase") != null)
			grItem = currModule;
		else
			grItem = null;
	}


	public WOActionResults saveSetting() {
		if(!ec.hasChanges())
			return null;
		Logger logger = Logger.getLogger("rujel.admin");
		try {
			ec.saveChanges();
			logger.log(WOLogLevel.CONFIG,"Saved configuration for '" + 
					currModule.valueForKey("settingBase") + '\'', session());
		} catch (Exception e) {
			session().takeValueForKey(e.getMessage(), "message");
			logger.log(WOLogLevel.WARNING,"Failed saving configuration for '" + 
					currModule.valueForKey("settingBase") + '\'', new Object[] {session(),e});
			ec.revert();
		}
		return null;
	}
}