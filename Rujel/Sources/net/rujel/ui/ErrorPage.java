// ErrorPage.java

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.ui;

import net.rujel.reusables.SettingsReader;
import net.rujel.reusables.WOLogFormatter;

import com.webobjects.appserver.*;

// Generated by the WOLips Templateengine Plug-in at Oct 27, 2008 11:26:15 AM
public class ErrorPage extends com.webobjects.appserver.WOComponent {
    public ErrorPage(WOContext context) {
        super(context);
    }
    public Throwable throwable;
    public StringBuffer message;
    public String details;
    
    WOActionResults result;
    
    public void setThrowable(Throwable value) {
    	throwable = value;
    	if(throwable != null)
    		details = WOLogFormatter.formatTrowableHTML(throwable);
    }
    
    public String prepareFile() {
    	if(message.indexOf("\n") > 0)
    		return message.toString();
    	message.append('\n');
    	WOLogFormatter.formatTrowable(throwable, message);
    	message.append('\r');
    	message.append("school: ").append(SettingsReader.stringForKeyPath("schoolName", "???"));
    	message.append('\r');
    	message.append("url: ").append(context().request().applicationURLPrefix());
    	String info = context().request().stringFormValueForKey("errorInfo");
    	if(info != null) {
    		message.append('\r').append("info: ").append(info);
    	}
    	return message.toString();
    }

    public void appendToResponse(WOResponse aResponse, WOContext aContext) {
    	if(result != null) {
    		aResponse.appendContentString(aContext.componentActionURL());
    	} else {
    		super.appendToResponse(aResponse, aContext);
        	session().takeValueForKey(null, "message");
    	}
    }

    public WOActionResults invokeAction(WORequest aRequest, WOContext aContext) {
    	if(aContext.elementID().equals(aContext.senderID()))
    		return result;
		return super.invokeAction(aRequest, aContext);
	}
}