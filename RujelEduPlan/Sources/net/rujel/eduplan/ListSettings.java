// ListSettings.java: Class file for WO Component 'ListSettings'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.eduplan;

import java.util.Enumeration;

import net.rujel.base.QualifiedSetting;
import net.rujel.base.ReadAccess;
import net.rujel.base.SchoolSection;
import net.rujel.base.SettingsBase;
import net.rujel.reusables.ModulesInitialiser;
import net.rujel.reusables.NamedFlags;
import net.rujel.reusables.Various;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSComparator;
import com.webobjects.foundation.NSComparator.ComparisonException;
import com.webobjects.foundation.NSKeyValueCoding;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSMutableDictionary;
import com.webobjects.foundation.NSMutableSet;

// Generated by the WOLips Templateengine Plug-in at Jul 17, 2009 12:26:14 PM
public class ListSettings extends com.webobjects.appserver.WOComponent {
	
	protected NSMutableArray _lists;
	protected SettingsBase base;
	public EOEditingContext ec;
	public String currList;
	public Object item;
	
    public ListSettings(WOContext context) {
        super(context);
    }
    
    public SettingsBase base() {
    	if (base == null) {
    		base = (SettingsBase) valueForBinding("base");
    		if(base == null) {
    			String key = (String) valueForBinding("key");
    			if(ec == null)
    				ec = (EOEditingContext)valueForBinding("ec");
    			base = SettingsBase.baseForKey(key, ec, false);
    		}
        	if(hasBinding("currNum")) {
        		Integer currNum = base.numericValue();
        		setValueForBinding(currNum, "currNum");
        	}
		}
		return base;
    }
    
    public Boolean tabgroups; 
    public NSMutableArray lists() {
    	if(_lists == null) {
    		NSMutableSet nosect = new NSMutableSet();
    		NSMutableDictionary bySect = new NSMutableDictionary();
    		_lists = new NSMutableArray(base().textValue());
    		NSArray byCourse = base.qualifiedSettings();
    		if(byCourse != null && byCourse.count() > 0) {
    			Enumeration enu = byCourse.objectEnumerator();
    			while (enu.hasMoreElements()) {
    				QualifiedSetting bc = (QualifiedSetting) enu.nextElement();
    				String listName = (String)bc.valueForKey(SettingsBase.TEXT_VALUE_KEY);
    				if(!_lists.containsObject(listName))
    					_lists.addObject(listName);
    				Object sect = bc.section();
    				if(sect == null) {
    					nosect.addObject(listName);
    					continue;
    				}
    				NSMutableSet slist = (NSMutableSet)bySect.objectForKey(sect);
    				if(slist == null) {
    					bySect.setObjectForKey(new NSMutableSet(listName), sect);
    				} else {
    					slist.addObject(listName);
    				}
    			}
    		}
    		String listKey = (String)valueForBinding("currList");
    		if(listKey != null && !_lists.containsObject(listKey)) {
    			_lists.addObject(listKey);
    			nosect.addObject(listKey);
    		}
    		NSArray extraLists = (NSArray)valueForBinding("extraLists");
    		if(extraLists != null && extraLists.count() > 0) {
    			listKey = (String)valueForBinding("listKey");
    			Enumeration enu = extraLists.objectEnumerator();
    			while (enu.hasMoreElements()) {
					Object listName = enu.nextElement();
					if(listKey == null && listName instanceof NSKeyValueCoding)
						listKey = "listName";
					if(listKey != null)
						listName = NSKeyValueCoding.Utility.valueForKey(listName, listKey);
					if(!_lists.containsObject(listName)) {
						_lists.addObject(listName);
						nosect.addObject(listName);
					}
				}
    		}
    		if(bySect.count() > 0) {
    			NSMutableArray grouped = new NSMutableArray();
    			NSArray list = bySect.allKeys();
    			if(list.count() > 1) {
    				list = EOSortOrdering.sortedArrayUsingKeyOrderArray(list,
    						ModulesInitialiser.sorter);
    			}
    			int max = 0;
    			Enumeration enu = list.objectEnumerator();
    			while (enu.hasMoreElements()) {
					SchoolSection sect = (SchoolSection) enu.nextElement();
					NSMutableDictionary dict = new NSMutableDictionary(sect.name(),"title");
					NSMutableSet set = (NSMutableSet)bySect.objectForKey(sect);
					list = set.allObjects();
					if(list.count() > 1)
						try {
							list = list.sortedArrayUsingComparator(
									NSComparator.AscendingCaseInsensitiveStringComparator);
						} catch (ComparisonException e) {}
					dict.setObjectForKey(list, "list");
					if(set.count() > max)
						max = set.count();
					grouped.addObject(dict);
				}
    			if(max < 2)
    				return _lists;
    			if(true) { 
    				NSMutableDictionary dict = new NSMutableDictionary(Boolean.TRUE,"noTitle");
					list = nosect.allObjects();
					if(!(list instanceof NSMutableArray))
						list = list.mutableClone();
					if(list.count() > 1)
						try {
							((NSMutableArray)list).sortUsingComparator(
									NSComparator.AscendingCaseInsensitiveStringComparator);
						} catch (ComparisonException e) {}
					((NSMutableArray)list).insertObjectAtIndex(base.textValue(), 0);
					dict.setObjectForKey(list, "list");
					grouped.insertObjectAtIndex(dict, 0);
    			}
    			_lists = grouped;
    			tabgroups = Boolean.TRUE;
    		}
    	}
    	return _lists;
    }

    public void setCurrList(String list) {
    	if(list == null || list.equals(currList))
    		return;
    	currList = list;
    	setValueForBinding(currList, "currList");
    	if(canSetValueForBinding("listAccess")) {
    		String checkAccess = (String)valueForBinding("checkAccess");
    		if(checkAccess == null)
    			checkAccess = QualifiedSetting.ENTITY_NAME;
    		setValueForBinding(listAccess(base, currList, checkAccess, session()), "listAccess");
    	}
    }
    
    public static NamedFlags listAccess(SettingsBase base, String listName,
    		String checkAccess, WOSession ses) {
		NSArray byCourse = base.settingUsage("textValue", listName,
				ses.valueForKey("eduYear"));
		ReadAccess readAccess = (ReadAccess)ses.valueForKey("readAccess");
		if(byCourse != null && byCourse.count() > 0) {
			NamedFlags access = readAccess.cachedAccessForObject(checkAccess, (Integer)null);
			Enumeration enu = byCourse.objectEnumerator();
			while (enu.hasMoreElements()) {
				EOEnterpriseObject bc = (EOEnterpriseObject) enu.nextElement();
				if(bc instanceof SettingsBase)
					continue;
				Integer section = (Integer)bc.valueForKeyPath("section.sectionID");
				if(section != null)
					access = access.or(readAccess.cachedAccessForObject(checkAccess, section));
			}
			return access;
		} else {
			return readAccess.cachedAccessForObject(checkAccess, (String)null);
		}
    }
    
    public Boolean cantCreate() {
		String checkAccess = (String)valueForBinding("checkAccess");
		if(checkAccess == null)
			checkAccess = QualifiedSetting.ENTITY_NAME;
    	return (Boolean)session().valueForKeyPath("readAccess._create." + checkAccess);
    }
    
    public void createList() {
    	if(currList == null)
    		return;
    	NSMutableArray list = lists();
    	if(Various.boolForObject(tabgroups)) {
    			NSMutableDictionary dict = (NSMutableDictionary)_lists.objectAtIndex(0);
    			list = (NSMutableArray)dict.valueForKey("list");
    	}
    	if(!list.contains(currList)) {
    		list.addObject(currList);
    	}
    }
    
    public void appendToResponse(WOResponse aResponse, WOContext aContext) {
    	Object cl = valueForBinding("currList");
    	if(currList == null || !currList.equals(cl)) {
    		currList = cl.toString();
    		if(currList == null) {
    			setCurrList(base().textValue());
    		} else {
    			base();
    		}
    	}
//    	updateUsage();
    	if(valueForBinding("extraLists") != null)
    		_lists = null;
    	lists();
    	super.appendToResponse(aResponse, aContext);
    }
    
    public boolean synchronizesVariablesWithBindings() {
        return false;
	}
}