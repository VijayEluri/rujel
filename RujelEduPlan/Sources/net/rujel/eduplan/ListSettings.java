// ListSettings.java: Class file for WO Component 'ListSettings'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.eduplan;

import java.util.Enumeration;

import net.rujel.base.SettingsBase;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSKeyValueCoding;
import com.webobjects.foundation.NSMutableArray;

// Generated by the WOLips Templateengine Plug-in at Jul 17, 2009 12:26:14 PM
public class ListSettings extends com.webobjects.appserver.WOComponent {
	
	protected NSMutableArray _lists;
	protected SettingsBase base;
//	public NSMutableArray byCourse;
	public EOEditingContext ec;
	public Object currList;
//	public Integer currNum;
//	public NSMutableArray usage;
	public Object item;
	
    public ListSettings(WOContext context) {
        super(context);
    }
    
    public SettingsBase base() {
    	if (base == null) {
    		base = (SettingsBase) valueForBinding("base");
    		if(base == null) {
    			String key = (String) valueForBinding("key");
    			if(ec == null)
    				ec = (EOEditingContext)valueForBinding("ec");
    			base = SettingsBase.baseForKey(key, ec, false);
    		}
    		/*
			NSArray editList = base.byCourse();
			byCourse = new NSMutableArray();
	    	if(editList != null && editList.count() > 0) {
	    		Enumeration enu = editList.objectEnumerator();
	    		Object eduYear = session().valueForKey("eduYear");
	    		while (enu.hasMoreElements()) {
	    			EOEnterpriseObject bc = (EOEnterpriseObject) enu.nextElement();
	    			if(bc.valueForKey("eduYear") == null || 
	    					eduYear.equals(bc.valueForKey("eduYear")))
	    				byCourse.addObject(bc);
	    		}
	    	}
    		if(byCourse.count() > 1) {
    			try {
					byCourse.sortUsingComparator(new SettingsBase.Comparator());
				} catch (ComparisonException e) {
					e.printStackTrace();
				}
    		}*/
//    		byCourse = base.byCourse((Integer)session().valueForKey("eduYear"));
        	if(hasBinding("currNum")) {
        		Integer currNum = base.numericValue();
        		setValueForBinding(currNum, "currNum");
        	}
		}
		return base;
    }
    
    public NSMutableArray lists() {
    	if(_lists == null) {
    		_lists = new NSMutableArray(base().textValue());
    		NSArray byCourse = base.qualifiedSettings();
    		if(byCourse != null && byCourse.count() > 0) {
    			Enumeration enu = byCourse.objectEnumerator();
    			while (enu.hasMoreElements()) {
    				EOEnterpriseObject bc = (EOEnterpriseObject) enu.nextElement();
    				String listName = (String)bc.valueForKey(SettingsBase.TEXT_VALUE_KEY);
    				if(!_lists.containsObject(listName))
    					_lists.addObject(listName);
    			}
    		}
    		String listKey = (String)valueForBinding("currList");
    		if(listKey != null && !_lists.containsObject(listKey))
    			_lists.addObject(listKey);
    		NSArray extraLists = (NSArray)valueForBinding("extraLists");
    		if(extraLists != null && extraLists.count() > 0) {
    			listKey = (String)valueForBinding("listKey");
    			Enumeration enu = extraLists.objectEnumerator();
    			while (enu.hasMoreElements()) {
					Object listName = enu.nextElement();
					if(listKey == null && listName instanceof NSKeyValueCoding)
						listKey = "listName";
					if(listKey != null)
						listName = NSKeyValueCoding.Utility.valueForKey(listName, listKey);
					if(!_lists.containsObject(listName))
						_lists.addObject(listName);
				}
    		}
    	}
    	return _lists;
    }

    public void setCurrList(String list) {
    	if(list == null || list.equals(currList))
    		return;
    	currList = list;
    	setValueForBinding(currList, "currList");
    }
    
    public void createList() {
    	if(!lists().contains(currList)) {
    		lists().addObject(currList);
    	}
    }
/*
    public String listName() {
    	StringBuilder buf = new StringBuilder();
    	if(item == null) {
    		buf.append("<th>").append(session().valueForKeyPath(
    				"strings.RujelEduPlan_EduPlan.properties.listName")).append("</th>");
    	} else {
    		buf.append("<td");
    		if(item == base)
    			buf.append(" class = \"orange\"");
    		buf.append('>');
    		String text = (String)((EOEnterpriseObject)item).valueForKey(
    				SettingsBase.TEXT_VALUE_KEY);
    		buf.append(WOMessage.stringByEscapingHTMLString(text)).append("</td>");
    	}
    	return buf.toString();
    }*/
    
    public void appendToResponse(WOResponse aResponse, WOContext aContext) {
    	Object cl = valueForBinding("currList");
    	if(currList == null || !currList.equals(cl)) {
    		currList = cl;
    		if(currList == null) {
    			currList = base().textValue();
    		} else {
    			base();
    		}
    	}
//    	updateUsage();
    	super.appendToResponse(aResponse, aContext);
    }
    
    public boolean synchronizesVariablesWithBindings() {
        return false;
	}
}