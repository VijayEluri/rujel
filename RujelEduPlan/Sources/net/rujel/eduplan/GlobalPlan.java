// GlobalPlan.java: Class file for WO Component 'GlobalPlan'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.eduplan;


import net.rujel.interfaces.EduGroup;
import net.rujel.reusables.*;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.*;

// Generated by the WOLips Templateengine Plug-in at Jul 15, 2008 8:08:00 PM
public class GlobalPlan extends com.webobjects.appserver.WOComponent {
	
	protected NamedFlags _access;
	public NamedFlags access() {
		if(_access == null) {
			_access = (NamedFlags)session().valueForKeyPath("readAccess.FLAGS.PlanCycle");
		}
		return _access;
	}
	
	public GlobalPlan(WOContext context) {
        super(context);
        ec = (EOEditingContext)context.page().valueForKey("ec");
        //new SessionedEditingContext(context.session());
        Number eduYear = (Number)context().session().valueForKey("eduYear");
        grades = prepareGrades(ec,eduYear.intValue());
        editable = access().flagForKey("edit");
        if(editable)
        	session().savePageInPermanentCache(this);
    }
	
    public boolean synchronizesVariablesWithBindings() {
        return false;
	}

    public static NSArray prepareGrades(EOEditingContext ec, int eduYear) {
		NSMutableArray specGroups = null;
		if(eduYear > 0) {
			if (eduYear > 100)
				eduYear = eduYear%100;
			NSArray args = new NSArray(new Integer(eduYear));
			NSArray specCycles = EOUtilities.objectsWithQualifierFormat(ec, "PlanCycle"
					, "specClass != nil AND year = %d", args);
			if(specCycles != null && specCycles.count() > 0) {
				specCycles = (NSArray)specCycles.valueForKey("specClass");
				NSSet set = new NSSet(specCycles);
				specCycles = set.allObjects().mutableClone();
			}
		}
		NSMutableArray sorter = null;
		if(specGroups != null) {
			sorter = new NSMutableArray();
			sorter.addObject(new EOSortOrdering("number",EOSortOrdering.CompareAscending));
			sorter.addObject(new EOSortOrdering("title",EOSortOrdering.CompareAscending));
			EOSortOrdering.sortArrayUsingKeyOrderArray(specGroups, sorter);
		}

		NSMutableArray prepareGrades = new NSMutableArray();
		int maxGrade = SettingsReader.intForKeyPath("edu.maxGrade", 11);
		for (int i = SettingsReader.intForKeyPath("edu.minGrade", 1); i <= maxGrade; i++) {
			Integer grade = new Integer(i);
			if(specGroups != null) {
				EOQualifier qual = new EOKeyValueQualifier("number",
						EOQualifier.QualifierOperatorEqual,grade);
				NSArray addSpecs = EOQualifier.filteredArrayWithQualifier(specGroups, qual);
				if(addSpecs != null && addSpecs.count() > 0) {
					specGroups.removeObjectsInArray(addSpecs);
					if(addSpecs instanceof NSMutableArray) {
						EOSortOrdering.sortArrayUsingKeyOrderArray
						((NSMutableArray)addSpecs, sorter);
					} else {
						addSpecs = EOSortOrdering.sortedArrayUsingKeyOrderArray
						(addSpecs, sorter);
					}
					prepareGrades.addObjectsFromArray(addSpecs);
				}
			}
			prepareGrades.addObject(grade);
		}
		if(specGroups != null && specGroups.count() > 0) {
			EOSortOrdering.sortArrayUsingKeyOrderArray(specGroups, sorter);
			prepareGrades.addObjectsFromArray(specGroups);
        }
        return prepareGrades.immutableClone();
	}
	
	public EOEditingContext ec;
	public NSArray grades;
	
	public EOEnterpriseObject area;
	public boolean geradeArea = false;
	public Subject subjectItem;
	public NSArray cyclesBySubj;
	public Object gradeItem;
	public boolean editable = true;

	public NSArray subjects() {
		/*NSArray result = EOUtilities.objectsForEntityNamed(ec, "Subject");
		NSComparator comparator = new SubjectComparator();
		try {
			if(result instanceof NSMutableArray) {
				((NSMutableArray)result).sortUsingComparator(comparator);
			} else {
				result = result.sortedArrayUsingComparator(comparator);
			}
		} catch (Exception e) {
			;
		}
		return result;*/
	  	EOFetchSpecification fs = new EOFetchSpecification("Subject",null,Subject.sorter);
	  	return ec.objectsWithFetchSpecification(fs);
	}
	
	public void setSubjectItem(Subject item) {
		if(item == subjectItem)
			return;
		if(item == null) {
			subjectItem = null;
			area = null;
			return;
		}
		Number eduYear = (Number)context().session().valueForKey("eduYear");
		EOEnterpriseObject oldArea = (subjectItem == null)?null:subjectItem.area();
		if(subjectItem != null && showRow)
			area = null;
		subjectItem = item;
		cyclesBySubj = PlanCycle.cyclesForSubjectAndYear(ec, item, eduYear.intValue());
		showRow = getShowRow();
		if(oldArea != subjectItem.area()) {
			geradeArea = !geradeArea;
			area = subjectItem.area();
		}
	}
	
	protected NSMutableSet forcedSubjects;
	public boolean showAll = false;
	public boolean showRow = false;
	protected boolean getShowRow() {
		if(showAll)
			return true;
		if(cyclesBySubj != null && cyclesBySubj.count() > 0)
			return true;
		return (forcedSubjects != null && forcedSubjects.containsObject(subjectItem));
	}
	
	public void setForced(Object forced) {
		if(forcedSubjects == null)
			forcedSubjects = new NSMutableSet();
		forcedSubjects.addObject(forced);
	}
	public void toggleAll() {
		showAll = !showAll;
	}

	protected PlanCycle currCycle;

	public void setGradeItem(Object item) {
		gradeItem = item;
		currCycle = null;
		editable = !(gradeItem instanceof EduGroup);
		if(cyclesBySubj != null && cyclesBySubj.count() > 0) {

			NSArray result = null;
			if(!editable) {
				EOQualifier qual = new EOKeyValueQualifier("specClass",
						EOQualifier.QualifierOperatorEqual,gradeItem);
				result = EOQualifier.filteredArrayWithQualifier(cyclesBySubj, qual);
			} //special cycle
			if(result == null || result.count() == 0) {
				NSMutableArray quals = new NSMutableArray();
				quals.addObject(new EOKeyValueQualifier("specClass",
						EOQualifier.QualifierOperatorEqual,NullValue));
				Integer grade = (gradeItem instanceof EduGroup)?
						((EduGroup)gradeItem).grade():(Integer)gradeItem;
						quals.addObject(new EOKeyValueQualifier("grade",
								EOQualifier.QualifierOperatorEqual,grade));	
						EOQualifier qual = new EOAndQualifier(quals);

						result = EOQualifier.filteredArrayWithQualifier(cyclesBySubj, qual);
			} // general cycle
			if(result != null && result.count() > 0) {
				if(result.count() > 1) {
					Object[] args = new Object[] {session(),subjectItem,gradeItem};
					EduPlan.logger.log(WOLogLevel.WARNING,
							"Multiple cycles found to be current",args);
				}
				currCycle = (PlanCycle)result.objectAtIndex(0);
			}}
		if(editable) {
			if(currCycle == null) {
				editable = access().flagForKey("create");
			} else {
				editable = access().flagForKey("edit");
			}
		}
	}
		
	public Integer planHours() {
		if(currCycle == null)
			return null;
		return currCycle.hours();
	}
	
	public void setPlanHours(Integer hours) {
		if(hours != null) {
			if(currCycle == null) { //create or resurrect
				NSMutableDictionary args = 
					new NSMutableDictionary(subjectItem,PlanCycle.SUBJECT_EO_KEY);
				args.takeValueForKey(session().valueForKey("school"), "school");
				if(gradeItem instanceof EduGroup) {
					args.setObjectForKey(gradeItem, PlanCycle.SPEC_CLASS_KEY);
					Integer grade = ((EduGroup)gradeItem).grade();
					args.setObjectForKey(grade, PlanCycle.GRADE_KEY);
				} else {
					args.setObjectForKey(NullValue, PlanCycle.SPEC_CLASS_KEY);
					args.setObjectForKey(gradeItem, PlanCycle.GRADE_KEY);
				}
				NSArray existingCycles = EOUtilities.objectsMatchingValues(ec,
						"PlanCycle", args);
				if(existingCycles != null && existingCycles.count() > 0){
					currCycle = (PlanCycle)existingCycles.objectAtIndex(0);
					if(existingCycles.count() > 1) {
						Object[] largs = new Object[] {session(),subjectItem,gradeItem};
						EduPlan.logger.log(WOLogLevel.WARNING,
								"Multiple cycles found to be current",largs);
					}					
				} else { //create
					currCycle = (PlanCycle)EOUtilities.createAndInsertInstance(ec, "PlanCycle");
					currCycle.takeValuesFromDictionary(args);					
				}
				currCycle.setEduYear(null);
				cyclesBySubj = cyclesBySubj.arrayByAddingObject(currCycle);
			}
			currCycle.setHours(hours);
		} else { // hours == null
			if(currCycle != null) {
				Integer eduYear = (Integer)session().valueForKey("eduYear");
				currCycle.setYear((eduYear%100) -1);
				NSMutableArray tmp = (cyclesBySubj instanceof NSMutableArray)?
						(NSMutableArray)cyclesBySubj:cyclesBySubj.mutableClone();
				tmp.removeObject(currCycle);
				cyclesBySubj = tmp;
			}
		}
	}
	
	public void save() {
		if(!ec.hasChanges())
			return;
		try {			
			/*NSMutableArray changes = new NSMutableArray();
			NSArray tmp = ec.insertedObjects();
			if(tmp != null && tmp.count() > 0) {
				changes.addObject("added");
				changes.addObjectsFromArray(ec.insertedObjects());
			}
			tmp = ec.updatedObjects();
			if(tmp != null && tmp.count() > 0) {
				changes.addObject("updated");
				changes.addObjectsFromArray(ec.insertedObjects());
			}
			tmp = ec.deletedObjects();
			if(tmp != null && tmp.count() > 0) {
				changes.addObject("deleted");
				changes.addObjectsFromArray(ec.insertedObjects());
			}
			Object[] args = new Object[] {session(),changes};*/
			ec.saveChanges();
			EduPlan.logger.log(WOLogLevel.UNOWNED_EDITING,"Saved changes in EduPlan",session());
		} catch (Exception ex) {
			Object[] args = new Object[] {session(),ex};
			EduPlan.logger.log(WOLogLevel.WARNING,"Failed to save changes",args);
			String message = (String)application().
					valueForKeyPath("strings.Strings.messages.error") + "<br/>" + ex.toString();
			session().takeValueForKey(message, "message");
		}
	}
	
	public String gradeTitle() {
		if(gradeItem == null)
			return null;
		if(gradeItem instanceof EduGroup)
			return ((EduGroup)gradeItem).name();
		else
			return gradeItem.toString();
	}
		
	public String rowClass() {
		if(cyclesBySubj == null || cyclesBySubj.count() == 0) {
			return "unused";
		} else {
			if(geradeArea)
				return "gerade";
			else
				return "ungerade";
		}
	}
	
	public String cellClass() {
		if(gradeItem instanceof EduGroup)
			return "special";
		else
			return null;
	}
	
	public String cellStyle() {
		 String result = null;
		if(area != null) {
			result = "border-top:#ffcc66 solid 2px;";
		}
	//if(currCycle != null && (gradeItem instanceof EduGroup) && currCycle.specClass() == null)
		return result;
	}
	
	public WOComponent editSubject() {
		WOComponent popup = pageWithName("SubjectEditor");
		popup.takeValueForKey(subjectItem, "subject");
		popup.takeValueForKey(context().page(), "returnPage");
		subjectItem = null;
		return popup;
	}
	public WOComponent addSubject() {
		subjectItem = (Subject)EOUtilities.createAndInsertInstance(ec, "Subject");
		return editSubject();
	}
	public WOComponent editArea() {
		WOComponent popup = pageWithName("AreaEditor");
		popup.takeValueForKey(context().page(), "returnPage");
		popup.takeValueForKey(subjectItem.area(), "area");
		subjectItem = null;
		return popup;
	}
	public WOComponent addArea() {
		WOComponent popup = pageWithName("AreaEditor");
		popup.takeValueForKey(context().page(), "returnPage");
		popup.takeValueForKey(ec, "editingContext");
		subjectItem = null;
		return popup;
	}
	public Boolean cantEditArea() {
		if(area == null)
			return Boolean.TRUE;
		return (Boolean)session().valueForKeyPath("readAccess._edit.area");
	}
	
	public String areaClass() {
		if(area != null)
			return "orange";
		return null;
	}
	
	public Boolean canAddArea() {
		if(!showAll)
			return Boolean.FALSE;
		return (Boolean)session().valueForKeyPath("readAccess.create.SubjectArea");
	}
	public Boolean canAddSubject() {
		if(!showAll)
			return Boolean.FALSE;
		return (Boolean)session().valueForKeyPath("readAccess.create.Subject");
	}
	
	public int colspan() {
		return (grades.count() + 3); 
	}
	
	public String toggleAllTitle() {
		String result = null;
		if(showAll) {
			result = (String)application().valueForKeyPath("strings.RujelEduPlan_EduPlan.hideUnused");
			if(result == null)
				result = "Hide unused";
		} else {
			result = (String)application().valueForKeyPath("strings.RujelEduPlan_EduPlan.showAll");
			if(result == null)
				result = "Show all";
		}
		return result;
	}
}