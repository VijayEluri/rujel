// SubjectEditor.java

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.eduplan;

import net.rujel.base.MyUtility;
import net.rujel.base.SchoolSection;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.eocontrol.EOFetchSpecification;
import com.webobjects.foundation.NSArray;

// Generated by the WOLips Templateengine Plug-in at Jul 31, 2008 7:03:45 PM
public class SubjectEditor extends com.webobjects.appserver.WOComponent {
    public SubjectEditor(WOContext context) {
        super(context);
    }
    
    public WOComponent returnPage;

    public EOEditingContext ec;
    public NSArray areas;   
	public NSArray sections;
	public NSArray sGroups;

    public EOEnterpriseObject item;
    public Boolean cantChange = Boolean.FALSE;

    public Subject subject;
    public String oldName;
    
    public void setSubject(Subject subj) {
    	subject = subj;
    	oldName = subj.subject();
    	ec = subj.editingContext();
    	EOFetchSpecification fs = new EOFetchSpecification("SubjectArea",null,MyUtility.numSorter);
    	areas = ec.objectsWithFetchSpecification(fs);
        sections = SchoolSection.listSections(ec, false);
    	sGroups = SubjectGroup.listSubjectGroups(ec);
    }
     
    public WOComponent save() {
    	if(ec.hasChanges()) {
    		ec.lock();
     		try {
    			if(subject.subject() == null) {
    				ec.revert();
    			} else {
    				ec.saveChanges();
    				StringBuffer message = new StringBuffer("Subject ");
    				if(oldName == null) {
    					message.append("created: ");
    				} else {
    					message.append("changed: ");
    					if(!oldName.equals(subject.subject())) {
    						message.append("renamed from ").append(oldName).append(" to ");
    					}
    					message.append(subject.subject());
    				}
//    				returnPage.takeValueForKey(subject, "forced");
					returnPage.takeValueForKey(Boolean.TRUE, "shouldReset");
        			Object[] args = new Object[] {session(),subject};
    				EduPlan.logger.log(WOLogLevel.COREDATA_EDITING,message.toString(),args);
    			}
    		} catch (Exception ex) {
    			Object[] args = new Object[] {session(),subject,ex};
    			EduPlan.logger.log(WOLogLevel.COREDATA_EDITING,"Failed to save changes",args);
    			String message = (String)application().
    			valueForKeyPath("strings.Strings.messages.error") + "<br/>" + ex.toString();
    			session().takeValueForKey(message, "message");
			} finally {
				ec.unlock();
			}
    	}
    	returnPage.ensureAwakeInContext(context());
    	return returnPage;
    }
}