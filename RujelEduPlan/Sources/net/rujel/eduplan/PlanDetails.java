// PlanDetails.java: Class file for WO Component 'PlanDetails'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.eduplan;

import java.util.Enumeration;

import net.rujel.base.SettingsBase;
import net.rujel.interfaces.EduCourse;
import net.rujel.interfaces.EduGroup;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.eocontrol.EOKeyValueQualifier;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.*;

// Generated by the WOLips Templateengine Plug-in at Jul 21, 2009 5:45:43 PM
public class PlanDetails extends com.webobjects.appserver.WOComponent {
 	public EOEditingContext ec;
 	public NSArray subjects;
 	public NSArray cycles;
 	public Object item;
 	public Object selection;
 	public NSMutableArray listNames;
 	protected NSMutableDictionary periodsForList;
 	public NSMutableDictionary cycleItem;
 	public NSMutableDictionary rowItem;
 	public String listItem;
 	public NSMutableDictionary listDict;
 	public EOEnterpriseObject pdItem;
 	public Integer courseIndex;
	
	public PlanDetails(WOContext context) {
        super(context);
        ec = (EOEditingContext)context.page().valueForKey("ec");
        periodsForList = new NSMutableDictionary();
    }
	
	public void select() {
		setSelection(item);
	}
	
	public NSArray subjects() {
		if(subjects == null) {
			Integer eduYear = (Integer)session().valueForKey("eduYear");
	        subjects = PlanCycle.subjectsForYear(ec, eduYear.intValue());
		}
		return subjects;
	}
	
	public void setSelection(Object sel) {
		selection = sel;
		if(sel == null) {
			cycles = null;
			return;
		}
		Integer eduYear = (Integer)session().valueForKey("eduYear");
		NSArray groups = null;
		if (sel instanceof EduGroup) {
			EduGroup gr = (EduGroup) sel;
			cycles = PlanCycle.cyclesForEduGroup(gr);
//			values.takeValueForKey(gr, "eduGroup");
//			groups = new NSArray(sel);
		} else if (sel instanceof Subject) {
			Subject subject = (Subject) sel;
			cycles = PlanCycle.cyclesForSubjectAndYear(ec, subject, eduYear.intValue());
			NSTimestamp date = (NSTimestamp)session().valueForKey("today");
			groups = EduGroup.Lister.listGroups(date, ec);
		}
		if(cycles == null || cycles.count() == 0)
			return;
		NSMutableArray cycleDicts = new NSMutableArray();
		NSMutableDictionary values = new NSMutableDictionary(eduYear,"eduYear");
		Enumeration enu = cycles.objectEnumerator();
		if(listNames == null)
			listNames = new NSMutableArray();
		else
			listNames.removeAllObjects();
		while (enu.hasMoreElements()) {
			PlanCycle cycle = (PlanCycle) enu.nextElement();
			values.takeValueForKey(cycle, "cycle");
			NSMutableDictionary dict = observeValue(cycle, eduYear);
			dict = new NSMutableDictionary(dict, "listName");
			dict.takeValueForKey(cycle,"cycle");
//			dict.takeValueForKey(new Integer(cycle.weekly()), "weekly");
			NSMutableArray courses = new NSMutableArray();
			if(sel instanceof EduGroup) {
				prepareCourses((EduGroup)sel, cycle, values, courses);
			} else {
				EOQualifier qual = new EOKeyValueQualifier("grade",
						EOQualifier.QualifierOperatorEqual,cycle.grade());
				NSArray relatedGroups = EOQualifier.filteredArrayWithQualifier(groups, qual);
				Enumeration grEnu = relatedGroups.objectEnumerator();
				while (grEnu.hasMoreElements()) {
					EduGroup gr = (EduGroup) grEnu.nextElement();
					prepareCourses(gr, cycle, values, courses);
				}
			}
			dict.takeValueForKey(courses, "courses");
			cycleDicts.addObject(dict);
		}
		cycles = cycleDicts;
	}

	protected void prepareCourses(EduGroup gr, PlanCycle cycle, NSMutableDictionary values,
			NSMutableArray result) {
		values.takeValueForKey(gr, "eduGroup");
		NSArray courses = EOUtilities.objectsMatchingValues(ec,
				EduCourse.entityName, values);
		courses = EOSortOrdering.sortedArrayUsingKeyOrderArray(courses, EduCourse.sorter);
		int count = cycle.subgroups().intValue();
		if(courses != null && courses.count() > 0) {
			Enumeration enu = courses.objectEnumerator();
			while (enu.hasMoreElements()) {
				EduCourse course = (EduCourse) enu.nextElement();
				result.addObject(courseRow(course));
				count--;
			}
		}
		while(count > 0) {
			result.addObject(courseRow(values));
//			NSMutableDictionary crow = new NSMutableDictionary(gr, "eduGroup"); 
//			result.addObject(crow);
			count--;
		}
	}
	
	protected NSMutableDictionary courseRow(NSKeyValueCodingAdditions course) {
		NSMutableDictionary listSetting = observeValue(course,null);
		NSMutableDictionary result = new NSMutableDictionary(listSetting, "listSetting");
		result.takeValueForKey(course.valueForKey("eduGroup"), "eduGroup");
		int weeks = ((Integer)listSetting.valueForKey("weeks")).intValue();
		int hours = ((Integer)course.valueForKeyPath("cycle.hours")).intValue();
		int weekly = hours/weeks;
		int total = weeks*weekly;
		int extra = hours%weeks;
		if(extra > weekly) {
			weekly++;
			total = weeks*weekly;
		}
		
		result.takeValueForKey(new Integer(weekly), "weekly");
		if(course instanceof EduCourse) {
			result.takeValueForKey(course,"course");
			NSArray details = EOUtilities.objectsMatchingKeyAndValue(ec, "PlanDetail",
					"course", course);
			if(details != null && details.count() > 0) {
				NSMutableDictionary detailsDict = new NSMutableDictionary();
				Enumeration enu = details.objectEnumerator();
				total = 0;
				while (enu.hasMoreElements()) {
					EOEnterpriseObject detail = (EOEnterpriseObject) enu.nextElement();
					detailsDict.setObjectForKey(detail,detail.valueForKey("eduPeriod"));
					int dHours = ((Integer)detail.valueForKey("hours")).intValue();
					total += dHours;
				}
				result.takeValueForKey(detailsDict, "details");
			}
			result.takeValueForKey("green", "styleClass");
		} else {
			result.takeValueForKey("grey", "styleClass");
		}
		result.takeValueForKey(new Integer(total), "total");
		extra = hours - total;
		result.takeValueForKey(new Integer(extra), "extra");
		return result;
	}
	
	protected NSMutableDictionary observeValue(Object value, Integer eduYear) {
		NSKeyValueCoding sb = SettingsBase.settingForValue(EduPeriod.ENTITY_NAME,
				value, eduYear, ec);
		String listName = (String)sb.valueForKey(SettingsBase.TEXT_VALUE_KEY);
		Integer week = (Integer)sb.valueForKey(SettingsBase.NUMERIC_VALUE_KEY);
		if(week == null)
			week = new Integer(7);
		NSMutableDictionary dict = (NSMutableDictionary)periodsForList.valueForKey(listName);
		if(dict == null) {
			dict = new NSMutableDictionary(listName,"listName");
			dict.takeValueForKey(week, "week");
			NSArray periods = EduPeriod.periodsInList(listName, ec);
			dict.takeValueForKey(periods, "periods");
			int days = EduPeriod.daysForList(listName, null, periods);
			dict.takeValueForKey(new Integer(days), "days");
			dict.takeValueForKey(new Integer(days/week), "weeks");
			dict.takeValueForKey(new Integer(days%week), "extraDays");
			periodsForList.takeValueForKey(dict, listName);
			listNames.addObject(listName);
		} else if(!listNames.containsObject(listName)) {
			listNames.addObject(listName);
		}
		return dict;
	}
	
	public void setListItem(String li) {
		listItem = li;
		if(periodsForList == null)
			return;
		listDict = (li==null)?null:(NSMutableDictionary)periodsForList.valueForKey(li);
	}
	
	public EduPeriod periodItem() {
		return (EduPeriod)item;
	}
	
	public void setPeriodItem(EduPeriod periodItem) {
		item = periodItem;
		pdItem = null;
		if(rowItem != null) {
			NSDictionary details = (NSDictionary)rowItem.valueForKey("details");
			if(details != null)
				pdItem = (EOEnterpriseObject)details.objectForKey(periodItem);
		}
	}
	
	public String perCellClass() {
		
		return null;
	}
	
	public Boolean showFields() {
		if(listItem == null || rowItem.valueForKey("course") == null ||
				!listItem.equals(rowItem.valueForKeyPath("listSetting.listName")))
			return Boolean.FALSE;
		return Boolean.TRUE;
	}

	public String weeklyHours() {
		if(listItem == null || 
				!listItem.equals(rowItem.valueForKeyPath("listSetting.listName")))
			return null;
		if(rowItem.valueForKey("details") == null)
			return rowItem.valueForKey("weekly").toString();
		if(pdItem != null)
			return pdItem.valueForKey("weekly").toString();
		return null;
	}

	public void setWeeklyHours(String weeklyHours) {
		// TODO
	}

	public Integer totalHours() {
		if(pdItem != null)
			return (Integer)pdItem.valueForKey("hours");
		return null;
	}

	public void setTotalHours(Integer totalHours) {
		// TODO
	}

	public void save() {
	   	ec.lock();
    	try {
			ec.saveChanges();
			EduPlan.logger.log(WOLogLevel.COREDATA_EDITING, "Saved PlanDetails", session());
		} catch (Exception e) {
			EduPlan.logger.log(WOLogLevel.INFO,"Error saving plan details",
					new Object[] {session(),e});
			session().takeValueForKey(e.getMessage(), "message");
//			ec.revert();
		} finally {
			ec.unlock();
		}
	}
	
	public void reset() {
		super.reset();
		listNames = null;
		periodsForList = null;
		ec = null;
		subjects = null;
	}
	
	public boolean synchronizesVariablesWithBindings() {
        return false;
	}
}