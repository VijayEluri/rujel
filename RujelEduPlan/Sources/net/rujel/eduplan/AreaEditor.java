// AreaEditor.java

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.eduplan;

import net.rujel.base.MyUtility;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.NSArray;

// Generated by the WOLips Templateengine Plug-in at Aug 5, 2008 3:24:54 PM
public class AreaEditor extends com.webobjects.appserver.WOComponent {
    public AreaEditor(WOContext context) {
        super(context);
    }
    
    protected EOEditingContext ec;
    /* Area */
    public EOEnterpriseObject currArea;
    
    public NSArray areaList;
    public EOEnterpriseObject areaItem;
    public NSArray subjectsList;
    public Subject subjItem;
    
    public String areaName;
    public Integer newNum;
    public WOComponent returnPage;
    
    public void setEditingContext(EOEditingContext ctx) {
    	ec = ctx;
    	EOFetchSpecification fs = new EOFetchSpecification("SubjectArea",null,MyUtility.numSorter);
    	areaList = ec.objectsWithFetchSpecification(fs);
    }
    
    public void setArea(EOEnterpriseObject area) {
    	currArea = area;
    	areaName = (String)area.valueForKey("areaName");
    	setEditingContext(area.editingContext());
    	/*
    	EOQualifier qual = new EOKeyValueQualifier("area",EOQualifier.QualifierOperatorEqual,area);
    	EOFetchSpecification fs = new EOFetchSpecification("Subject",qual,Subject.numSorter);
    	subjectsList = ec.objectsWithFetchSpecification(fs);*/
    	subjectsList = Subject.subjectsForArea(area);
    }
    
    public WOComponent save() {
    	String oldName = (currArea==null)?null:(String)currArea.valueForKey("areaName");
    	if(currArea != null) {
    		if(areaName == null) {
    			Object[] args = new Object[] {session(),currArea};
    			if(subjectsList == null || subjectsList.count() == 0) {
    				ec.deleteObject(currArea);
//    				GlobalPlan.logger.log(WOLogLevel.COREDATA_EDITING,
//    						"Deleting SubjetArea: " + oldName,session());    	    				
    			} else {
    				session().takeValueForKey(
    						valueForKeyPath("strings.RujelEduPlan_EduPlan.cantDeleteArea"),
    				"message");
    				GlobalPlan.logger.log(WOLogLevel.COREDATA_EDITING,
    						"Denied attempt to delete Area containing Subjects",args);
    			}
    		} else {
    			currArea.takeValueForKey(areaName, "areaName");
    		}
    	} else {
    		if(areaName != null) {
    			currArea = EOUtilities.createAndInsertInstance(ec, "SubjectArea");
    			currArea.takeValueForKey(areaName, "areaName");
    			/*Number maxNum = (areaList == null)?new Integer(0):
    				(Number)((EOEnterpriseObject)areaList.lastObject()).valueForKey("num");
    			Integer newNum = new Integer(maxNum.intValue() +1);*/
    			currArea.takeValueForKey(newNum, "num");
    		}
    	}
    	if(ec.hasChanges()) {
     		try {
    			if(areaName == null) {
    					ec.revert();
    			} else {
    				ec.saveChanges();
    				StringBuffer message = new StringBuffer("SubjectArea ");
    				if(areaName != null) {
    					if(oldName == null) {
    						message.append("created: ");
    					} else {
    						message.append("changed: ");
    						if(!oldName.equals(areaName)) {
    							message.append("renamed from ").append(oldName).append(" to ");
    						}
    					}
    					message.append(areaName);
    				} else {
						message.append("deleted: ").append(oldName);
    				}
        			Object[] args = new Object[] {session(),currArea};
    				GlobalPlan.logger.log(WOLogLevel.COREDATA_EDITING,message.toString(),args);
    			}
    		} catch (Exception ex) {
    			Object[] args = new Object[] {session(),currArea,ex};
    			GlobalPlan.logger.log(WOLogLevel.COREDATA_EDITING,"Failed to save changes",args);
    			String message = (String)application().
    			valueForKeyPath("strings.Strings.messages.error") + "<br/>" + ex.toString();
    			session().takeValueForKey(message, "message");
			}
    	}
    	returnPage.ensureAwakeInContext(context());
    	return returnPage;
    }
    
    public boolean isCurr() {
    	return (currArea == areaItem);
    }
}