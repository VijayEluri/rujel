// SetupPeriods.java: Class file for WO Component 'SetupPeriods'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.eduplan;

import net.rujel.base.SettingsBase;
import net.rujel.reusables.NamedFlags;
import net.rujel.reusables.Various;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.*;
import com.webobjects.foundation.NSArray;

// Generated by the WOLips Templateengine Plug-in at Jul 14, 2009 6:43:49 PM
public class SetupPeriods extends com.webobjects.appserver.WOComponent {

 	public EOEditingContext ec;
	public String listName;
	public SettingsBase base;
	public Boolean details;
	public NSArray extraLists;
	public NamedFlags access;
    
	public SetupPeriods(WOContext context) {
        super(context);
//        setEc((EOEditingContext)context.page().valueForKey("ec"));
//		context().page().takeValueForKey(this, "toReset");
    }
	
	public void setEc(EOEditingContext newEc) {
		ec = newEc;
		ec.lock();
		try {
			base = SettingsBase.baseForKey(EduPeriod.ENTITY_NAME, ec, true);
			listName = base.textValue();
			if(listName == null) {
				listName = (String)application().valueForKeyPath(
					"strings.RujelEduPlan_EduPlan.SetupPeriods.defaultListName");
				base.setTextValue(listName);
				ec.saveChanges();
				EduPlan.logger.log(WOLogLevel.SETTINGS_EDITING,
						"Created default EduPeriod ListName setting: " + listName,
						new Object[] {session(), base});
				details = Boolean.FALSE;
			} else {
				if(!base.isSingle()) {
					details = Boolean.TRUE;	
				} else {
					EOQualifier qual = new EOKeyValueQualifier(EduPeriod.LIST_NAME_KEY,
							EOQualifier.QualifierOperatorNotEqual,listName);
					EOFetchSpecification fs = new EOFetchSpecification(EduPeriod.ENTITY_NAME,qual,null);
					extraLists = ec.objectsWithFetchSpecification(fs);
					if(extraLists != null && extraLists.count() > 0)
						details = Boolean.TRUE; 
					else
						details = Boolean.FALSE;
					qual = new EOKeyValueQualifier(Holiday.LIST_NAME_KEY,
							EOQualifier.QualifierOperatorNotEqual,NullValue);
					fs.setEntityName(Holiday.ENTITY_NAME);
					fs.setQualifier(qual);
					NSArray holidays = ec.objectsWithFetchSpecification(fs);
					if(holidays != null && holidays.count() > 0) {
						if(extraLists == null || extraLists.count() == 0)
							extraLists = holidays;
						else
							extraLists = extraLists.arrayByAddingObjectsFromArray(holidays);
					}
				}
				access = ListSettings.listAccess(base, listName, "PeriodList", session());
			}
		} catch (Exception e) {
			EduPlan.logger.log(WOLogLevel.WARNING,
					"Error creating default EduPeriod ListName setting",
					new Object[] {session(), e});
		} finally {
			ec.unlock();
		}
	}
	
    public boolean synchronizesVariablesWithBindings() {
        return false;
	}
    
    public void showDetails() {
		if(ec.hasChanges()) {
			ec.lock();
			ec.revert();
			ec.unlock();
		}
		details = Boolean.TRUE;
	}

	public void appendToResponse(WOResponse aResponse, WOContext aContext) {
		boolean reset = Various.boolForObject(valueForBinding("shouldReset")); 
		if(reset) {
			extraLists = null;
			details = null;
			listName = null;
	        setEc((EOEditingContext)context().page().valueForKey("ec"));
		}
		super.appendToResponse(aResponse, aContext);
		extraLists = null;
		if(reset)
			setValueForBinding(Boolean.FALSE, "shouldReset");
	}
}
