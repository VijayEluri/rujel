package net.rujel.complete;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Enumeration;
import java.util.logging.Logger;

import net.rujel.base.MyUtility;
import net.rujel.interfaces.EduCourse;
import net.rujel.interfaces.EduGroup;
import net.rujel.interfaces.Student;
import net.rujel.reusables.SessionedEditingContext;
import net.rujel.reusables.SettingsReader;
import net.rujel.reusables.Various;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOKeyGlobalID;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSData;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSForwardException;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSTimestamp;

// Generated by the WOLips Templateengine Plug-in at Jun 18, 2009 1:07:33 PM
public class CompleteSetup extends com.webobjects.appserver.WOComponent {
	public static Logger logger = Logger.getLogger("rujel.complete");
	
    public CompleteSetup(WOContext context) {
        super(context);
    }
    
    public static File completeFolder(Integer year) {
    	String completeDir = SettingsReader.stringForKeyPath("edu.completeDir", null);
    	completeDir = Various.convertFilePath(completeDir);
    	if(completeDir == null)
    		return null;
    	try {
			File dir = new File(completeDir);
			if(!dir.exists())
				dir.mkdirs();
			File folder = new File(dir,year.toString());
			if(!folder.exists())
				folder.mkdir();
			return folder;
		} catch (Exception e) {
			logger.log(WOLogLevel.WARNING,"Could not get copleteFolder for year " + year,e);
		}
    	return null;
    }
    
    public void prepareStructure() {
    	Integer year = (Integer)session().valueForKey("eduYear");
		File folder = completeFolder(year);
		if(folder == null) {
			session().takeValueForKey(application().valueForKeyPath(
					"strings.RujelComplete_Complete.folderError"), "message");
			return;
		}
    	try {
    		File file = new File(folder,"index.html");
    		if(!file.exists()) {
    			InputStream str = application().resourceManager().
    					inputStreamForResourceNamed("index.html", "RujelComplete", null);
    			BufferedReader reader = new BufferedReader(new InputStreamReader(str,"utf8"));
    			BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(
    					new FileOutputStream(file),"utf8"));
    			String eduYear = MyUtility.presentEduYear(year.intValue());
    			while (reader.ready()) {
					String line = reader.readLine();
					if(line == null)
						break;
					line = line.replace("$eduYear", eduYear);
					writer.write(line);
					writer.newLine();
				}
    			reader.close();
    			writer.close();
    		}
    		WOContext ctx = MyUtility.dummyContext(null);
    		WOSession ses = ctx.session(); 
    		NSTimestamp today = (NSTimestamp)session().valueForKey("today");
    		ses.takeValueForKey(today, "today");
    		EOEditingContext ec = new SessionedEditingContext(ses);
    		File subFolder = new File(folder,"students");
    		if(!subFolder.exists())
    			subFolder.mkdirs();
    		NSArray groups = EduGroup.Lister.listGroups(today, ec);
    		WOComponent page = application().pageWithName("StudentCatalog", ctx);
    		page.takeValueForKey(ec, "ec");
    		page.takeValueForKey(groups, "eduGroups");
    		file = new File(subFolder,"list.html");
    		NSData content = page.generateResponse().content();
			FileOutputStream fos = new FileOutputStream(file);
			content.writeToStream(fos);
			fos.close();
			Enumeration grenu = groups.objectEnumerator();
			NSMutableArray reports = (NSMutableArray)ses.valueForKeyPath(
					"modules.studentReporter");
			NSDictionary reporter = (NSDictionary)application().valueForKeyPath(
					"strings.Strings.Overview.defaultReporter");
			reports.insertObjectAtIndex(reporter,0);
			StringBuilder filename = new StringBuilder(12);
			while (grenu.hasMoreElements()) {
				EduGroup gr = (EduGroup) grenu.nextElement();
				EOKeyGlobalID gid = (EOKeyGlobalID)ec.globalIDForObject(gr);
				filename.append(gr.grade()).append('_');
				filename.append(gid.keyValues()[0]);
				File grDir = new File(subFolder,filename.toString());
				filename.delete(0, filename.length());
				Enumeration stenu = gr.list().objectEnumerator();
				NSArray args = new NSArray(new Object[] {year, gr });
				NSArray existingCourses = EOUtilities.objectsWithQualifierFormat(ec,
						EduCourse.entityName,"eduYear = %d AND eduGroup = %@",args);
				while (stenu.hasMoreElements()) {
					Student student = (Student) stenu.nextElement();
					gid = (EOKeyGlobalID)ec.globalIDForObject(student);
					File stDir = new File(grDir,gid.keyValues()[0].toString());
					if(stDir.exists())
						continue;
					stDir.mkdirs();
					page = application().pageWithName("StudentPage", ctx);
		    		page.takeValueForKey(student, "student");
		    		page.takeValueForKey(gr, "eduGroup");
		    		page.takeValueForKey(reports, "reports");
		    		file = new File(stDir,"index.html");
		    		content = page.generateResponse().content();
					fos = new FileOutputStream(file);
					content.writeToStream(fos);
					fos.close();
					Enumeration repEnu = reports.objectEnumerator();
					while (repEnu.hasMoreElements()) {
						reporter = (NSDictionary) repEnu.nextElement();
						page = application().pageWithName("PrintReport",ctx);
						page.takeValueForKey(reporter,"reporter");
						page.takeValueForKey(existingCourses,"courses");
						page.takeValueForKey(new NSArray(student),"students");
						filename.append(reporter.valueForKey("id")).append(".html");
			    		file = new File(stDir,filename.toString());
						filename.delete(0, filename.length());
			    		content = page.generateResponse().content();
						fos = new FileOutputStream(file);
						content.writeToStream(fos);
						fos.close();
					}
				}
			}
    		ses.terminate();
    	} catch (Exception e) {
    		logger.log(WOLogLevel.WARNING,"Error preparing close year structure for year "
    				+ year,new Object[] {session(),e});
    		throw new NSForwardException(e);
		}
    }
	public boolean synchronizesVariablesWithBindings() {
        return false;
	}
	
	public boolean isStateless() {
		return true;
	}
	
	public void reset() {
		super.reset();
	}
}