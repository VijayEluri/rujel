// CompleteSetup.java: Class file for WO Component 'CompleteSetup'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.complete;

import java.io.File;
import java.util.logging.Logger;

import net.rujel.base.MyUtility;
import net.rujel.base.QualifiedSetting;
import net.rujel.base.SettingsBase;
import net.rujel.reusables.SettingsReader;
import net.rujel.reusables.Various;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.foundation.*;

// Generated by the WOLips Templateengine Plug-in at Jun 18, 2009 1:07:33 PM
public class CompleteSetup extends com.webobjects.appserver.WOComponent {
	public static Logger logger = Logger.getLogger("rujel.complete");
	
	public boolean writeReports;
	public boolean courses;
	public boolean students;
	
//	public NSArray byCourse;
	public SettingsBase base;
	public EOEnterpriseObject item;
	public File studentsFolder;
	public File coursesFolder;
	
    public CompleteSetup(WOContext context) {
        super(context);
        EOEditingContext ec = (EOEditingContext)context.page().valueForKey("ec");
        ec.revert();
        base = SettingsBase.baseForKey(Completion.SETTINGS_BASE, ec, true);
        if(ec.hasChanges()) {
        	base.setNumericValue(MyUtility.eduYearForDate(null));
        	base.setTextValue(Boolean.toString(false));
        	try {
        		ec.saveChanges();
        	} catch (Exception e) {
				logger.log(WOLogLevel.WARNING,"Error autogenerating CompletionActive setting",
						new Object[] {session(),e});
				session().takeValueForKey(e.getMessage(), "message");
			}
//        } else {
//        	byCourse = base.byCourse((Integer)session().valueForKey("eduYear"));
        }
        String completeDir = SettingsReader.stringForKeyPath("edu.studentsCompleteDir",null);
        if(completeDir == null) {
        	completeDir = SettingsReader.stringForKeyPath("edu.completeDir", null);
        } else {
        	completeDir = Various.convertFilePath(completeDir);
        	if(completeDir != null)
        		studentsFolder = new File(completeDir);
        	completeDir = SettingsReader.stringForKeyPath("edu.coursesCompleteDir", null);
        }
        completeDir = Various.convertFilePath(completeDir);
        if(completeDir != null)
        	coursesFolder = new File(completeDir);
    }
    
    public boolean noItem() {
    	return (item == null);
    }
    
    public void setPushByCourse(EOEnterpriseObject bc) {
    	if(bc == null) {
    		return;
    	}
    	if(bc instanceof QualifiedSetting) {
    		bc.takeValueForKey(session().valueForKey("eduYear"), "eduYear");
    	}
    }
    
//    protected void prepareActive(EOEnterpriseObject bc) {
//		Integer year = (Integer) session().valueForKey("eduYear");
//    	File folder = Executor.completeFolder(year, "courses",false);
//    	Executor.prepareFolder(folder, session().context(), "eduGroup.html");

    public WOActionResults submit() {    	
    	EOEditingContext ec = (EOEditingContext)valueForBinding("ec");
    	try {
    		ec.saveChanges();
    	} catch (Exception e) {
			logger.log(WOLogLevel.WARNING,"Error saving completion settings",
					new Object[] {session(),e});
			session().takeValueForKey(e.getMessage(), "message");
			ec.revert();
			return null;
		}
    	final NSArray modules = (NSArray)session().valueForKeyPath("modules.courseComplete");
    	if(modules == null || modules.count() == 0)
    		return null;
//    	if(bc instanceof SettingsBase) {
    	   	Integer eduYear = (Integer)session().valueForKey("eduYear");
    	   	String cache = base.textValue();
    	   	if(Boolean.parseBoolean(cache) && eduYear.compareTo(base.numericValue()) > 0) {
    	   		base.setTextValue(Boolean.toString(false));
    	   	} else {
    	   		cache = null;
    	   	}
    		NSArray found = base.coursesForSetting(Boolean.toString(true), null, eduYear);
    		if(found == null || found.count() == 0)
    			return null;
    		if(cache != null)
    			base.setTextValue(cache);
    		final EOEditingContext nec = new EOEditingContext(ec.parentObjectStore());
    		nec.lock();
			final NSArray list = EOUtilities.localInstancesOfObjects(nec, found);
			nec.unlock();
    		Runnable r = new Runnable() {
				public void run() {
					nec.lock();
					try {
						Completion.activateClosing(list, modules);
					} catch (Exception e) {
						logger.log(WOLogLevel.WARNING,"Error activating closing",e);
					} finally {
						nec.unlock();
					}
				}
			};
			Thread thread = new Thread(r,"ActivateClosing");
			thread.setPriority(Thread.MIN_PRIORITY + 1);
			thread.start();
    		return null;
    }
    
    public Boolean getClosed() {
    	if(item == null)
    		return Boolean.valueOf(base.textValue());
    	/*if(item == base) {
    		Integer eduYear = (Integer)session().valueForKey("eduYear");
    		Integer settingYear = base.numericValue();
    		if(eduYear.compareTo(settingYear) > 0) {
    			return Boolean.FALSE;
    		} else if(eduYear.compareTo(settingYear) < 0) {
    			EOFetchSpecification fs = new EOFetchSpecification(
    					Completion.ENTITY_NAME,null,null);
    			fs.setFetchLimit(1);
    			NSArray found = base.editingContext().objectsWithFetchSpecification(fs);
    			return Boolean.valueOf(found == null || found.count() == 0);
    		}
    	}*/
    	String val = (String)item.valueForKey(SettingsBase.TEXT_VALUE_KEY);
    	return Boolean.valueOf(val);
    }
    
    public void setClosed(Boolean closed) {
    	if(item == null)
    		item = base;
		Integer eduYear = (Integer)session().valueForKey("eduYear");
    	if(item == base)
    		base.setNumericValue(eduYear);
    	else
    		item.takeValueForKeyPath(eduYear, "eduYear");
		item.takeValueForKey(closed.toString(), SettingsBase.TEXT_VALUE_KEY);
    }
    
    public WOActionResults force() {
    	Executor.Task task = new Executor.Task();
    	task.date = session().valueForKey("today");
    	task.year = (Integer)session().valueForKey("eduYear");
    	task.writeCourses = courses;
    	task.writeStudents = students;
    	Executor.exec(task);
    	return null;
    }
    
    public String showProgress() {
    	NSMutableDictionary progress = Executor.progress();
    	if(progress == null || progress.count() == 0)
    		return null;
    	StringBuilder buf = new StringBuilder("<div style = \"float:right;\">");
    	Object tmp = progress.valueForKey("running");
    	if(tmp != null) {
    		buf.append(session().valueForKeyPath("strings.RujelComplete_Complete.running"));
    		buf.append(':').append(' ').append(tmp).append("<br/>");
    	}
    	tmp = progress.valueForKey("progress");
    	if(tmp != null) {
    		buf.append(session().valueForKeyPath("strings.RujelComplete_Complete.progress"));
    		buf.append(':').append(' ').append(tmp).append("<br/>");
    	}
    	buf.append("</div>");
    	return buf.toString();
    }
    
	public String stamp() {
		StringBuilder buf = new StringBuilder(" <img src = \"");
		buf.append(application().resourceManager().urlForResourceNamed(
				"stamp.gif", "RujelComplete", null, context().request()));
		buf.append("\" height = \"24\" width = \"24\" />");
		return buf.toString();
	}

    public boolean synchronizesVariablesWithBindings() {
        return false;
	}
	
	public boolean isStateless() {
		return false;
	}
	
	public void reset() {
		super.reset();
		base = null;
//		byCourse = null;
	}
}