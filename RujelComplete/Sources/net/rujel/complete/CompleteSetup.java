// CompleteSetup.java: Class file for WO Component 'CompleteSetup'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.complete;

import java.io.File;
import java.util.logging.Logger;

import net.rujel.base.MyUtility;
import net.rujel.base.SettingsBase;
import net.rujel.interfaces.EduCourse;
import net.rujel.reusables.Various;
import net.rujel.reusables.WOLogLevel;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.eocontrol.EOFetchSpecification;
import com.webobjects.eocontrol.EOQualifier;
import com.webobjects.foundation.*;

// Generated by the WOLips Templateengine Plug-in at Jun 18, 2009 1:07:33 PM
public class CompleteSetup extends com.webobjects.appserver.WOComponent {
	public static Logger logger = Logger.getLogger("rujel.complete");
	
	public boolean writeReports;
	public boolean courses;
	public boolean students;
	
	public NSArray byCourse;
	public SettingsBase base;
	public EOEnterpriseObject item;
	
    public CompleteSetup(WOContext context) {
        super(context);
        EOEditingContext ec = (EOEditingContext)context.page().valueForKey("ec");
        ec.revert();
        base = SettingsBase.baseForKey(Completion.SETTINGS_BASE, ec, true);
        if(ec.hasChanges()) {
        	base.setNumericValue(MyUtility.eduYearForDate(null));
        	base.setTextValue(Boolean.toString(false));
        	try {
        		ec.saveChanges();
        	} catch (Exception e) {
				logger.log(WOLogLevel.WARNING,"Error autogenerating CompletionActive setting",
						new Object[] {session(),e});
				session().takeValueForKey(e.getMessage(), "message");
			}
        } else {
        	byCourse = base.byCourse((Integer)session().valueForKey("eduYear"));
        }
    }
    
    public boolean noItem() { 
    	return (item == null);
    }

    public boolean isClosing() {
    	if(item == base) {
    		Integer eduYear = (Integer)session().valueForKey("eduYear");
    		Integer settingYear = base.numericValue();
    		if(eduYear.compareTo(settingYear) > 0) {
    			return false;
    		} else if(eduYear.compareTo(settingYear) > 0) {
    			EOFetchSpecification fs = new EOFetchSpecification(Completion.ENTITY_NAME,null,null);
    			fs.setFetchLimit(1);
    			NSArray found = base.editingContext().objectsWithFetchSpecification(fs);
    			return (found == null || found.count() == 0);
    		}
    	}
    	String val = (String)NSKeyValueCoding.Utility.valueForKey(item, SettingsBase.TEXT_VALUE_KEY);
    	return Boolean.parseBoolean(val);
    }
    
    public String stateCell() {
    	if(item == null) {
    		StringBuilder buf = new StringBuilder(
    				"<th colspan = \"2\"  style = \"font-size:large;\">");
    		buf.append(session().valueForKeyPath("strings.RujelComplete_Complete.stateTitle"));
    		buf.append("</th>");
    		return buf.toString();
    	}
    	boolean isClosing = isClosing();
    	StringBuilder buf = new StringBuilder(
    			"<td class = \"backfield2\" style = \"font-weight:bold;padding:1ex;color:#66");
    	buf.append((isClosing)?"33cc":"6666");
    	buf.append(";\">");
    	buf.append(session().valueForKeyPath("strings.RujelComplete_Complete." +
    			((isClosing())?"active":"inactive")));
    	buf.append("</td>");
    	return buf.toString();
    }
    
    public String toggleTitle() {
    	return (String)session().valueForKeyPath("strings.RujelComplete_Complete." +
    			((isClosing())?"deactivate":"activate"));
    }
    
    public WOActionResults toggleActive() {
    	boolean isBase = (item instanceof SettingsBase);
    	Integer eduYear = (Integer)session().valueForKey("eduYear");
    	if(isBase && !eduYear.equals(MyUtility.eduYearForDate(null))) {
    		session().takeValueForKey("wrong year!", "message");
    		return null;
    	}
    	boolean val = !isClosing();
    	item.takeValueForKey(Boolean.toString(val), SettingsBase.TEXT_VALUE_KEY);
    	item.takeValueForKey(eduYear,(isBase)?SettingsBase.NUMERIC_VALUE_KEY:"eduYear");
    	
    	EOEditingContext ec = (EOEditingContext)valueForBinding("ec");
    	if(val)
    		prepareActive(item);
    	try {
    		ec.saveChanges();
    	} catch (Exception e) {
			logger.log(WOLogLevel.WARNING,"Error autogenerating CompletionActive setting",
					new Object[] {session(),e});
			session().takeValueForKey(e.getMessage(), "message");
			ec.revert();
		}
    	return null;
    }
    
    public String defaultValue() {
    	boolean recent = Boolean.parseBoolean(base.textValue());
    	return Boolean.toString(!recent);
    }
    
    public WOActionResults prepareStructure() {
		NSTimestamp today = (NSTimestamp)session().valueForKey("today");
		Executor executor = new Executor(today);
		Integer year = MyUtility.eduYearForDate(today);
		if(courses) {
			executor.coursesFolder = Executor.completeFolder(year,Executor.COURSES,true);
			if(executor.coursesFolder == null) {
				session().takeValueForKey(application().valueForKeyPath(
				"strings.RujelComplete_Complete.folderError"), "message");
				return null;
			}
		}
		if(students) {
			executor.studentsFolder = Executor.completeFolder(year,Executor.STUDENTS,true);
			if(executor.studentsFolder == null) {
				session().takeValueForKey(application().valueForKeyPath(
				"strings.RujelComplete_Complete.folderError"), "message");
				return null;
				}
		}
		executor.writeReports = writeReports;	
		Executor.exec(executor);
		return null;
    }
    
    public void setPushByCourse(EOEnterpriseObject bc) {
    	if(bc == null) {
    		prepareActive(base);
    		return;
    	}
    	EOEditingContext ec = bc.editingContext();
    	if(ec.deletedObjects().contains(bc) &&
    			!Various.boolForObject(bc.valueForKey(SettingsBase.TEXT_VALUE_KEY))) {
    		bc = base;
    	} else if(bc.entityName().equals("SettingByCourse")) {
    		bc.takeValueForKey(session().valueForKey("eduYear"), "eduYear");
    	}
    	prepareActive(bc);
    }
    
    protected void prepareActive(EOEnterpriseObject bc) {
		Integer year = (Integer) session().valueForKey("eduYear");
    	File folder = Executor.completeFolder(year, "courses",false);
    	Executor.prepareFolder(folder, session().context(), "eduGroup.html");

    	NSArray modules = (NSArray)session().valueForKeyPath("modules.courseComplete");
    	if(modules == null || modules.count() == 0)
    		return;
    	if(bc instanceof SettingsBase) {
    	   	Integer eduYear = (Integer)session().valueForKey("eduYear");
    	   	String cache = base.textValue();
    	   	if(Boolean.parseBoolean(cache) && eduYear.compareTo(base.numericValue()) > 0) {
    	   		base.setTextValue(Boolean.toString(false));
    	   	} else {
    	   		cache = null;
    	   	}
    		NSArray found = ((SettingsBase)bc).coursesForSetting(
    				Boolean.toString(true), null, eduYear);
    		if(cache != null)
    			base.setTextValue(cache);
    		Completion.activateClosing(found, modules);
    	} else if(Various.boolForObject(bc.valueForKey(SettingsBase.TEXT_VALUE_KEY))) {
    		EduCourse course = (EduCourse)bc.valueForKey("course");
    		if(course != null) {
    			Completion.activateForCourse(course, modules);
    			return;
    		} else {
    			EOQualifier qual = SettingsBase.byCourseQualifier(bc);
    			EOFetchSpecification fs = new EOFetchSpecification(
    					EduCourse.entityName,qual,null);
    			NSArray found = bc.editingContext().objectsWithFetchSpecification(fs);
    			found = base.coursesForSetting(Boolean.toString(true), null, found);
    			Completion.activateClosing(found, modules);
    		}
    	}

    }
    
    public boolean synchronizesVariablesWithBindings() {
        return false;
	}
	
	public boolean isStateless() {
		return false;
	}
	
	public void reset() {
		super.reset();
		base = null;
		byCourse = null;
	}
}