// StudentCatalog.java: Class file for WO Component 'StudentCatalog'

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.complete;

import java.util.Enumeration;

import net.rujel.interfaces.*;
import net.rujel.reusables.SessionedEditingContext;
import net.rujel.reusables.Various;
import net.rujel.reusables.FileWriterUtil;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOKeyGlobalID;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSData;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSKeyValueCoding;
import com.webobjects.foundation.NSMutableArray;
import com.webobjects.foundation.NSTimestamp;

// Generated by the WOLips Templateengine Plug-in at Jun 17, 2009 8:06:10 PM
public class StudentCatalog extends com.webobjects.appserver.WOComponent {
	
	public NSArray eduGroups;
	public EduGroup group;
	public String groupID;
	public Student student;
	public EOEditingContext ec;
	public NSKeyValueCoding catalog;
	public NSDictionary grDict;
	protected String grFolder;
	public boolean grReports;
	public int total;
	
    public StudentCatalog(WOContext context) {
        super(context);
    }
    
    public void appendToResponse(WOResponse aResponse, WOContext aContext) {
    	total = 0;
    	super.appendToResponse(aResponse, aContext);
    }
    
    public void setGroup(EduGroup newGroup) {
    	group = newGroup;
    	if(group == null) {
    		groupID = null;
    		grDict = null;
    		list = null;
    		grFolder = null;
    		return;
    	}
    	if(ec == null)
    		ec = group.editingContext();
    	list = group.list();
    	total += list.count();
    	EOKeyGlobalID gid = (EOKeyGlobalID) ec.globalIDForObject(group);
    	groupID = "gr" + gid.keyValues()[0];
    	StringBuilder buf = new StringBuilder(7);
    	buf.append(group.grade()).append('_').append(gid.keyValues()[0]);
    	grFolder = buf.toString();
    	if(catalog != null)
    		grDict = (NSDictionary)catalog.valueForKey(grFolder);
    }
    
    public String ready() {
    	StringBuilder buf = new StringBuilder("<span style = \"float:right\">");
    	if(catalog == null) {
    	} else if(grDict == null) {
    		buf.append("&oslash;");
    	} else {
    		int count = 0;
    		Enumeration enu = grDict.objectEnumerator();
    		while (enu.hasMoreElements()) {
				if(Various.boolForObject(enu.nextElement()))
						count++;
			}
    		if(count < list.count())
    			buf.append(count).append('/');
    	}
    	buf.append(list.count());
    	buf.append("</span>");
    	return buf.toString();
    }
    
    public String studentLink() {
       	StringBuilder result = new StringBuilder(30);
       	result.append(grFolder).append('/');
    	if(student == null) {
    		result.append("group");
    	} else {
           	EOKeyGlobalID gid = (EOKeyGlobalID) ec.globalIDForObject(student); 
           	result.append(gid.keyValues()[0]);
    	}
       	result.append("/index.html");
       	return result.toString();
    }
    
    public String onclick() {
    	return "toggleObj('" + groupID + "');";
    }

    public NSArray list;
    
    public static void prepareStudents(FileWriterUtil folder) {
    	WOSession ses = folder.ctx.session();
    	EOEditingContext ec = ses.defaultEditingContext();
		NSDictionary sect = (NSDictionary)WOApplication.application().valueForKeyPath(
				"strings.sections");
		NSArray grReports = (NSArray)ses.valueForKeyPath("modules.groupComplete");
		if(grReports != null && grReports.count() == 0)
			grReports = null;
		NSArray groups = null;
		if(Various.boolForObject(sect.valueForKey("hasSections"))) {
			NSArray list = (NSArray)sect.valueForKey("list");
			sect = (NSDictionary)list.objectAtIndex(0);
			Executor.prepareFolder(folder, "list" + sect.valueForKey("idx") + ".html");
			Enumeration enu = list.objectEnumerator();
			sect = (NSDictionary)ses.valueForKeyPath("state.section");
			NSMutableArray allGroups = new NSMutableArray();
			while (enu.hasMoreElements()) {
				NSDictionary item = (NSDictionary) enu.nextElement();
				ses.takeValueForKeyPath(item, "state.section");
		    	groups = EduGroup.Lister.listGroups((NSTimestamp)ses.valueForKey("today"), ec);
		    	allGroups.addObject(item);
		    	allGroups.addObjectsFromArray(groups);
		    	WOComponent page = WOApplication.application().pageWithName("StudentCatalog",
		    			folder.ctx);
		    	page.takeValueForKey(ec, "ec");
		    	page.takeValueForKey(groups, "eduGroups");
		    	page.takeValueForKey(Boolean.valueOf(grReports != null), "grReports");
		    	folder.writeFile("list" + item.valueForKey("idx") + ".html", page);
			}
			groups = allGroups;
			ses.takeValueForKeyPath(sect, "state.section");
		} else {
	    	Executor.prepareFolder(folder, "list.html");
			sect = (NSDictionary)ses.valueForKeyPath("state.section");
	    	groups = EduGroup.Lister.listGroups((NSTimestamp)ses.valueForKey("today"), ec);
	    	WOComponent page = WOApplication.application().pageWithName("StudentCatalog",
	    			folder.ctx);
	    	page.takeValueForKey(ec, "ec");
	    	page.takeValueForKey(groups, "eduGroups");
	    	page.takeValueForKey(Boolean.valueOf(grReports != null), "grReports");
	    	folder.writeFile("list.html", page);
		}
		Enumeration grenu = groups.objectEnumerator();
		NSMutableArray reports = (NSMutableArray)ses.valueForKeyPath(
				"modules.studentReporter");
		reports.insertObjectAtIndex(WOApplication.application().valueForKeyPath(
				"strings.Strings.Overview.defaultReporter"),0);
		Integer year = (Integer) ses.valueForKey("eduYear");
		int[] idx = new int [] {0,0};
		while (grenu.hasMoreElements()) {
			Object next = grenu.nextElement();
			if(next instanceof NSDictionary) {
				ses.takeValueForKeyPath(next, "state.section");
				idx[0]++;
				continue;
			}
			EduGroup gr = (EduGroup) next;
//			File grDir = new File(folder,groupDirName(gr));
			EOEditingContext tmpEC = new SessionedEditingContext(
					ec.parentObjectStore(), folder.ctx.session(), false);
			tmpEC.lock();
			gr = (EduGroup)EOUtilities.localInstanceOfObject(tmpEC, gr);
			String grDir = groupDirName(gr,true);
			folder.enterDir(grDir, false);
			grDir = gr.name();
			NSArray list = gr.list();
			if(grReports != null) {
				completeGroup(gr, grReports, folder);
			}
			Enumeration stenu = list.objectEnumerator();
			NSArray args = new NSArray(new Object[] {year, gr });
			NSArray existingCourses = EOUtilities.objectsWithQualifierFormat(tmpEC,
					EduCourse.entityName,"eduYear = %d AND eduGroup = %@",args);
			idx[0]++;
			idx[1] = 0;
			while (stenu.hasMoreElements()) {
				{
					StringBuilder buf = new StringBuilder();
					buf.append(idx[0]).append(" / ").append(groups.count());
					buf.append(" [ ").append(grDir).append(": ");
					buf.append(idx[1]++).append(" / ").append(list.count()).append(" ]");
					Executor.progress().takeValueForKey(buf.toString(), "progress");
				}
				Student student = (Student) stenu.nextElement();
//		    	EOKeyGlobalID gid = (EOKeyGlobalID)student.editingContext().globalIDForObject(student);
//				File stDir = new File(grDir,gid.keyValues()[0].toString());
				completeStudent(gr, student, reports, existingCourses,
						folder);
			}
			tmpEC.unlock();
			tmpEC.dispose();
			folder.leaveDir();
		}
		ses.takeValueForKeyPath(sect, "state.section");
	}

    public static String groupDirName(EduGroup gr, boolean endslash) {
		EOKeyGlobalID gid = (EOKeyGlobalID)gr.editingContext().globalIDForObject(gr);
		StringBuilder filename = new StringBuilder(12);
		filename.append(gr.grade()).append('_');
		filename.append(gid.keyValues()[0]);
		if (endslash)
			filename.append('/');
		return filename.toString();
//		return new File(folder,filename.toString());
    }
    /*
    public static void writeGroup(EduGroup gr,NSArray students, NSArray reports,
    		File folder,Integer year, WOContext ctx) {
    	EOEditingContext ec = gr.editingContext();
		if(students == null)
			students = gr.list();
		Enumeration stenu = students.objectEnumerator();
		NSArray args = new NSArray(new Object[] {year, gr });
		NSArray existingCourses = EOUtilities.objectsWithQualifierFormat(ec,
				EduCourse.entityName,"eduYear = %d AND eduGroup = %@",args);
		File grDir = groupDir(folder, gr);
		while (stenu.hasMoreElements()) {
			Student student = (Student) stenu.nextElement();
			completeStudent(gr, student, reports, existingCourses, grDir, ctx, false);
		}
    } */
    public static void completeGroup(EduGroup gr, NSArray reports, 
    		FileWriterUtil exec) {
    	exec.enterDir("group", false);
		WOComponent page = WOApplication.application().pageWithName("StudentPage", exec.ctx);
		page.takeValueForKey(gr, "eduGroup");
		page.takeValueForKey(reports, "reports");
		exec.writeFile("index.html", page);
		Enumeration repEnu = reports.objectEnumerator();
		while (repEnu.hasMoreElements()) {
			NSDictionary reporter = (NSDictionary) repEnu.nextElement();
			String id = (String)reporter.valueForKey("id");
			String name = (String)reporter.valueForKey("component");
			page = WOApplication.application().pageWithName(name,exec.ctx);
			page.takeValueForKey(gr,"eduGroup");
			exec.writeFile(id + ".html", page);
		}
		exec.leaveDir();
    }    
    public static void completeStudent(EduGroup gr, Student student, NSArray reports,
    		NSArray existingCourses, FileWriterUtil exec) {
    	EOKeyGlobalID gid = (EOKeyGlobalID)student.editingContext().globalIDForObject(student);
    	exec.enterDir(gid.keyValues()[0].toString(), false);
//		if(!stDir.exists())
//			stDir.mkdirs();
		WOComponent page = WOApplication.application().pageWithName("StudentPage", exec.ctx);
		page.takeValueForKey(student, "student");
		page.takeValueForKey(gr, "eduGroup");
		page.takeValueForKey(reports, "reports");
		exec.writeFile("index.html", page);
/*		reportsForStudent(reports, student, ctx, existingCourses, stDir, overwrite);
    }
    private static void reportsForStudent(NSArray reports, Student student, WOContext ctx,
    		NSArray existingCourses, File stDir, boolean overwrite) { */
		Enumeration repEnu = reports.objectEnumerator();
		NSArray array = new NSArray(student);
		while (repEnu.hasMoreElements()) {
			NSDictionary reporter = (NSDictionary) repEnu.nextElement();
			page = WOApplication.application().pageWithName("PrintReport",exec.ctx);
			page.takeValueForKey(reporter,"reporter");
			page.takeValueForKey(existingCourses,"courses");
			page.takeValueForKey(array,"students");
			String filename = reporter.valueForKey("id") + ".html";
//			exec.writeData(filename, NSData.EmptyData); // TODO:remove this 
			exec.writeFile(filename, page);
		}
		exec.leaveDir();
    }

	public Boolean studentNotReady() {
		if(catalog == null)
			return Boolean.FALSE;
		if(grDict == null)
			return Boolean.TRUE;
		EOKeyGlobalID gid = (EOKeyGlobalID) ec.globalIDForObject(student); 
		String key = gid.keyValues()[0].toString();
		return Boolean.valueOf(!Various.boolForObject(grDict.valueForKey(key)));
	}
	
	public String sectionHref() {
		StringBuilder buf = new StringBuilder("list");
		buf.append(grDict.valueForKey("idx"));
		buf.append(".html");
		return buf.toString();
	}
	
	public String style() {
		Integer cur = (Integer)session().valueForKeyPath("state.section.idx");
		if (cur != null && cur.equals(grDict.valueForKey("idx")))
			return "font-weight:bold;";
		return null;
	}
}