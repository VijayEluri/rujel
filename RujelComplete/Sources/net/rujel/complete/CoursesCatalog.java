package net.rujel.complete;

import java.util.Enumeration;

import net.rujel.interfaces.EduCourse;
import net.rujel.interfaces.Person;
import net.rujel.reusables.SessionedEditingContext;
import net.rujel.reusables.Various;
import net.rujel.reusables.FileWriterUtil;

import com.webobjects.appserver.*;
import com.webobjects.eoaccess.EOUtilities;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOKeyGlobalID;
import com.webobjects.eocontrol.EOSortOrdering;
import com.webobjects.foundation.NSArray;
import com.webobjects.foundation.NSDictionary;
import com.webobjects.foundation.NSKeyValueCoding;

// Generated by the WOLips Templateengine Plug-in at Jun 22, 2009 1:21:03 PM
public class CoursesCatalog extends com.webobjects.appserver.WOComponent {
	protected static final EOSortOrdering[] orders = new EOSortOrdering[] {
		new EOSortOrdering("eduGroup",EOSortOrdering.CompareAscending),
		new EOSortOrdering("cycle",EOSortOrdering.CompareAscending),
		new EOSortOrdering("teacher",EOSortOrdering.CompareAscending)
	};
	public static final NSArray byClass = new NSArray(orders);
	public static final NSArray bySubject = new NSArray(
			new EOSortOrdering[] {orders[1],orders[0],orders[2]});
	public static final NSArray byTeacher = new NSArray(
			new EOSortOrdering[] {orders[2],orders[0],orders[1]});
	
	public EOEditingContext ec;
	public NSArray allCourses;
	public String grouping;
	protected Object currGrouping;
	public EduCourse item;
	public Integer courseID;
	public String grHead;
	public NSKeyValueCoding catalog;
	
    public CoursesCatalog(WOContext context) {
        super(context);
    }
    
    public NSArray allCourses() {
    	if(allCourses != null)
    		return allCourses;
    	allCourses = EOUtilities.objectsMatchingKeyAndValue(ec,
    			EduCourse.entityName, "eduYear", session().valueForKey("eduYear"));
    	if(allCourses != null && allCourses.count() > 1)
    		sort();
     	return allCourses;
    }
    
    protected void sort() {
  		if(grouping.equals("eduGroup"))
			allCourses = EOSortOrdering.sortedArrayUsingKeyOrderArray(allCourses, byClass);
		else if(grouping.equals("cycle"))
			allCourses = EOSortOrdering.sortedArrayUsingKeyOrderArray(allCourses, bySubject);
		else if(grouping.equals("teacher"))
			allCourses = EOSortOrdering.sortedArrayUsingKeyOrderArray(allCourses, byTeacher);
    }
    
    public void setGrouping(String newGrouping) {
    	grouping = newGrouping;
    	if(allCourses != null && allCourses.count() > 1)
    		sort();
    }
    
    public void setItem(EduCourse course) {
    	grHead = null;
    	if(course == null) {
    		courseID = null;
    		item = null;
    		return;
    	}
    	EOKeyGlobalID gid = (EOKeyGlobalID)ec.globalIDForObject(course);
    	courseID = (Integer)gid.keyValues()[0];
		if(item != null && grouping.equals("cycle")){
			if(item.cycle().subject().equals(course.cycle().subject())) {
				item = course;
				return;
			}
		}
    	if(item == null || item.valueForKey(grouping) != course.valueForKey(grouping)) {
    		StringBuilder buf = new StringBuilder("</div>");
    		buf.append("\n<div class=\"gr\"");
    		buf.append(" onmouseover = \"dim(this);\" onmouseout = \"unDim(this);\"");
    		buf.append(" onclick = \"toggleObj('gr").append(courseID).append("');\">");
    		if(grouping.equals("eduGroup"))
    			buf.append(course.eduGroup().name());
    		else if(grouping.equals("cycle"))
    			buf.append(course.cycle().subject());
    		else if(grouping.equals("teacher"))
    			buf.append(Person.Utility.fullName(course.teacher(), true, 2, 1, 1));
    		buf.append("</div>\n<div style=\"display:none;padding-left:1em;\" id=\"gr");
    		buf.append(courseID).append("\">\n");
    		grHead = buf.toString();
    	}
    	item = course;
    }
    /*
    public Boolean disabled() {
    	if(catalog == null || courseID == null)
    		return Boolean.FALSE;
    	NSDictionary crDict = (NSDictionary)catalog.valueForKey(courseID.toString());
    	return Boolean.valueOf(crDict == null || crDict.count() == 0);
    }
    
    public String link() {
    	if(courseID == null)
    		return null;
       	return courseID.toString() + "/index.html";
    }*/
    
    public String present() {
    	if(courseID == null)
    		return null;
    	int state = 10;
    	if(catalog != null) {
        	NSDictionary crDict = null;
    		crDict = (NSDictionary)catalog.valueForKey(courseID.toString());
    		if(crDict != null && crDict.count() > 0) {
    			Enumeration enu = crDict.objectEnumerator();
    			while (enu.hasMoreElements()) {
					if(!Various.boolForObject(enu.nextElement())) {
						state = 5;
						break;
					}
				}
    		} else {
    			state = 0;
    		}
    	}
    	StringBuilder buf = new StringBuilder(50);
    	if(state > 0) {
    		buf.append("<a href = \"").append(courseID).append("/index.html\"");
    		if(state < 10)
    			buf.append(" class = \"partial\"");
    		buf.append(" onclick = \"updateFrame(this.href);\">");
    	} else {
    		buf.append("<div style = \"color:#999999;\">");
    	}
		buf.append("<span style=\"float:left;\">");
    	if(!grouping.equals("eduGroup"))
    		buf.append(item.eduGroup().name());
    	if(!grouping.equals("cycle")) {
    		if(grouping.equals("teacher"))
    			buf.append("</span>\n<span style=\"float:right;\">");
    		buf.append(item.subjectWithComment());
    	} else if(item.comment() != null) {
    			buf.append(" (").append(item.comment()).append(')');
    	}
    	if(!grouping.equals("teacher")) {
    		buf.append("</span>\t<span class=\"teach\">");
    		buf.append(Person.Utility.fullName(item.teacher(), true, 2, 1, 1));
    	}
    	buf.append("</span>\n");
    	if(state > 0)
    		buf.append("</a>");
    	else
    		buf.append("</div>");
    	return buf.toString();
    }
    
    public static void prepareCourses(FileWriterUtil exec,
    		NSKeyValueCoding catalog, boolean write) {
    	if(catalog == null)
    		Executor.prepareFolder(exec, "eduGroup.html");
    	EOEditingContext ec = exec.ctx.session().defaultEditingContext();
		WOComponent page = WOApplication.application().pageWithName("CoursesCatalog", exec.ctx);
		page.takeValueForKey(ec, "ec");
		page.takeValueForKey(catalog, "catalog");
		page.takeValueForKey("teacher", "grouping");
		exec.writeFile("teacher.html", page);
		page.takeValueForKey("cycle", "grouping");
		exec.writeFile("cycle.html", page);
		page.takeValueForKey("eduGroup", "grouping");
		exec.writeFile("eduGroup.html", page);
		if(write) {
			NSArray courses = (NSArray)page.valueForKey("allCourses");
			NSArray reports = (NSArray)exec.ctx.session().valueForKeyPath(
					"modules.courseComplete");
			Enumeration enu = courses.objectEnumerator();
			int progress = 0;
			while (enu.hasMoreElements()) {
				EduCourse course = (EduCourse) enu.nextElement();
				EOKeyGlobalID gid = (EOKeyGlobalID)ec.globalIDForObject(course);
				String key = gid.keyValues()[0].toString();
				NSDictionary crDict = null;
				if(catalog != null) {
					crDict = (NSDictionary)catalog.valueForKey(key);
					if(crDict == null || crDict.count() == 0)
						continue;
				} else {
					EOEditingContext tmpEC = new SessionedEditingContext(
							ec.parentObjectStore(), exec.ctx.session(), false);
					tmpEC.lock();
					course = (EduCourse)EOUtilities.localInstanceOfObject(tmpEC, course);
				}
//				File cDir = new File(folder,key);
				{
					progress++;
					StringBuilder buf = new StringBuilder(10);
					buf.append(progress).append(" / ").append(courses.count());
					Executor.progress().takeValueForKey(buf.toString(), "progress");
				}
				CoursePage.printCourseReports(course, exec, key, reports, crDict);
				if(catalog == null) {
					course.editingContext().unlock();
					course.editingContext().dispose();
				}
			}
		}
    }
}