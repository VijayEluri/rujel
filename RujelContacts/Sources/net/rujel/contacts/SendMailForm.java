// SendMailForm.java

/*
 * Copyright (c) 2008, Gennady & Michael Kushnir
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * 	•	Redistributions of source code must retain the above copyright notice, this
 * 		list of conditions and the following disclaimer.
 * 	•	Redistributions in binary form must reproduce the above copyright notice,
 * 		this list of conditions and the following disclaimer in the documentation
 * 		and/or other materials provided with the distribution.
 * 	•	Neither the name of the RUJEL nor the names of its contributors may be used
 * 		to endorse or promote products derived from this software without specific 
 * 		prior written permission.
 * 		
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 * TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.rujel.contacts;


import java.lang.ref.WeakReference;
import java.util.Enumeration;
import java.util.logging.Logger;

import net.rujel.interfaces.*;
import net.rujel.reusables.*;
import net.rujel.ui.RedirectPopup;

import com.webobjects.appserver.*;
import com.webobjects.eocontrol.EOEditingContext;
import com.webobjects.eocontrol.EOEnterpriseObject;
import com.webobjects.foundation.*;

//import er.javamail.ERMailDeliveryPlainText;

// Generated by the WOLips Templateengine Plug-in at 23.04.2008 11:06:38
public class SendMailForm extends com.webobjects.appserver.WOComponent {
	protected static Logger logger = Logger.getLogger("rujel.contacts");

	public NSDictionary dict;
	public NSMutableSet adrSet = new NSMutableSet();
	public WOComponent returnPage;
	protected PerPersonLink contacts;
	
	public SendMailForm(WOContext context) {
        super(context);
    }
    
	public PersonLink persItem;
	public Contact contItem;
	public boolean showList = false;
	
	public String message;
//	public String sign;
	public String subjStart;
	public String subject;
	public String text;
	public boolean attach = false;
	public EOEditingContext ec;
	
    public void setDict(NSDictionary aDict) {
		dict = aDict;
		if(dict == null) {
			return;
		}
		ec = (EOEditingContext)dict.valueForKey("editingContext");
		NSArray students = (NSArray)dict.valueForKey("students");
		if(students == null || students.count() == 0) {
			message = (String)session().valueForKeyPath(
				"strings.RujelContacts_Contacts.SendMailForm.noRecipients");
			return;
		}
		if(ec == null)
			ec = ((EOEnterpriseObject)students.objectAtIndex(0)).editingContext();
		contacts = Contact.getContactsForList(students,EMailUtiliser.conType(ec),Boolean.TRUE);
		message = null;
		if(contacts == null || contacts.count() == 0) {
			message = (String)session().valueForKeyPath(
				"strings.RujelContacts_Contacts.SendMailForm.noAddresses");
			return;
		}
		Enumeration enu = students.objectEnumerator();
		//NSMutableArray allContacts = new NSMutableArray();
		while (enu.hasMoreElements()) {
			Student stu = (Student)enu.nextElement();
			NSArray cur = (NSArray) contacts.forPersonLink(stu);
			if(cur == null || cur.count() == 0) {
				if(message == null)
					message = (String)session().valueForKeyPath(
						"strings.RujelContacts_Contacts.SendMailForm.noAddressesFor") + ": ";
				else
					message = message + ", ";
				message = message + Person.Utility.fullName(stu, true, 2, 2, 0);
				continue;
			}
			//allContacts.addObjectsFromArray(cur);
			Enumeration cts = cur.objectEnumerator();
			while (cts.hasMoreElements()) {
				Contact c = (Contact) cts.nextElement();
				if(c.getUtiliser().flags().getFlag(0))
					adrSet.addObject(ec.globalIDForObject(c));
			}
		}
		subjStart = "RUJEL: " + dict.valueForKeyPath("eduGroup.name") + " : ";
	}
		
	public NSArray persContacts() {
		if(contacts == null)
			return null;
		return (NSArray)contacts.forPersonLink(persItem);
	}
	
	public boolean useMail() {
		return adrSet.containsObject(ec.globalIDForObject(contItem));
	}
	
	public void setUseMail(boolean value) {
		if(value) {
			adrSet.addObject(ec.globalIDForObject(contItem));
		} else {
			adrSet.removeObject(ec.globalIDForObject(contItem));
		}
	}
	
	public void toggleList() {
		showList = !showList;
	}
	
	public String button() {
		if(showList) {
			return (String)session().
			valueForKeyPath("strings.RujelContacts_Contacts.SendMailForm.hideList");
		} else {
			return (String)session().
			valueForKeyPath("strings.RujelContacts_Contacts.SendMailForm.showList");
		}
	}
	
	public WOActionResults send() {
		if(adrSet.count() <= 0) {
			message = (String)session().valueForKeyPath(
					"strings.RujelContacts_Contacts.SendMailForm.noRecipients");
			return null;
		}
		
		//InternetAddress[] to = EMailUtiliser.toAdressesFromContacts(adrSet, true);
		if(adrSet == null || adrSet.count() == 0) {
			message = (String)session().valueForKeyPath(
						"strings.RujelContacts_Contacts.SendMailForm.noRecipients");
			return null;
		}
		if((text == null || text.length() == 0) && !attach) {
			message = (String)session().valueForKeyPath(
					"strings.RujelContacts_Contacts.SendMailForm.noText");
			return null;
		}
//		if(sign != null) {
//			text = text + "\n\n---\n" + sign;
//		}
		NSMutableDictionary param = new NSMutableDictionary();
		param.takeValueForKey(dict.valueForKey("students"), "students");
		param.takeValueForKey(adrSet, "adrSet");
		NSMutableDictionary logParam = new NSMutableDictionary(session(),WOLogFormatter.SESSION);
		if(attach) {
			param.takeValueForKey(dict.valueForKey("reporter"), "reporter");
			param.takeValueForKey(dict.valueForKey("courses"), "courses");
			
			param.takeValueForKey(dict.valueForKey("period"), "period");
			param.takeValueForKey(dict.valueForKey("since"), "since");
			param.takeValueForKey(dict.valueForKey("to"), "to");
			logParam.takeValueForKey(dict.valueForKeyPath("reporter.title"),"type");
		}
		EduGroup eduGroup = (EduGroup)dict.valueForKey("eduGroup");
		if(eduGroup != null) {
			param.takeValueForKey(eduGroup, "eduGroup");
			param.takeValueForKey(eduGroup.name(), "groupName");
		}
		param.takeValueForKey(session().valueForKey("today"), "date");
		param.takeValueForKey(text, "messageText");
		param.takeValueForKey(dict.valueForKey("sign"), "sign");
		param.takeValueForKey(subject, "subject");
		logParam.takeValueForKey(eduGroup,WOLogFormatter.EO);
		logParam.takeValueForKey(eduGroup.name(), "eduGroup");
		param.takeValueForKey(logParam,"logParam");
		param.takeValueForKey("Done manual mailing","logMessage");
		
		param.takeValueForKey(new WeakReference(session()), "callerSession");
		EMailBroadcast.broadcastMarks(param);
		message = (String)session().valueForKeyPath(
				"strings.RujelContacts_Contacts.broadcastInitiated");
		session().takeValueForKey(message, "message");
		return RedirectPopup.getRedirect(context(), returnPage, null);
	}
	
	public NSArray periods = (NSArray)session().valueForKeyPath("modules.periods");;
    public Period perItem;
    
    public Period period() {
    	return (Period)dict.valueForKey("period");
    }
    
	public void setPeriod(Period newPeriod) {
		dict.takeValueForKey(newPeriod, "period");
		if(newPeriod == null)
			return;
		java.util.Date date = newPeriod.begin();
		if(date instanceof NSTimestamp) {
			dict.takeValueForKey(date,"since");
		} else {
			dict.takeValueForKey(new NSTimestamp(date),"since");
		}
		date = newPeriod.end();
		if(date instanceof NSTimestamp) {
			dict.takeValueForKey(date,"to");
		} else {
			dict.takeValueForKey(new NSTimestamp(date),"to");
		}
	}

	public Boolean canAttach() {
		if(dict.valueForKey("reporter") == null)
			return Boolean.FALSE;
		return (Boolean)session().valueForKeyPath("readAccess.create");
	}
}
